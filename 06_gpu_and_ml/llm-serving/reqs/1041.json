{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/project/src/lsp_store.rs\":\n```diff\n@@ -3666,7 +3666,7 @@\n         Task::ready(Ok(Default::default()))\n     }\n \n-    fn refresh_project_tree()\n+    fn refresh_server_tree()\n     fn on_settings_changed(&mut self, cx: &mut Context<Self>) {\n         let mut language_formatters_to_check = Vec::new();\n         for buffer in self.buffer_store.read(cx).buffers() {\n\n```\n\nUser edited \"crates/project/src/lsp_store.rs\":\n```diff\n@@ -3666,7 +3666,7 @@\n         Task::ready(Ok(Default::default()))\n     }\n \n-    fn refresh_server_tree()\n+    fn refresh_server_tree(&mut self)\n     fn on_settings_changed(&mut self, cx: &mut Context<Self>) {\n         let mut language_formatters_to_check = Vec::new();\n         for buffer in self.buffer_store.read(cx).buffers() {\n\n```\n\nUser edited \"crates/project/src/lsp_store.rs\":\n```diff\n@@ -3682,7 +3682,7 @@\n             }\n         }\n \n-        let mut to_stop = Vec::new();\n+\n         if let Some(local) = self.as_local_mut() {\n             local.lsp_tree.clone().update(cx, |this, cx| {\n                 let mut get_adapter = {\n\n```\n\nUser edited \"crates/project/src/lsp_store.rs\":\n```diff\n@@ -3684,6 +3684,7 @@\n \n \n         if let Some(local) = self.as_local_mut() {\n+                    let mut to_stop = Vec::new();\n             local.lsp_tree.clone().update(cx, |this, cx| {\n                 let mut get_adapter = {\n                     let languages = local.languages.clone();\n\n```\n\nUser edited \"crates/project/src/lsp_store.rs\":\n```diff\n@@ -3684,7 +3684,7 @@\n \n \n         if let Some(local) = self.as_local_mut() {\n-                    let mut to_stop = Vec::new();\n+            let mut to_stop = Vec::new();\n             local.lsp_tree.clone().update(cx, |this, cx| {\n                 let mut get_adapter = {\n                     let languages = local.languages.clone();\n\n```\n\nUser edited \"crates/project/src/lsp_store.rs\":\n```diff\n@@ -3733,10 +3733,11 @@\n                     cx,\n                 );\n             });\n-        }\n-        for id in to_stop {\n-            self.stop_local_language_server(id, cx).detach();\n+            for id in to_stop {\n+                self.stop_local_language_server(id, cx).detach();\n+            }\n         }\n+\n         if let Some(prettier_store) = self.as_local().map(|s| s.prettier_store.clone()) {\n             prettier_store.update(cx, |prettier_store, cx| {\n                 prettier_store.on_settings_changed(language_formatters_to_check, cx)\n\n```\n\nUser edited \"crates/project/src/lsp_store.rs\":\n```diff\n@@ -3666,7 +3666,9 @@\n         Task::ready(Ok(Default::default()))\n     }\n \n-    fn refresh_server_tree(&mut self)\n+    fn refresh_server_tree(&mut self) {\n+        \n+    }\n     fn on_settings_changed(&mut self, cx: &mut Context<Self>) {\n         let mut language_formatters_to_check = Vec::new();\n         for buffer in self.buffer_store.read(cx).buffers() {\n\n```\n\nUser edited \"crates/project/src/lsp_store.rs\":\n```diff\n@@ -3666,7 +3666,7 @@\n         Task::ready(Ok(Default::default()))\n     }\n \n-    fn refresh_server_tree(&mut self) {\n+    fn refresh_server_tree(&mut self, ) {\n         \n     }\n     fn on_settings_changed(&mut self, cx: &mut Context<Self>) {\n\n```\n\n### Input:\n```crates/project/src/lsp_store.rs\n                                cx,\n<|editable_region_start|>\n                            );\n                        })\n                    })\n                    .log_err();\n\n                    Some(defer(|| {\n                        cx.update(|cx| {\n                            this.update(cx, |this, cx| {\n                                this.on_lsp_work_end(\n                                    language_server.server_id(),\n                                    id.to_string(),\n                                    cx,\n                                );\n                            })\n                        })\n                        .log_err();\n                    }))\n                } else {\n                    None\n                };\n\n                let result = lsp_request.await;\n\n                let response = result.map_err(|err| {\n                    let message = format!(\n                        \"{} via {} failed: {}\",\n                        request.display_name(),\n                        language_server.name(),\n                        err\n                    );\n                    log::warn!(\"{}\", message);\n                    anyhow!(message)\n                })?;\n\n                let response = request\n                    .response_from_lsp(\n                        response,\n                        this.upgrade().ok_or_else(|| anyhow!(\"no app context\"))?,\n                        buffer_handle,\n                        language_server.server_id(),\n                        cx.clone(),\n                    )\n                    .await;\n                response\n            });\n        }\n\n        Task::ready(Ok(Default::default()))\n    }\n\n    fn refresh_server_tree(&mut self, <|user_cursor_is_here|>) {\n        \n    }\n    fn on_settings_changed(&mut self, cx: &mut Context<Self>) {\n        let mut language_formatters_to_check = Vec::new();\n        for buffer in self.buffer_store.read(cx).buffers() {\n            let buffer = buffer.read(cx);\n            let buffer_file = File::from_dyn(buffer.file());\n            let buffer_language = buffer.language();\n            let settings = language_settings(buffer_language.map(|l| l.name()), buffer.file(), cx);\n            if buffer_language.is_some() {\n                language_formatters_to_check.push((\n                    buffer_file.map(|f| f.worktree_id(cx)),\n                    settings.into_owned(),\n                ));\n            }\n        }\n\n\n        if let Some(local) = self.as_local_mut() {\n            let mut to_stop = Vec::new();\n            local.lsp_tree.clone().update(cx, |this, cx| {\n                let mut get_adapter = {\n                    let languages = local.languages.clone();\n                    let environment = local.environment.clone();\n                    let weak = local.weak.clone();\n                    let worktree_store = local.worktree_store.clone();\n                    let http_client = local.http_client.clone();\n                    let fs = local.fs.clone();\n                    move |worktree_id, cx: &mut App| -> Option<Arc<dyn LspAdapterDelegate>> {\n                        let worktree = worktree_store.read(cx).worktree_for_id(worktree_id, cx)?;\n                        Some(LocalLspAdapterDelegate::new(\n                            languages.clone(),\n                            &environment,\n                            weak.clone(),\n                            &worktree,\n                            http_client.clone(),\n                            fs.clone(),\n                            cx,\n                        ))\n                    }\n                };\n\n                this.on_settings_changed(\n                    &mut get_adapter,\n                    &mut |disposition, cx| {\n                        let worktree = local\n                            .worktree_store\n                            .read(cx)\n                            .worktree_for_id(disposition.path.worktree_id, cx)\n                            .expect(\"Worktree ID to be valid\");\n                        let delegate =\n                            LocalLspAdapterDelegate::from_local_lsp(local, &worktree, cx);\n<|editable_region_end|>\n                        let delegate =\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/project/src/lsp_store.rs\n                                cx,\n<|editable_region_start|>\n                            );\n                        })\n                    })\n                    .log_err();\n\n                    Some(defer(|| {\n                        cx.update(|cx| {\n                            this.update(cx, |this, cx| {\n                                this.on_lsp_work_end(\n                                    language_server.server_id(),\n                                    id.to_string(),\n                                    cx,\n                                );\n                            })\n                        })\n                        .log_err();\n                    }))\n                } else {\n                    None\n                };\n\n                let result = lsp_request.await;\n\n                let response = result.map_err(|err| {\n                    let message = format!(\n                        \"{} via {} failed: {}\",\n                        request.display_name(),\n                        language_server.name(),\n                        err\n                    );\n                    log::warn!(\"{}\", message);\n                    anyhow!(message)\n                })?;\n\n                let response = request\n                    .response_from_lsp(\n                        response,\n                        this.upgrade().ok_or_else(|| anyhow!(\"no app context\"))?,\n                        buffer_handle,\n                        language_server.server_id(),\n                        cx.clone(),\n                    )\n                    .await;\n                response\n            });\n        }\n\n        Task::ready(Ok(Default::default()))\n    }\n\n    fn refresh_server_tree(&mut self, <|user_cursor_is_here|>) {\n        \n    }\n    fn on_settings_changed(&mut self, cx: &mut Context<Self>) {\n        let mut language_formatters_to_check = Vec::new();\n        for buffer in self.buffer_store.read(cx).buffers() {\n            let buffer = buffer.read(cx);\n            let buffer_file = File::from_dyn(buffer.file());\n            let buffer_language = buffer.language();\n            let settings = language_settings(buffer_language.map(|l| l.name()), buffer.file(), cx);\n            if buffer_language.is_some() {\n                language_formatters_to_check.push((\n                    buffer_file.map(|f| f.worktree_id(cx)),\n                    settings.into_owned(),\n                ));\n            }\n        }\n\n\n        if let Some(local) = self.as_local_mut() {\n            let mut to_stop = Vec::new();\n            local.lsp_tree.clone().update(cx, |this, cx| {\n                let mut get_adapter = {\n                    let languages = local.languages.clone();\n                    let environment = local.environment.clone();\n                    let weak = local.weak.clone();\n                    let worktree_store = local.worktree_store.clone();\n                    let http_client = local.http_client.clone();\n                    let fs = local.fs.clone();\n                    move |worktree_id, cx: &mut App| -> Option<Arc<dyn LspAdapterDelegate>> {\n                        let worktree = worktree_store.read(cx).worktree_for_id(worktree_id, cx)?;\n                        Some(LocalLspAdapterDelegate::new(\n                            languages.clone(),\n                            &environment,\n                            weak.clone(),\n                            &worktree,\n                            http_client.clone(),\n                            fs.clone(),\n                            cx,\n                        ))\n                    }\n                };\n\n                this.on_settings_changed(\n                    &mut get_adapter,\n                    &mut |disposition, cx| {\n                        let worktree = local\n                            .worktree_store\n                            .read(cx)\n                            .worktree_for_id(disposition.path.worktree_id, cx)\n                            .expect(\"Worktree ID to be valid\");\n                        let delegate =\n                            LocalLspAdapterDelegate::from_local_lsp(local, &worktree, cx);\n<|editable_region_end|>\n                        let delegate =\n```"
  },
  "max_tokens": 1024
}