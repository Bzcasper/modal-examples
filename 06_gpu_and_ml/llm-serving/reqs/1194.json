{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"assets/keymaps/default-macos.json\":\n```diff\n@@ -505,7 +505,7 @@\n       \"cmd-shift-e\": \"project_panel::ToggleFocus\",\n       \"cmd-shift-b\": \"outline_panel::ToggleFocus\",\n       \"ctrl-shift-g\": \"git_panel::ToggleFocus\",\n-      \"cmd-?\": \"assistant::ToggleFocus\",\n+      \"cmd-i\": \"assistant::ToggleFocus\",\n       \"cmd-alt-s\": \"workspace::SaveAll\",\n       \"cmd-k m\": \"language_selector::Toggle\",\n       \"escape\": \"workspace::Unfollow\",\n\n```\n\nUser edited \"\":\n```diff\n@@ -35,6 +35,10 @@\n       ]\n     }\n   ],\n+  \"project_panel\": {\n+      \"folder_icons\": false\n+    },\n+\n   \"inline_completions\": {\n     \"disabled_globs\": [\".env\"]\n   },\n\n```\n\nUser edited \"\":\n```diff\n@@ -36,8 +36,8 @@\n     }\n   ],\n   \"project_panel\": {\n-      \"folder_icons\": false\n-    },\n+    \"folder_icons\": false\n+  },\n \n   \"inline_completions\": {\n     \"disabled_globs\": [\".env\"]\n\n```\n\nUser edited \"\":\n```diff\n@@ -3,7 +3,8 @@\n     \"context\": \"Workspace\",\n     \"bindings\": {\n       \"alt-\\\\\": null,\n-      \"ctrl-c\": \"menu::Cancel\"\n+      \"ctrl-c\": \"menu::Cancel\",\n+      \"alt-cmd-o\": [\"projects::OpenRecent\", {\"create_new_window\": true }], \n     }\n   },\n   {\n\n```\n\nUser edited \"\":\n```diff\n@@ -4,7 +4,7 @@\n     \"bindings\": {\n       \"alt-\\\\\": null,\n       \"ctrl-c\": \"menu::Cancel\",\n-      \"alt-cmd-o\": [\"projects::OpenRecent\", {\"create_new_window\": true }], \n+      \"alt-cmd-o\": [\"projects::OpenRecent\", { \"create_new_window\": true }]\n     }\n   },\n   {\n\n```\n\n\n\nUser edited \"crates/editor/src/editor.rs\":\n```diff\n@@ -2698,7 +2698,7 @@\n         let mut linked_edits = HashMap::<_, Vec<_>>::default();\n         let mut new_selections = Vec::with_capacity(selections.len());\n         let mut new_autoclose_regions = Vec::new();\n-        let snapshot = self.buffer.read(cx).read(cx);\n+        let snapshot = self.<buffer>.read(cx).read(cx);\n \n         for (selection, autoclose_region) in\n             self.selections_with_autoclose_regions(selections, &snapshot)\n\n```\n\nUser edited \"crates/editor/src/editor.rs\":\n```diff\n@@ -2698,7 +2698,7 @@\n         let mut linked_edits = HashMap::<_, Vec<_>>::default();\n         let mut new_selections = Vec::with_capacity(selections.len());\n         let mut new_autoclose_regions = Vec::new();\n-        let snapshot = self.<buffer>.read(cx).read(cx);\n+        let snapshot = self.buffer.read(cx).read(cx);\n \n         for (selection, autoclose_region) in\n             self.selections_with_autoclose_regions(selections, &snapshot)\n\n```\n\nUser edited \"script/danger/dangerfile.ts\":\n```diff\n@@ -9,7 +9,7 @@\n });\n \n const RELEASE_NOTES_PATTERN = /Release Notes:\\r?\\n\\s+-/gm;\n-const body = danger.github.pr.body;\n+const body = <danger>.github.pr.body;\n \n const hasReleaseNotes = RELEASE_NOTES_PATTERN.test(body);\n \n\n```\n\nUser edited \"script/danger/dangerfile.ts\":\n```diff\n@@ -9,7 +9,7 @@\n });\n \n const RELEASE_NOTES_PATTERN = /Release Notes:\\r?\\n\\s+-/gm;\n-const body = <danger>.github.pr.body;\n+const body = danger.github.pr.body;\n \n const hasReleaseNotes = RELEASE_NOTES_PATTERN.test(body);\n \n\n```\n\nUser edited \"testing\":\n```diff\n@@ -0,0 +1 @@\n+{\"foo\": \"bar\"}\n\\ No newline at end of file\n\n```\n\nUser edited \"testing\":\n```diff\n@@ -1 +1 @@\n-{\"foo\": \"bar\"}\n\\ No newline at end of file\n+{\"foo\": \"bar\", \"baz\": 1}\n\\ No newline at end of file\n\n```\n\nUser edited \"testing\":\n```diff\n@@ -1 +1 @@\n-{\"foo\": \"bar\", \"baz\": 1}\n\\ No newline at end of file\n+{\"foo\": \"bar\", \"baz\": 1}\n\n```\n\n### Input:\n```crates/project/src/project.rs\n<|editable_region_start|>\n<|user_cursor_is_here|>pub mod buffer_store;\nmod color_extractor;\npub mod connection_manager;\npub mod debounced_delay;\npub mod git;\npub mod image_store;\npub mod lsp_command;\npub mod lsp_ext_command;\npub mod lsp_store;\npub mod prettier_store;\npub mod project_settings;\npub mod search;\nmod task_inventory;\npub mod task_store;\npub mod terminals;\npub mod toolchain_store;\npub mod worktree_store;\n\n#[cfg(test)]\nmod project_tests;\n\nmod direnv;\nmod environment;\npub use environment::EnvironmentErrorMessage;\nuse git::RepositoryHandle;\npub mod search_history;\nmod yarn;\n\nuse crate::git::GitState;\nuse anyhow::{anyhow, Context as _, Result};\nuse buffer_store::{BufferChangeSet, BufferStore, BufferStoreEvent};\nuse client::{proto, Client, Collaborator, PendingEntitySubscription, TypedEnvelope, UserStore};\nuse clock::ReplicaId;\nuse collections::{BTreeSet, HashMap, HashSet};\nuse debounced_delay::DebouncedDelay;\npub use environment::ProjectEnvironment;\nuse futures::{\n    channel::mpsc::{self, UnboundedReceiver},\n    future::try_join_all,\n    StreamExt,\n};\npub use image_store::{ImageItem, ImageStore};\nuse image_store::{ImageItemEvent, ImageStoreEvent};\n\nuse ::git::{\n    blame::Blame,\n    repository::{Branch, GitRepository},\n    status::FileStatus,\n};\nuse gpui::{\n    AnyEntity, App, AppContext as _, AsyncApp, BorrowAppContext, Context, Entity, EventEmitter,\n    Hsla, SharedString, Task, WeakEntity, Window,\n};\nuse itertools::Itertools;\nuse language::{\n    language_settings::InlayHintKind, proto::split_operations, Buffer, BufferEvent,\n    CachedLspAdapter, Capability, CodeLabel, Documentation, File as _, Language, LanguageName,\n    LanguageRegistry, PointUtf16, ToOffset, ToPointUtf16, Toolchain, ToolchainList, Transaction,\n    Unclipped,\n};\nuse lsp::{\n    CodeActionKind, CompletionContext, CompletionItemKind, DocumentHighlightKind, LanguageServer,\n    LanguageServerId, LanguageServerName, MessageActionItem,\n};\nuse lsp_command::*;\nuse lsp_store::LspFormatTarget;\nuse node_runtime::NodeRuntime;\nuse parking_lot::Mutex;\npub use prettier_store::PrettierStore;\nuse project_settings::{ProjectSettings, SettingsObserver, SettingsObserverEvent};\nuse remote::{SshConnectionOptions, SshRemoteClient};\nuse rpc::{\n    proto::{LanguageServerPromptResponse, SSH_PROJECT_ID},\n    AnyProtoClient, ErrorCode,\n};\nuse search::{SearchInputKind, SearchQuery, SearchResult};\nuse search_history::SearchHistory;\nuse settings::{InvalidSettingsError, Settings, SettingsLocation, SettingsStore};\nuse smol::channel::Receiver;\nuse snippet::Snippet;\nuse snippet_provider::SnippetProvider;\nuse std::{\n    borrow::Cow,\n    ops::Range,\n    path::{Component, Path, PathBuf},\n    pin::pin,\n    str,\n    sync::Arc,\n    time::Duration,\n};\nuse task_store::TaskStore;\nuse terminals::Terminals;\nuse text::{Anchor, BufferId};\nuse toolchain_store::EmptyToolchainStore;\nuse util::{paths::compare_paths, ResultExt as _};\nuse worktree::{CreatedEntry, Snapshot, Traversal};\nuse worktree_store::{WorktreeStore, WorktreeStoreEvent};\n\npub use fs::*;\npub use language::Location;\n#[cfg(any(test, feature = \"test-support\"))]\npub use prettier::FORMAT_SUFFIX as TEST_PRETTIER_FORMAT_SUFFIX;\npub use task_inventory::{\n    BasicContextProvider, ContextProviderWithTasks, Inventory, TaskSourceKind,\n};\npub use worktree::{\n    Entry, EntryKind, File, LocalWorktree, PathChange, ProjectEntryId, UpdatedEntriesSet,\n    UpdatedGitRepositoriesSet, Worktree, WorktreeId, WorktreeSettings, FS_WATCH_LATENCY,\n};\n\npub use buffer_store::ProjectTransaction;\npub use lsp_store::{\n    DiagnosticSummary, LanguageServerLogType, LanguageServerProgress, LanguageServerPromptRequest,\n    LanguageServerStatus, LanguageServerToQuery, LspStore, LspStoreEvent,\n    SERVER_PROGRESS_THROTTLE_TIMEOUT,\n};\npub use toolchain_store::ToolchainStore;\nconst MAX_PROJECT_SEARCH_HISTORY_SIZE: usize = 500;\nconst MAX_SEARCH_RESULT_FILES: usize = 5_000;\nconst MAX_SEARCH_RESULT_RANGES: usize = 10_000;\n\npub trait ProjectItem {\n    fn try_open(\n        project: &Entity<Project>,\n        path: &ProjectPath,\n<|editable_region_end|>\n        project: &Entity<Project>,\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/project/src/project.rs\n<|editable_region_start|>\n<|user_cursor_is_here|>pub mod buffer_store;\nmod color_extractor;\npub mod connection_manager;\npub mod debounced_delay;\npub mod git;\npub mod image_store;\npub mod lsp_command;\npub mod lsp_ext_command;\npub mod lsp_store;\npub mod prettier_store;\npub mod project_settings;\npub mod search;\nmod task_inventory;\npub mod task_store;\npub mod terminals;\npub mod toolchain_store;\npub mod worktree_store;\n\n#[cfg(test)]\nmod project_tests;\n\nmod direnv;\nmod environment;\npub use environment::EnvironmentErrorMessage;\nuse git::RepositoryHandle;\npub mod search_history;\nmod yarn;\n\nuse crate::git::GitState;\nuse anyhow::{anyhow, Context as _, Result};\nuse buffer_store::{BufferChangeSet, BufferStore, BufferStoreEvent};\nuse client::{proto, Client, Collaborator, PendingEntitySubscription, TypedEnvelope, UserStore};\nuse clock::ReplicaId;\nuse collections::{BTreeSet, HashMap, HashSet};\nuse debounced_delay::DebouncedDelay;\npub use environment::ProjectEnvironment;\nuse futures::{\n    channel::mpsc::{self, UnboundedReceiver},\n    future::try_join_all,\n    StreamExt,\n};\npub use image_store::{ImageItem, ImageStore};\nuse image_store::{ImageItemEvent, ImageStoreEvent};\n\nuse ::git::{\n    blame::Blame,\n    repository::{Branch, GitRepository},\n    status::FileStatus,\n};\nuse gpui::{\n    AnyEntity, App, AppContext as _, AsyncApp, BorrowAppContext, Context, Entity, EventEmitter,\n    Hsla, SharedString, Task, WeakEntity, Window,\n};\nuse itertools::Itertools;\nuse language::{\n    language_settings::InlayHintKind, proto::split_operations, Buffer, BufferEvent,\n    CachedLspAdapter, Capability, CodeLabel, Documentation, File as _, Language, LanguageName,\n    LanguageRegistry, PointUtf16, ToOffset, ToPointUtf16, Toolchain, ToolchainList, Transaction,\n    Unclipped,\n};\nuse lsp::{\n    CodeActionKind, CompletionContext, CompletionItemKind, DocumentHighlightKind, LanguageServer,\n    LanguageServerId, LanguageServerName, MessageActionItem,\n};\nuse lsp_command::*;\nuse lsp_store::LspFormatTarget;\nuse node_runtime::NodeRuntime;\nuse parking_lot::Mutex;\npub use prettier_store::PrettierStore;\nuse project_settings::{ProjectSettings, SettingsObserver, SettingsObserverEvent};\nuse remote::{SshConnectionOptions, SshRemoteClient};\nuse rpc::{\n    proto::{LanguageServerPromptResponse, SSH_PROJECT_ID},\n    AnyProtoClient, ErrorCode,\n};\nuse search::{SearchInputKind, SearchQuery, SearchResult};\nuse search_history::SearchHistory;\nuse settings::{InvalidSettingsError, Settings, SettingsLocation, SettingsStore};\nuse smol::channel::Receiver;\nuse snippet::Snippet;\nuse snippet_provider::SnippetProvider;\nuse std::{\n    borrow::Cow,\n    ops::Range,\n    path::{Component, Path, PathBuf},\n    pin::pin,\n    str,\n    sync::Arc,\n    time::Duration,\n};\nuse task_store::TaskStore;\nuse terminals::Terminals;\nuse text::{Anchor, BufferId};\nuse toolchain_store::EmptyToolchainStore;\nuse util::{paths::compare_paths, ResultExt as _};\nuse worktree::{CreatedEntry, Snapshot, Traversal};\nuse worktree_store::{WorktreeStore, WorktreeStoreEvent};\n\npub use fs::*;\npub use language::Location;\n#[cfg(any(test, feature = \"test-support\"))]\npub use prettier::FORMAT_SUFFIX as TEST_PRETTIER_FORMAT_SUFFIX;\npub use task_inventory::{\n    BasicContextProvider, ContextProviderWithTasks, Inventory, TaskSourceKind,\n};\npub use worktree::{\n    Entry, EntryKind, File, LocalWorktree, PathChange, ProjectEntryId, UpdatedEntriesSet,\n    UpdatedGitRepositoriesSet, Worktree, WorktreeId, WorktreeSettings, FS_WATCH_LATENCY,\n};\n\npub use buffer_store::ProjectTransaction;\npub use lsp_store::{\n    DiagnosticSummary, LanguageServerLogType, LanguageServerProgress, LanguageServerPromptRequest,\n    LanguageServerStatus, LanguageServerToQuery, LspStore, LspStoreEvent,\n    SERVER_PROGRESS_THROTTLE_TIMEOUT,\n};\npub use toolchain_store::ToolchainStore;\nconst MAX_PROJECT_SEARCH_HISTORY_SIZE: usize = 500;\nconst MAX_SEARCH_RESULT_FILES: usize = 5_000;\nconst MAX_SEARCH_RESULT_RANGES: usize = 10_000;\n\npub trait ProjectItem {\n    fn try_open(\n        project: &Entity<Project>,\n        path: &ProjectPath,\n<|editable_region_end|>\n        project: &Entity<Project>,\n```"
  },
  "max_tokens": 1024
}