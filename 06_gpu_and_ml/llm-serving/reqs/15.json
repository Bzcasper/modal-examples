{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -18,6 +18,7 @@\n     File, Language,\n };\n use settings::{update_settings_file, Settings, SettingsStore};\n+use zed_predict_onboarding::ZedPredictModal;\n use std::{path::Path, sync::Arc, time::Duration};\n use supermaven::{AccountStatus, Supermaven};\n use ui::{prelude::*, ButtonLike, Color, Icon, IconWithIndicator, Indicator, PopoverMenuHandle};\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -1,5 +1,5 @@\n use anyhow::Result;\n-use client::UserStore;\n+use client::{Client, UserStore};\n use copilot::{Copilot, Status};\n use editor::{actions::ShowInlineCompletion, scroll::Autoscroll, Editor};\n use feature_flags::{\n@@ -18,7 +18,6 @@\n     File, Language,\n };\n use settings::{update_settings_file, Settings, SettingsStore};\n-use zed_predict_onboarding::ZedPredictModal;\n use std::{path::Path, sync::Arc, time::Duration};\n use supermaven::{AccountStatus, Supermaven};\n use ui::{prelude::*, ButtonLike, Color, Icon, IconWithIndicator, Indicator, PopoverMenuHandle};\n@@ -32,6 +31,7 @@\n     StatusItemView, Toast, Workspace,\n };\n use zed_actions::OpenBrowser;\n+use zed_predict_onboarding::ZedPredictModal;\n use zeta::RateCompletionModal;\n \n actions!(zeta, [RateCompletions]);\n@@ -48,6 +48,7 @@\n     language: Option<Arc<Language>>,\n     file: Option<Arc<dyn File>>,\n     inline_completion_provider: Option<Arc<dyn inline_completion::InlineCompletionProviderHandle>>,\n+    client: Arc<Client>,\n     fs: Arc<dyn Fs>,\n     workspace: WeakEntity<Workspace>,\n     user_store: Entity<UserStore>,\n@@ -231,15 +232,17 @@\n                     return div();\n                 }\n \n-                if !self\n-                    .user_store\n-                    .read(cx)\n-                    .current_user_has_accepted_terms()\n-                    .unwrap_or(false)\n-                {\n+                let current_user_terms_accepted =\n+                    self.user_store.read(cx).current_user_has_accepted_terms();\n+\n+                if !current_user_terms_accepted.unwrap_or(false) {\n                     let workspace = self.workspace.clone();\n                     let user_store = self.user_store.clone();\n+                    let client = self.client.clone();\n+                    let fs = self.fs.clone();\n \n+                    let signed_in = current_user_terms_accepted.is_some();\n+\n                     return div().child(\n                         ButtonLike::new(\"zeta-pending-tos-icon\")\n                             .child(\n@@ -252,20 +255,29 @@\n                                 ))\n                                 .into_any_element(),\n                             )\n-                            .tooltip(|window, cx| {\n+                            .tooltip(move |window, cx| {\n                                 Tooltip::with_meta(\n                                     \"Edit Predictions\",\n                                     None,\n-                                    \"Read Terms of Service\",\n+                                    if signed_in {\n+                                        \"Read Terms of Service\"\n+                                    } else {\n+                                        \"Sign in to use\"\n+                                    },\n                                     window,\n                                     cx,\n                                 )\n                             })\n                             .on_click(cx.listener(move |_, _, window, cx| {\n-                                let user_store = user_store.clone();\n-\n                                 if let Some(workspace) = workspace.upgrade() {\n-                                    ZedPredictModal::toggle(workspace, user_store, window, cx);\n+                                    ZedPredictModal::toggle(\n+                                        workspace,\n+                                        user_store.clone(),\n+                                        client.clone(),\n+                                        fs.clone(),\n+                                        window,\n+                                        cx,\n+                                    );\n                                 }\n                             })),\n                     );\n@@ -318,6 +330,7 @@\n         workspace: WeakEntity<Workspace>,\n         fs: Arc<dyn Fs>,\n         user_store: Entity<UserStore>,\n+        client: Arc<Client>,\n         popover_menu_handle: PopoverMenuHandle<ContextMenu>,\n         cx: &mut Context<Self>,\n     ) -> Self {\n@@ -337,6 +350,7 @@\n             inline_completion_provider: None,\n             popover_menu_handle,\n             workspace,\n+            client,\n             fs,\n             user_store,\n         }\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1456,6 +1456,8 @@\n     fn show_data_collection_toggle() -> bool {\n         true\n     }\n+    \n+    fn is_data_collection\n \n     fn toggle_data_collection(&self, _cx: &mut App) {\n         println!(\"TOGGLING!\");\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1457,7 +1457,9 @@\n         true\n     }\n     \n-    fn is_data_collection\n+    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n+        \n+    }\n \n     fn toggle_data_collection(&self, _cx: &mut App) {\n         println!(\"TOGGLING!\");\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1457,7 +1457,7 @@\n         true\n     }\n     \n-    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n+    fn is_data_collection_enabled(&self, cx: &App) -> bool {\n         \n     }\n \n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1458,6 +1458,7 @@\n     }\n     \n     fn is_data_collection_enabled(&self, cx: &App) -> bool {\n+        self.\n         \n     }\n \n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1456,10 +1456,9 @@\n     fn show_data_collection_toggle() -> bool {\n         true\n     }\n-    \n+\n     fn is_data_collection_enabled(&self, cx: &App) -> bool {\n-        self.\n-        \n+        self.data_collection_choice.is_enabled()\n     }\n \n     fn toggle_data_collection(&self, _cx: &mut App) {\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1457,7 +1457,7 @@\n         true\n     }\n \n-    fn is_data_collection_enabled(&self, cx: &App) -> bool {\n+    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n         self.data_collection_choice.is_enabled()\n     }\n \n\n```\n\n### Input:\n```src/pages/[company].tsx\n          </Button>\n<|editable_region_start|>\n        }\n      />\n      <BaseDialog.Portal>\n        <DialogBackdrop />\n        <DialogWrap title=\"Apply via email\">\n          <DialogDescription>\n            Copy the email to send your application. Good luck!\n          </DialogDescription>\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={handleCopyEmail}\n          >\n            {email}\n            <span className=\"relative flex items-center\">\n              <Copy\n                size={14}\n                className={clsx(\n                  \"absolute transition-opacity duration-300\",\n                  copied ? \"opacity-0\" : \"opacity-50\",\n                )}\n              />\n              <Check\n                size={14}\n                className={clsx(\n                  \"absolute transition-opacity duration-300 text-green-600 dark:text-green-300\",\n                  copied ? \"opacity-100\" : \"opacity-0\",\n                )}\n              />\n            </span>\n          </Button>\n        </DialogWrap>\n      </BaseDialog.Portal><|user_cursor_is_here|>\n    </BaseDialog.Root>\n  );\n}\n\nexport default function CompanyPage({\n  job,\n  error,\n}: {\n  job?: Job;\n  error?: string;\n}) {\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!job) {\n    return <div>Job not found</div>;\n  }\n\n  const components: Components = {\n    h1: (props) => (\n      <h1 className=\"text-2xl dark:text-white font-bold my-4\" {...props} />\n    ),\n    h2: (props) => (\n      <h2\n        className=\"pt-6 text-xl dark:text-white font-semibold my-3\"\n        {...props}\n      />\n    ),\n    h3: (props) => (\n      <h3\n        className=\"pt-4 text-xl dark:text-white font-semibold my-3\"\n<|editable_region_end|>\n        {...props}\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```src/pages/[company].tsx\n          </Button>\n<|editable_region_start|>\n        }\n      />\n      <BaseDialog.Portal>\n        <DialogBackdrop />\n        <DialogWrap title=\"Apply via email\">\n          <DialogDescription>\n            Copy the email to send your application. Good luck!\n          </DialogDescription>\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={handleCopyEmail}\n          >\n            {email}\n            <span className=\"relative flex items-center\">\n              <Copy\n                size={14}\n                className={clsx(\n                  \"absolute transition-opacity duration-300\",\n                  copied ? \"opacity-0\" : \"opacity-50\",\n                )}\n              />\n              <Check\n                size={14}\n                className={clsx(\n                  \"absolute transition-opacity duration-300 text-green-600 dark:text-green-300\",\n                  copied ? \"opacity-100\" : \"opacity-0\",\n                )}\n              />\n            </span>\n          </Button>\n        </DialogWrap>\n      </BaseDialog.Portal><|user_cursor_is_here|>\n    </BaseDialog.Root>\n  );\n}\n\nexport default function CompanyPage({\n  job,\n  error,\n}: {\n  job?: Job;\n  error?: string;\n}) {\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!job) {\n    return <div>Job not found</div>;\n  }\n\n  const components: Components = {\n    h1: (props) => (\n      <h1 className=\"text-2xl dark:text-white font-bold my-4\" {...props} />\n    ),\n    h2: (props) => (\n      <h2\n        className=\"pt-6 text-xl dark:text-white font-semibold my-3\"\n        {...props}\n      />\n    ),\n    h3: (props) => (\n      <h3\n        className=\"pt-4 text-xl dark:text-white font-semibold my-3\"\n<|editable_region_end|>\n        {...props}\n```"
  },
  "max_tokens": 1024
}