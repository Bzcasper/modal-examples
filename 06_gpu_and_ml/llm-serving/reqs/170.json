{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -126,7 +126,7 @@\n         id=\"header\"\n         className={clsx(\n           \"h-full overflow-hidden\",\n-          \"sticky flex items-center gap-1.5\",\n+          \"sticky top-0 flex items-center gap-1.5\",\n           \"select-none text-[0.8125rem]\",\n         )}\n       >\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -126,7 +126,7 @@\n         id=\"header\"\n         className={clsx(\n           \"h-full overflow-hidden\",\n-          \"sticky top-0 flex items-center gap-1.5\",\n+          \" top-0 flex items-center gap-1.5\",\n           \"select-none text-[0.8125rem]\",\n         )}\n       >\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -119,6 +119,7 @@\n         zIndex: 50,\n       }}\n       className={clsx(\n+        \"sticky\",\n         index !== 0 && \"border-t border-dashed border-border-variant\",\n       )}\n     >\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -127,7 +127,7 @@\n         id=\"header\"\n         className={clsx(\n           \"h-full overflow-hidden\",\n-          \" top-0 flex items-center gap-1.5\",\n+          \" flex items-center gap-1.5\",\n           \"select-none text-[0.8125rem]\",\n         )}\n       >\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -119,7 +119,7 @@\n         zIndex: 50,\n       }}\n       className={clsx(\n-        \"sticky\",\n+        \"sticky top-0 \",\n         index !== 0 && \"border-t border-dashed border-border-variant\",\n       )}\n     >\n\n```\n\nUser edited \"src/data/buffer-contents.ts\":\n```diff\n@@ -310,4 +310,5 @@\n       ],\n     },\n   ],\n+  \n };\n\n```\n\nUser edited \"src/data/buffer-contents.ts\":\n```diff\n@@ -310,5 +310,96 @@\n       ],\n     },\n   ],\n-  \n+  {\n+    id: \"8\",\n+    fileName: \"debugger.rs\",\n+    filePath: \"crates/debugger/src/\",\n+    language: \"rust\",\n+    contents: [\n+      {\n+        startingLineNumber: 312,\n+        initialRange: [0, 5],\n+        breadcrumbs: [\n+          {\n+            content: \"impl Debugger {\",\n+            lineNumber: 300,\n+          },\n+        ],\n+        content: `    pub fn set_breakpoint(&mut self, file: &str, line: usize) -> Result<()> {\n+          let breakpoint = Breakpoint::new(file.to_string(), line);\n+          self.breakpoints.push(breakpoint);\n+          self.update_breakpoints()\n+      }`,\n+        diagnostics: [\n+          createDiagnostic(\"cannot find type `Breakpoint` in this scope\", 313, [12, 22], {\n+            severity: \"error\",\n+            errorCode: \"E0412\",\n+          }),\n+        ],\n+      },\n+    ],\n+  },\n+  {\n+    id: \"9\",\n+    fileName: \"terminal.rs\",\n+    filePath: \"crates/terminal/src/\",\n+    language: \"rust\",\n+    contents: [\n+      {\n+        startingLineNumber: 178,\n+        initialRange: [0, 5],\n+        breadcrumbs: [\n+          {\n+            content: \"impl Terminal {\",\n+            lineNumber: 150,\n+          },\n+        ],\n+        content: `    fn process_output(&mut self, output: &str) {\n+          for line in output.lines() {\n+              self.buffer.push(line.to_string());\n+              if self.buffer.len() > self.max_lines {\n+                  self.buffer.remove(0);\n+              }\n+          }\n+      }`,\n+        diagnostics: [\n+          createDiagnostic(\"no field `buffer` on type `Terminal`\", 179, [8, 14], {\n+            severity: \"error\",\n+            errorCode: \"E0609\",\n+          }),\n+        ],\n+      },\n+    ],\n+  },\n+  {\n+    id: \"10\",\n+    fileName: \"git.rs\",\n+    filePath: \"crates/git/src/\",\n+    language: \"rust\",\n+    contents: [\n+      {\n+        startingLineNumber: 423,\n+        initialRange: [0, 5],\n+        breadcrumbs: [\n+          {\n+            content: \"impl GitRepository {\",\n+            lineNumber: 400,\n+          },\n+        ],\n+        content: `    pub fn commit(&mut self, message: &str) -> Result<(), GitError> {\n+          let signature = self.signature()?;\n+          let tree_id = self.index.write_tree()?;\n+          let tree = self.repo.find_tree(tree_id)?;\n+          let parents = self.get_parents()?;\n+          self.repo.commit(Some(\"HEAD\"), &signature, &signature, message, &tree, &parents)\n+      }`,\n+        diagnostics: [\n+          createDiagnostic(\"no method named `signature` found for struct `GitRepository` in the current scope\", 424, [26, 35], {\n+            severity: \"error\",\n+            errorCode: \"E0599\",\n+          }),\n+        ],\n+      },\n+    ],\n+  }\n };\n\n```\n\nUser edited \"src/data/buffer-contents.ts\":\n```diff\n@@ -310,96 +310,5 @@\n       ],\n     },\n   ],\n-  {\n-    id: \"8\",\n-    fileName: \"debugger.rs\",\n-    filePath: \"crates/debugger/src/\",\n-    language: \"rust\",\n-    contents: [\n-      {\n-        startingLineNumber: 312,\n-        initialRange: [0, 5],\n-        breadcrumbs: [\n-          {\n-            content: \"impl Debugger {\",\n-            lineNumber: 300,\n-          },\n-        ],\n-        content: `    pub fn set_breakpoint(&mut self, file: &str, line: usize) -> Result<()> {\n-          let breakpoint = Breakpoint::new(file.to_string(), line);\n-          self.breakpoints.push(breakpoint);\n-          self.update_breakpoints()\n-      }`,\n-        diagnostics: [\n-          createDiagnostic(\"cannot find type `Breakpoint` in this scope\", 313, [12, 22], {\n-            severity: \"error\",\n-            errorCode: \"E0412\",\n-          }),\n-        ],\n-      },\n-    ],\n-  },\n-  {\n-    id: \"9\",\n-    fileName: \"terminal.rs\",\n-    filePath: \"crates/terminal/src/\",\n-    language: \"rust\",\n-    contents: [\n-      {\n-        startingLineNumber: 178,\n-        initialRange: [0, 5],\n-        breadcrumbs: [\n-          {\n-            content: \"impl Terminal {\",\n-            lineNumber: 150,\n-          },\n-        ],\n-        content: `    fn process_output(&mut self, output: &str) {\n-          for line in output.lines() {\n-              self.buffer.push(line.to_string());\n-              if self.buffer.len() > self.max_lines {\n-                  self.buffer.remove(0);\n-              }\n-          }\n-      }`,\n-        diagnostics: [\n-          createDiagnostic(\"no field `buffer` on type `Terminal`\", 179, [8, 14], {\n-            severity: \"error\",\n-            errorCode: \"E0609\",\n-          }),\n-        ],\n-      },\n-    ],\n-  },\n-  {\n-    id: \"10\",\n-    fileName: \"git.rs\",\n-    filePath: \"crates/git/src/\",\n-    language: \"rust\",\n-    contents: [\n-      {\n-        startingLineNumber: 423,\n-        initialRange: [0, 5],\n-        breadcrumbs: [\n-          {\n-            content: \"impl GitRepository {\",\n-            lineNumber: 400,\n-          },\n-        ],\n-        content: `    pub fn commit(&mut self, message: &str) -> Result<(), GitError> {\n-          let signature = self.signature()?;\n-          let tree_id = self.index.write_tree()?;\n-          let tree = self.repo.find_tree(tree_id)?;\n-          let parents = self.get_parents()?;\n-          self.repo.commit(Some(\"HEAD\"), &signature, &signature, message, &tree, &parents)\n-      }`,\n-        diagnostics: [\n-          createDiagnostic(\"no method named `signature` found for struct `GitRepository` in the current scope\", 424, [26, 35], {\n-            severity: \"error\",\n-            errorCode: \"E0599\",\n-          }),\n-        ],\n-      },\n-    ],\n-  }\n+  \n };\n\n```\n\nUser edited \"src/data/buffer-contents.ts\":\n```diff\n@@ -309,6 +309,112 @@\n         },\n       ],\n     },\n+    {\n+      id: \"8\",\n+      fileName: \"debugger.rs\",\n+      filePath: \"crates/debugger/src/\",\n+      language: \"rust\",\n+      contents: [\n+        {\n+          startingLineNumber: 312,\n+          initialRange: [0, 5],\n+          breadcrumbs: [\n+            {\n+              content: \"impl Debugger {\",\n+              lineNumber: 300,\n+            },\n+          ],\n+          content: `    pub fn set_breakpoint(&mut self, file: &str, line: usize) -> Result<()> {\n+            let breakpoint = Breakpoint::new(file.to_string(), line);\n+            self.breakpoints.push(breakpoint);\n+            self.update_breakpoints()\n+        }`,\n+          diagnostics: [\n+            createDiagnostic(\n+              \"cannot find type `Breakpoint` in this scope\",\n+              313,\n+              [12, 22],\n+              {\n+                severity: \"error\",\n+                errorCode: \"E0412\",\n+              },\n+            ),\n+          ],\n+        },\n+      ],\n+    },\n+    {\n+      id: \"9\",\n+      fileName: \"terminal.rs\",\n+      filePath: \"crates/terminal/src/\",\n+      language: \"rust\",\n+      contents: [\n+        {\n+          startingLineNumber: 178,\n+          initialRange: [0, 5],\n+          breadcrumbs: [\n+            {\n+              content: \"impl Terminal {\",\n+              lineNumber: 150,\n+            },\n+          ],\n+          content: `    fn process_output(&mut self, output: &str) {\n+            for line in output.lines() {\n+                self.buffer.push(line.to_string());\n+                if self.buffer.len() > self.max_lines {\n+                    self.buffer.remove(0);\n+                }\n+            }\n+        }`,\n+          diagnostics: [\n+            createDiagnostic(\n+              \"no field `buffer` on type `Terminal`\",\n+              179,\n+              [8, 14],\n+              {\n+                severity: \"error\",\n+                errorCode: \"E0609\",\n+              },\n+            ),\n+          ],\n+        },\n+      ],\n+    },\n+    {\n+      id: \"10\",\n+      fileName: \"git.rs\",\n+      filePath: \"crates/git/src/\",\n+      language: \"rust\",\n+      contents: [\n+        {\n+          startingLineNumber: 423,\n+          initialRange: [0, 5],\n+          breadcrumbs: [\n+            {\n+              content: \"impl GitRepository {\",\n+              lineNumber: 400,\n+            },\n+          ],\n+          content: `    pub fn commit(&mut self, message: &str) -> Result<(), GitError> {\n+            let signature = self.signature()?;\n+            let tree_id = self.index.write_tree()?;\n+            let tree = self.repo.find_tree(tree_id)?;\n+            let parents = self.get_parents()?;\n+            self.repo.commit(Some(\"HEAD\"), &signature, &signature, message, &tree, &parents)\n+        }`,\n+          diagnostics: [\n+            createDiagnostic(\n+              \"no method named `signature` found for struct `GitRepository` in the current scope\",\n+              424,\n+              [26, 35],\n+              {\n+                severity: \"error\",\n+                errorCode: \"E0599\",\n+              },\n+            ),\n+          ],\n+        },\n+      ],\n+    },\n   ],\n-  \n };\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -121,6 +121,7 @@\n       className={clsx(\n         \"sticky top-0 \",\n         index !== 0 && \"border-t border-dashed border-border-variant\",\n+        \n       )}\n     >\n       <div\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -121,7 +121,7 @@\n       className={clsx(\n         \"sticky top-0 \",\n         index !== 0 && \"border-t border-dashed border-border-variant\",\n-        \n+        \"bg-gradient-to-b from-editor-background via-editor-background to-transparent h-[100px] w-full\",\n       )}\n     >\n       <div\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -121,7 +121,7 @@\n       className={clsx(\n         \"sticky top-0 \",\n         index !== 0 && \"border-t border-dashed border-border-variant\",\n-        \"bg-gradient-to-b from-editor-background via-editor-background to-transparent h-[100px] w-full\",\n+        \"bg-gradient-to-b from-editor- via-editor-background to-transparent h-[100px] w-full\",\n       )}\n     >\n       <div\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -121,7 +121,7 @@\n       className={clsx(\n         \"sticky top-0 \",\n         index !== 0 && \"border-t border-dashed border-border-variant\",\n-        \"bg-gradient-to-b from-editor- via-editor-background to-transparent h-[100px] w-full\",\n+        \"bg-gradient-to-b from-editor-foreground via-editor-background to-transparent h-[100px] w-full\",\n       )}\n     >\n       <div\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -121,7 +121,7 @@\n       className={clsx(\n         \"sticky top-0 \",\n         index !== 0 && \"border-t border-dashed border-border-variant\",\n-        \"bg-gradient-to-b from-editor-foreground via-editor-background to-transparent h-[100px] w-full\",\n+        \"bg-gradient-to-b from-editor-foreground/10 via-editor-background to-transparent h-[100px] w-full\",\n       )}\n     >\n       <div\n\n```\n\nUser edited \"src/ui/multi-buffer-alt.tsx\":\n```diff\n@@ -121,7 +121,7 @@\n       className={clsx(\n         \"sticky top-0 \",\n         index !== 0 && \"border-t border-dashed border-border-variant\",\n-        \"bg-gradient-to-b from-editor-foreground/10 via-editor-background to-transparent h-[100px] w-full\",\n+        \"bg-gradient-to-b from-editor-foreground/10 via-editor-background to-transparent h-[100p] w-full\",\n       )}\n     >\n       <div\n\n```\n\n### Input:\n```src/ui/multi-buffer-alt.tsx\n  showDiff: boolean;\n<|editable_region_start|>\n  variant: BufferHeaderVariant;\n  editorLineHeight: number;\n  index: number;\n}\n\nfunction BufferHeader({\n  buffer,\n  isOpen,\n  onToggle,\n  onShowInput,\n  onShowDiff,\n  showInput,\n  showDiff,\n  variant = \"one_line_high\",\n  editorLineHeight,\n  index,\n}: BufferHeaderProps) {\n  const height = height_for_variant(variant, editorLineHeight);\n  const margin = variant === \"two_line_high\" ? 4 : 0;\n\n  return (\n    <div\n      style={{\n        height,\n        paddingTop: margin,\n        paddingBottom: margin,\n        overflow: \"hidden\",\n        zIndex: 50,\n      }}\n      className={clsx(\n        \"sticky top-0 \",\n        index !== 0 && \"border-t border-dashed border-border-variant\",\n        \"bg-gradient-to-b from-editor-foreground/10 via-editor-background to-transparent h-[100p<|user_cursor_is_here|>] w-full\",\n      )}\n    >\n      <div\n        id=\"header\"\n        className={clsx(\n          \"h-full overflow-hidden\",\n          \" flex items-center gap-1.5\",\n          \"select-none text-[0.8125rem]\",\n        )}\n      >\n        <TooltipButton\n          divTrigger\n          label=\"Toggle Excerpt Fold\"\n          customWidth={false}\n          onClick={onToggle}\n          icon={\n            <ChevronRight\n              className={clsx(\n                \"text-icon-muted size-3.5\",\n                isOpen ? \"rotate-90\" : \"\",\n              )}\n            />\n          }\n        />\n        <div\n          className={clsx(\n            \"flex gap-1\",\n            \"rounded-md\",\n            \"px-2.5 py-1 flex items-center gap-1.5\",\n            \"border border-white/5 shadow-lg\",\n            \"hover:cursor-pointer hover:border-white/10\",\n            \"bg-[#2F343D]\",\n<|editable_region_end|>\n          )}\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```src/ui/multi-buffer-alt.tsx\n  showDiff: boolean;\n<|editable_region_start|>\n  variant: BufferHeaderVariant;\n  editorLineHeight: number;\n  index: number;\n}\n\nfunction BufferHeader({\n  buffer,\n  isOpen,\n  onToggle,\n  onShowInput,\n  onShowDiff,\n  showInput,\n  showDiff,\n  variant = \"one_line_high\",\n  editorLineHeight,\n  index,\n}: BufferHeaderProps) {\n  const height = height_for_variant(variant, editorLineHeight);\n  const margin = variant === \"two_line_high\" ? 4 : 0;\n\n  return (\n    <div\n      style={{\n        height,\n        paddingTop: margin,\n        paddingBottom: margin,\n        overflow: \"hidden\",\n        zIndex: 50,\n      }}\n      className={clsx(\n        \"sticky top-0 \",\n        index !== 0 && \"border-t border-dashed border-border-variant\",\n        \"bg-gradient-to-b from-editor-foreground/10 via-editor-background to-transparent h-[100p<|user_cursor_is_here|>] w-full\",\n      )}\n    >\n      <div\n        id=\"header\"\n        className={clsx(\n          \"h-full overflow-hidden\",\n          \" flex items-center gap-1.5\",\n          \"select-none text-[0.8125rem]\",\n        )}\n      >\n        <TooltipButton\n          divTrigger\n          label=\"Toggle Excerpt Fold\"\n          customWidth={false}\n          onClick={onToggle}\n          icon={\n            <ChevronRight\n              className={clsx(\n                \"text-icon-muted size-3.5\",\n                isOpen ? \"rotate-90\" : \"\",\n              )}\n            />\n          }\n        />\n        <div\n          className={clsx(\n            \"flex gap-1\",\n            \"rounded-md\",\n            \"px-2.5 py-1 flex items-center gap-1.5\",\n            \"border border-white/5 shadow-lg\",\n            \"hover:cursor-pointer hover:border-white/10\",\n            \"bg-[#2F343D]\",\n<|editable_region_end|>\n          )}\n```"
  },
  "max_tokens": 1024
}