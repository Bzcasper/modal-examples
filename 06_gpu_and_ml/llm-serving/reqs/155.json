{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/inline_completion/src/inline_completion.rs\":\n```diff\n@@ -19,7 +19,7 @@\n }\n \n enum DataCollectionState {\n-    ///  \n+    /// The provider d \n     NotApplicable,\n     /// If there's a file not saved yet, thus we can't tell to which project it belongs.\n     Unknown,\n\n```\n\nUser edited \"crates/inline_completion/src/inline_completion.rs\":\n```diff\n@@ -20,7 +20,7 @@\n \n enum DataCollectionState {\n     /// The provider d \n-    NotApplicable,\n+    Unsupported,\n     /// If there's a file not saved yet, thus we can't tell to which project it belongs.\n     Unknown,\n     Enabled,\n\n```\n\nUser edited \"crates/inline_completion/src/inline_completion.rs\":\n```diff\n@@ -19,7 +19,7 @@\n }\n \n enum DataCollectionState {\n-    /// The provider d \n+    /// The provider d\n     Unsupported,\n     /// If there's a file not saved yet, thus we can't tell to which project it belongs.\n     Unknown,\n\n```\n\nUser edited \"crates/inline_completion/src/inline_completion.rs\":\n```diff\n@@ -19,10 +19,11 @@\n }\n \n enum DataCollectionState {\n-    /// The provider d\n+    /// The provider doesn't support data collection\n     Unsupported,\n     /// If there's a file not saved yet, thus we can't tell to which project it belongs.\n     Unknown,\n+    // \n     Enabled,\n     Disabled,\n }\n\n```\n\nUser edited \"crates/inline_completion/src/inline_completion.rs\":\n```diff\n@@ -19,12 +19,13 @@\n }\n \n enum DataCollectionState {\n-    /// The provider doesn't support data collection\n+    /// The provider doesn't support data collection.\n     Unsupported,\n     /// If there's a file not saved yet, thus we can't tell to which project it belongs.\n     Unknown,\n-    // \n+    /// Data collection is enabled\n     Enabled,\n+    /// Data collection is disabled.\n     Disabled,\n }\n \n\n```\n\nUser edited \"crates/inline_completion/src/inline_completion.rs\":\n```diff\n@@ -40,9 +40,6 @@\n     fn show_data_collection_toggle() -> bool {\n         false\n     }\n-    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n-        false\n-    }\n     fn toggle_data_collection(&mut self, _cx: &mut App) {}\n     fn is_enabled(\n         &self,\n\n```\n\nUser edited \"crates/inline_completion/src/inline_completion.rs\":\n```diff\n@@ -37,7 +37,7 @@\n     fn show_tab_accept_marker() -> bool {\n         false\n     }\n-    fn show_data_collection_toggle() -> bool {\n+    fn show_data_collection_toggle(&self) -> bool {\n         false\n     }\n     fn toggle_data_collection(&mut self, _cx: &mut App) {}\n\n```\n\nUser edited \"crates/inline_completion/src/inline_completion.rs\":\n```diff\n@@ -37,7 +37,7 @@\n     fn show_tab_accept_marker() -> bool {\n         false\n     }\n-    fn show_data_collection_toggle(&self) -> bool {\n+    fn da(&self) -> bool {\n         false\n     }\n     fn toggle_data_collection(&mut self, _cx: &mut App) {}\n\n```\n\n### Input:\n```crates/inline_completion/src/inline_completion.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse gpui::{App, Context, Entity};\nuse language::{Buffer, BufferSnapshot};\nuse std::ops::Range;\n\n// TODO: Find a better home for `Direction`.\n//\n// This should live in an ancestor crate of `editor` and `inline_completion`,\n// but at time of writing there isn't an obvious spot.\n#[derive(Copy, Clone, PartialEq, Eq)]\npub enum Direction {\n    Prev,\n    Next,\n}\n\n#[derive(Clone)]\npub struct InlineCompletion {\n    pub edits: Vec<(Range<language::Anchor>, String)>,\n    pub edit_preview: Option<language::EditPreview>,\n}\n\nenum DataCollectionState {\n    /// The provider doesn't support data collection.\n    Unsupported,\n    /// If there's a file not saved yet, thus we can't tell to which project it belongs.\n    Unknown,\n    /// Data collection is enabled\n    Enabled,\n    /// Data collection is disabled.\n    Disabled,\n}\n\npub trait InlineCompletionProvider: 'static + Sized {\n    fn name() -> &'static str;\n    fn display_name() -> &'static str;\n    fn show_completions_in_menu() -> bool;\n    fn show_completions_in_normal_mode() -> bool;\n    fn show_tab_accept_marker() -> bool {\n        false\n    }\n    fn da<|user_cursor_is_here|>(&self) -> bool {\n        false\n    }\n    fn toggle_data_collection(&mut self, _cx: &mut App) {}\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool;\n    fn is_refreshing(&self) -> bool;\n    fn refresh(\n        &mut self,\n        buffer: Entity<Buffer>,\n        cursor_position: language::Anchor,\n        debounce: bool,\n        cx: &mut Context<Self>,\n    );\n    fn needs_terms_acceptance(&self, _cx: &App) -> bool {\n        false\n    }\n    fn cycle(\n        &mut self,\n        buffer: Entity<Buffer>,\n        cursor_position: language::Anchor,\n        direction: Direction,\n        cx: &mut Context<Self>,\n    );\n    fn accept(&mut self, snapshot: &BufferSnapshot, cx: &mut Context<Self>);\n    fn discard(&mut self, cx: &mut Context<Self>);\n    fn suggest(\n        &mut self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &mut Context<Self>,\n    ) -> Option<InlineCompletion>;\n}\n\npub trait InlineCompletionProviderHandle {\n    fn name(&self) -> &'static str;\n    fn display_name(&self) -> &'static str;\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool;\n    fn show_completions_in_menu(&self) -> bool;\n    fn show_completions_in_normal_mode(&self) -> bool;\n    fn show_tab_accept_marker(&self) -> bool;\n    fn show_data_collection_toggle(&self) -> bool;\n    fn is_data_collection_enabled(&self, cx: &App) -> bool;\n    fn toggle_data_collection(&mut self, cx: &mut App);\n    fn needs_terms_acceptance(&self, cx: &App) -> bool;\n    fn is_refreshing(&self, cx: &App) -> bool;\n    fn refresh(\n        &self,\n        buffer: Entity<Buffer>,\n        cursor_position: language::Anchor,\n        debounce: bool,\n        cx: &mut App,\n    );\n    fn cycle(\n        &self,\n        buffer: Entity<Buffer>,\n        cursor_position: language::Anchor,\n        direction: Direction,\n        cx: &mut App,\n    );\n    fn accept(&self, snapshot: &BufferSnapshot, cx: &mut App);\n    fn discard(&self, cx: &mut App);\n    fn suggest(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &mut App,\n    ) -> Option<InlineCompletion>;\n}\n\nimpl<T> InlineCompletionProviderHandle for Entity<T>\nwhere\n    T: InlineCompletionProvider,\n{\n    fn name(&self) -> &'static str {\n        T::name()\n    }\n\n    fn display_name(&self) -> &'static str {\n        T::display_name()\n    }\n\n    fn show_completions_in_menu(&self) -> bool {\n        T::show_completions_in_menu()\n    }\n\n    fn show_completions_in_normal_mode(&self) -> bool {\n        T::show_completions_in_normal_mode()\n    }\n\n    fn show_tab_accept_marker(&self) -> bool {\n        T::show_tab_accept_marker()\n    }\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/inline_completion/src/inline_completion.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse gpui::{App, Context, Entity};\nuse language::{Buffer, BufferSnapshot};\nuse std::ops::Range;\n\n// TODO: Find a better home for `Direction`.\n//\n// This should live in an ancestor crate of `editor` and `inline_completion`,\n// but at time of writing there isn't an obvious spot.\n#[derive(Copy, Clone, PartialEq, Eq)]\npub enum Direction {\n    Prev,\n    Next,\n}\n\n#[derive(Clone)]\npub struct InlineCompletion {\n    pub edits: Vec<(Range<language::Anchor>, String)>,\n    pub edit_preview: Option<language::EditPreview>,\n}\n\nenum DataCollectionState {\n    /// The provider doesn't support data collection.\n    Unsupported,\n    /// If there's a file not saved yet, thus we can't tell to which project it belongs.\n    Unknown,\n    /// Data collection is enabled\n    Enabled,\n    /// Data collection is disabled.\n    Disabled,\n}\n\npub trait InlineCompletionProvider: 'static + Sized {\n    fn name() -> &'static str;\n    fn display_name() -> &'static str;\n    fn show_completions_in_menu() -> bool;\n    fn show_completions_in_normal_mode() -> bool;\n    fn show_tab_accept_marker() -> bool {\n        false\n    }\n    fn da<|user_cursor_is_here|>(&self) -> bool {\n        false\n    }\n    fn toggle_data_collection(&mut self, _cx: &mut App) {}\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool;\n    fn is_refreshing(&self) -> bool;\n    fn refresh(\n        &mut self,\n        buffer: Entity<Buffer>,\n        cursor_position: language::Anchor,\n        debounce: bool,\n        cx: &mut Context<Self>,\n    );\n    fn needs_terms_acceptance(&self, _cx: &App) -> bool {\n        false\n    }\n    fn cycle(\n        &mut self,\n        buffer: Entity<Buffer>,\n        cursor_position: language::Anchor,\n        direction: Direction,\n        cx: &mut Context<Self>,\n    );\n    fn accept(&mut self, snapshot: &BufferSnapshot, cx: &mut Context<Self>);\n    fn discard(&mut self, cx: &mut Context<Self>);\n    fn suggest(\n        &mut self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &mut Context<Self>,\n    ) -> Option<InlineCompletion>;\n}\n\npub trait InlineCompletionProviderHandle {\n    fn name(&self) -> &'static str;\n    fn display_name(&self) -> &'static str;\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool;\n    fn show_completions_in_menu(&self) -> bool;\n    fn show_completions_in_normal_mode(&self) -> bool;\n    fn show_tab_accept_marker(&self) -> bool;\n    fn show_data_collection_toggle(&self) -> bool;\n    fn is_data_collection_enabled(&self, cx: &App) -> bool;\n    fn toggle_data_collection(&mut self, cx: &mut App);\n    fn needs_terms_acceptance(&self, cx: &App) -> bool;\n    fn is_refreshing(&self, cx: &App) -> bool;\n    fn refresh(\n        &self,\n        buffer: Entity<Buffer>,\n        cursor_position: language::Anchor,\n        debounce: bool,\n        cx: &mut App,\n    );\n    fn cycle(\n        &self,\n        buffer: Entity<Buffer>,\n        cursor_position: language::Anchor,\n        direction: Direction,\n        cx: &mut App,\n    );\n    fn accept(&self, snapshot: &BufferSnapshot, cx: &mut App);\n    fn discard(&self, cx: &mut App);\n    fn suggest(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &mut App,\n    ) -> Option<InlineCompletion>;\n}\n\nimpl<T> InlineCompletionProviderHandle for Entity<T>\nwhere\n    T: InlineCompletionProvider,\n{\n    fn name(&self) -> &'static str {\n        T::name()\n    }\n\n    fn display_name(&self) -> &'static str {\n        T::display_name()\n    }\n\n    fn show_completions_in_menu(&self) -> bool {\n        T::show_completions_in_menu()\n    }\n\n    fn show_completions_in_normal_mode(&self) -> bool {\n        T::show_completions_in_normal_mode()\n    }\n\n    fn show_tab_accept_marker(&self) -> bool {\n        T::show_tab_accept_marker()\n    }\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}