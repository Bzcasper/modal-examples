{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -40,7 +40,7 @@\n             })\n             .detach();\n             \n-            window.\n+            window.root\n             \n             editors\n                 .borrow_mut()\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -40,7 +40,7 @@\n             })\n             .detach();\n             \n-            window.root\n+            window.root().vi\n             \n             editors\n                 .borrow_mut()\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -40,7 +40,7 @@\n             })\n             .detach();\n             \n-            window.root().vi\n+            window.root::<Workspace>().\n             \n             editors\n                 .borrow_mut()\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -40,7 +40,7 @@\n             })\n             .detach();\n             \n-            window.root::<Workspace>().\n+            window.root::<Workspace>().flatten();\n             \n             editors\n                 .borrow_mut()\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -39,9 +39,9 @@\n                 }\n             })\n             .detach();\n-            \n-            window.root::<Workspace>().flatten();\n-            \n+\n+            dbg!(window.root::<Workspace>().flatten());\n+\n             editors\n                 .borrow_mut()\n                 .insert(editor_handle, window.window_handle());\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -40,8 +40,6 @@\n             })\n             .detach();\n \n-            dbg!(window.root::<Workspace>().flatten());\n-\n             editors\n                 .borrow_mut()\n                 .insert(editor_handle, window.window_handle());\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -286,6 +286,9 @@\n                         )\n                     });\n                     editor.set_inline_completion_provider(Some(provider), window, cx);\n+                } else {\n+                    dbg!(window.root::<Workspace>().flatten());\n+                    \n                 }\n             }\n         }\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -288,7 +288,6 @@\n                     editor.set_inline_completion_provider(Some(provider), window, cx);\n                 } else {\n                     dbg!(window.root::<Workspace>().flatten());\n-                    \n                 }\n             }\n         }\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -11,6 +11,7 @@\n use settings::SettingsStore;\n use supermaven::{Supermaven, SupermavenCompletionProvider};\n use ui::Window;\n+use workspace::Workspace;\n use zed_predict_onboarding::ZedPredictModal;\n \n pub fn init(client: Arc<Client>, user_store: Entity<UserStore>, fs: Arc<dyn Fs>, cx: &mut App) {\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -288,7 +288,7 @@\n                     });\n                     editor.set_inline_completion_provider(Some(provider), window, cx);\n                 } else {\n-                    dbg!(window.root::<Workspace>().flatten());\n+                    dbg!();\n                 }\n             }\n         }\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -263,7 +263,7 @@\n                     }\n                 }\n \n-                if let Some(workspace) = editor.workspace() {\n+                if let Some(workspace) = window.root::<Workspace>().flatten() {\n                     let project_abs_path = singleton_buffer.and_then(|buffer| {\n                         buffer.update(cx, |buffer, cx| {\n                             buffer.file().and_then(|file| {\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -287,8 +287,6 @@\n                         )\n                     });\n                     editor.set_inline_completion_provider(Some(provider), window, cx);\n-                } else {\n-                    dbg!();\n                 }\n             }\n         }\n\n```\n\n### Input:\n```crates/zeta/src/persistence.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse anyhow::Result;\nuse collections::HashMap;\nuse std::path::{Path, PathBuf};\nuse workspace::WorkspaceDb;\n\nuse db::sqlez_macros::sql;\nuse db::{define_connection, query};\n\ndefine_connection!(\n    pub static ref DB: ZetaDb<WorkspaceDb> = &[\n        sql! (\n            CREATE TABLE zeta_preferences(\n                project_path BLOB NOT NULL PRIMARY KEY,\n                accepted_data_collection INTEGER\n            ) STRICT;\n        ),\n    ];\n);\n\nimpl ZetaDb {\n    pub fn get_all_zeta_preferences(&self) -> Result<HashMap<PathBuf, bool>> {\n        Ok(self.get_all_zeta_preferences_query()?.into_iter().collect())\n    }\n\n    query! {\n        fn get_all_zeta_preferences_query() -> Result<Vec<(PathBuf, bool)>> {\n            SELECT project_path, accepted_data_collection FROM zeta_preferences\n        }\n    }\n\n    query! {\n        pub fn get_accepted_data_collection(project_path: &Path) -> Result<Option<bool>> {\n            SELECT accepted_data_collection FROM zeta_preferences\n            WHERE project_path = ?\n        }\n    }\n\n    query! {\n        pub async fn <|user_cursor_is_here|>save_accepted_data_collection(project_path: PathBuf, accepted_data_collection: bool) -> Result<()> {\n            INSERT INTO zeta_preferences\n                (project_path, accepted_data_collection)\n            VALUES\n                (?1, ?2)\n            ON CONFLICT (project_path) DO UPDATE SET\n                accepted_data_collection = ?2\n        }\n    }\n\n    query! {\n        pub async fn clear_all_zeta_preferences() -> Result<()> {\n            DELETE FROM zeta_preferences\n        }\n    }\n}\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/zeta/src/persistence.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse anyhow::Result;\nuse collections::HashMap;\nuse std::path::{Path, PathBuf};\nuse workspace::WorkspaceDb;\n\nuse db::sqlez_macros::sql;\nuse db::{define_connection, query};\n\ndefine_connection!(\n    pub static ref DB: ZetaDb<WorkspaceDb> = &[\n        sql! (\n            CREATE TABLE zeta_preferences(\n                project_path BLOB NOT NULL PRIMARY KEY,\n                accepted_data_collection INTEGER\n            ) STRICT;\n        ),\n    ];\n);\n\nimpl ZetaDb {\n    pub fn get_all_zeta_preferences(&self) -> Result<HashMap<PathBuf, bool>> {\n        Ok(self.get_all_zeta_preferences_query()?.into_iter().collect())\n    }\n\n    query! {\n        fn get_all_zeta_preferences_query() -> Result<Vec<(PathBuf, bool)>> {\n            SELECT project_path, accepted_data_collection FROM zeta_preferences\n        }\n    }\n\n    query! {\n        pub fn get_accepted_data_collection(project_path: &Path) -> Result<Option<bool>> {\n            SELECT accepted_data_collection FROM zeta_preferences\n            WHERE project_path = ?\n        }\n    }\n\n    query! {\n        pub async fn <|user_cursor_is_here|>save_accepted_data_collection(project_path: PathBuf, accepted_data_collection: bool) -> Result<()> {\n            INSERT INTO zeta_preferences\n                (project_path, accepted_data_collection)\n            VALUES\n                (?1, ?2)\n            ON CONFLICT (project_path) DO UPDATE SET\n                accepted_data_collection = ?2\n        }\n    }\n\n    query! {\n        pub async fn clear_all_zeta_preferences() -> Result<()> {\n            DELETE FROM zeta_preferences\n        }\n    }\n}\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}