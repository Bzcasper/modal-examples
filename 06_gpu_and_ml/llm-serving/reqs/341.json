{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\n\n\n### Input:\n```src/pages/[company].tsx\n<|start_of_file|>\n<|editable_region_start|>\n<|user_cursor_is_here|>import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\nimport Image from \"next/image\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { Dialog as BaseDialog } from \"@base-ui-components/react/dialog\";\nimport {\n  DialogBackdrop,\n  DialogWrap,\n  DialogDescription,\n} from \"@/components/primitives/Dialog\";\nimport { Job } from \"@/types/job\";\nimport { Button } from \"@/components/primitives/Button\";\nimport { Navbar } from \"@/components/primitives/Navbar\";\nimport { Link } from \"@/components/primitives/Link\";\nimport { ContainerTransition } from \"@/components/primitives/Container\";\nimport { SectionDivider } from \"@/components/primitives/Divider\";\nimport { formatDate } from \"@/utils/date\";\nimport ReactMarkdown, { Components } from \"react-markdown\";\nimport rehypeRaw from \"rehype-raw\";\nimport DOMPurify from \"isomorphic-dompurify\";\nimport * as cheerio from \"cheerio\";\nimport { MapPin, Clock, Calendar, Copy, Check } from \"lucide-react\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n);\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  try {\n    const { company } = context.params as { company: string };\n\n    if (!company) {\n      return { notFound: true };\n    }\n\n    const { data, error } = await supabase\n      .from(\"job-postings\")\n      .select(\"*\")\n      .eq(\"company_slug\", company)\n      .order(\"created_at\", { ascending: false })\n      .limit(1);\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return { notFound: true };\n    }\n\n    if (!data || data.length === 0) {\n      return { notFound: true };\n    }\n\n    return {\n      props: {\n        job: data[0],\n      },\n      revalidate: 60, // Revalidate every 60 seconds\n    };\n  } catch (error) {\n    console.error(\"Error in getStaticProps:\", error);\n    return { notFound: true };\n  }\n};\n\n<|editable_region_end|>\nexport const getStaticPaths: GetStaticPaths = async () => {\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```src/pages/[company].tsx\n<|start_of_file|>\n<|editable_region_start|>\n<|user_cursor_is_here|>import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\nimport Image from \"next/image\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { Dialog as BaseDialog } from \"@base-ui-components/react/dialog\";\nimport {\n  DialogBackdrop,\n  DialogWrap,\n  DialogDescription,\n} from \"@/components/primitives/Dialog\";\nimport { Job } from \"@/types/job\";\nimport { Button } from \"@/components/primitives/Button\";\nimport { Navbar } from \"@/components/primitives/Navbar\";\nimport { Link } from \"@/components/primitives/Link\";\nimport { ContainerTransition } from \"@/components/primitives/Container\";\nimport { SectionDivider } from \"@/components/primitives/Divider\";\nimport { formatDate } from \"@/utils/date\";\nimport ReactMarkdown, { Components } from \"react-markdown\";\nimport rehypeRaw from \"rehype-raw\";\nimport DOMPurify from \"isomorphic-dompurify\";\nimport * as cheerio from \"cheerio\";\nimport { MapPin, Clock, Calendar, Copy, Check } from \"lucide-react\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n);\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  try {\n    const { company } = context.params as { company: string };\n\n    if (!company) {\n      return { notFound: true };\n    }\n\n    const { data, error } = await supabase\n      .from(\"job-postings\")\n      .select(\"*\")\n      .eq(\"company_slug\", company)\n      .order(\"created_at\", { ascending: false })\n      .limit(1);\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return { notFound: true };\n    }\n\n    if (!data || data.length === 0) {\n      return { notFound: true };\n    }\n\n    return {\n      props: {\n        job: data[0],\n      },\n      revalidate: 60, // Revalidate every 60 seconds\n    };\n  } catch (error) {\n    console.error(\"Error in getStaticProps:\", error);\n    return { notFound: true };\n  }\n};\n\n<|editable_region_end|>\nexport const getStaticPaths: GetStaticPaths = async () => {\n```"
  },
  "max_tokens": 1024
}