{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1699,10 +1699,10 @@\n                                 move |_window, cx| {\n                                     data_collection.set_choice(DataCollectionChoice::Enabled, &zeta, cx);\n                                     // this.update(cx, |this, cx| {\n-                                        this.set_data_collection_choice(\n-                                            DataCollectionChoice::Enabled,\n-                                            cx,\n-                                        )\n+                                        // this.set_data_collection_choice(\n+                                        //     DataCollectionChoice::Enabled,\n+                                        //     cx,\n+                                        // )\n                                     // });\n                                 }\n                             })\n\n```\n\n\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1704,8 +1704,8 @@\n                                     );\n                                     // this.update(cx, |this, cx| {\n                                     // this.set_data_collection_choice(\n-                                           DataCollectionChoice::Enabled,\n-                                           cx,\n+                                           // DataCollectionChoice::Enabled,\n+                                           // cx,\n                                     // )\n                                     // });\n                                 }\n\n```\n\n\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1509,7 +1509,7 @@\n     }\n \n     fn data_collection_state(&self, _cx: &App) -> DataCollectionState {\n-        let Some(data_collection) = self.data_collection.as_ref() ell{\n+        let Some(data_collection) = self.data_collection.as_ref() else {\n             return DataCollectionState::Unknown;\n         };\n \n@@ -1705,7 +1705,7 @@\n                                     });\n                                 }\n                             })\n-                            .with_secondary_click_message(\"Turn Off\")\n+                     .with_secondary_click_message(\"Turn Off\")\n                             .on_secondary_click({\n                                 move |_window, cx| {\n                                     this.update(cx, |this, cx| {\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1485,6 +1485,8 @@\n             data_collection,\n         }\n     }\n+    \n+    \n }\n \n impl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1485,8 +1485,16 @@\n             data_collection,\n         }\n     }\n-    \n-    \n+\n+    fn set_data_collection_choice(&mut self, choice: DataCollectionChoice, cx: &mut App) {\n+        if let Some(data_collection) = self.data_collection.as_mut() {\n+            data_collection.set_choice(choice, &self.zeta, cx);\n+        }\n+    }\n+\n+    fn toggle_data_collection(&mut self, cx: &mut App) {\n+        self.set_data_collection_choice(self.data_collection_choice().toggle(), cx);\n+    }\n }\n \n impl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1492,9 +1492,6 @@\n         }\n     }\n \n-    fn toggle_data_collection(&mut self, cx: &mut App) {\n-        self.set_data_collection_choice(self.data_collection_choice().toggle(), cx);\n-    }\n }\n \n impl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n\n```\n\n### Input:\n```crates/zed/src/zed/inline_completion_registry.rs\n                    window,\n<|editable_region_start|>\n                    cx,\n                );\n            })\n        });\n    }\n}\n\nfn register_backward_compatible_actions(editor: &mut Editor, cx: &mut Context<Editor>) {\n    // We renamed some of these actions to not be copilot-specific, but that\n    // would have not been backwards-compatible. So here we are re-registering\n    // the actions with the old names to not break people's keymaps.\n    editor\n        .register_action(cx.listener(\n            |editor, _: &copilot::Suggest, window: &mut Window, cx: &mut Context<Editor>| {\n                editor.show_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor, _: &copilot::NextSuggestion, window: &mut Window, cx: &mut Context<Editor>| {\n                editor.next_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor,\n             _: &copilot::PreviousSuggestion,\n             window: &mut Window,\n             cx: &mut Context<Editor>| {\n                editor.previous_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor,\n             _: &editor::actions::AcceptPartialCopilotSuggestion,\n             window: &mut Window,\n             cx: &mut Context<Editor>| {\n                editor.accept_partial_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n}\n\nfn assign_inline_completion_provider(\n    editor: &mut Editor,\n    provider: InlineCompletionProvider,\n    client: &Arc<Client>,\n    user_store: Entity<UserStore>,\n    window: &mut Window,\n    cx: &mut Context<Editor>,\n) {\n    let singleton_buffer = editor.buffer().read(cx).as_singleton();\n\n    match provider {\n        InlineCompletionProvider::None => {}\n        InlineCompletionProvider::Copilot => {\n            if let Some(copilot) = Copilot::global(cx) {\n                if let Some(buffer) = singleton_buffer {\n                    if buffer.read(cx).file().is_some() {\n                        copilot.update(cx, |copilot, cx| {\n                            copilot.register_buffer(&buffer, cx);\n                        });\n                    }\n                }\n                let provider = cx.new(|_| CopilotCompletionProvider::new(copilot));\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n        InlineCompletionProvider::Supermaven => {\n            if let Some(supermaven) = Supermaven::global(cx) {\n                let provider = cx.new(|_| SupermavenCompletionProvider::new(supermaven));\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n        InlineCompletionProvider::Zed => {\n            if cx.has_flag::<PredictEditsFeatureFlag>()\n                || (cfg!(debug_assertions) && client.status().borrow().is_connected())\n            {\n                let zeta = zeta::Zeta::register(client.clone(), user_store, cx);\n                if let Some(buffer) = &singleton_buffer {\n                    if buffer.read(cx).file().is_some() {\n                        zeta.update(cx, |zeta, cx| {\n                            zeta.register_buffer(&buffer, cx);\n                        });\n                    }\n                }\n<|user_cursor_is_here|>\n                let data_collection = ProviderDataCollection::new(\n                    zeta.clone(),\n                    window.root::<Workspace>().flatten(),\n                    singleton_buffer,\n                    cx,\n                );\n\n                let provider =\n                    cx.new(|_| zeta::ZetaInlineCompletionProvider::new(zeta, data_collection));\n\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n    }\n}\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/zed/src/zed/inline_completion_registry.rs\n                    window,\n<|editable_region_start|>\n                    cx,\n                );\n            })\n        });\n    }\n}\n\nfn register_backward_compatible_actions(editor: &mut Editor, cx: &mut Context<Editor>) {\n    // We renamed some of these actions to not be copilot-specific, but that\n    // would have not been backwards-compatible. So here we are re-registering\n    // the actions with the old names to not break people's keymaps.\n    editor\n        .register_action(cx.listener(\n            |editor, _: &copilot::Suggest, window: &mut Window, cx: &mut Context<Editor>| {\n                editor.show_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor, _: &copilot::NextSuggestion, window: &mut Window, cx: &mut Context<Editor>| {\n                editor.next_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor,\n             _: &copilot::PreviousSuggestion,\n             window: &mut Window,\n             cx: &mut Context<Editor>| {\n                editor.previous_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor,\n             _: &editor::actions::AcceptPartialCopilotSuggestion,\n             window: &mut Window,\n             cx: &mut Context<Editor>| {\n                editor.accept_partial_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n}\n\nfn assign_inline_completion_provider(\n    editor: &mut Editor,\n    provider: InlineCompletionProvider,\n    client: &Arc<Client>,\n    user_store: Entity<UserStore>,\n    window: &mut Window,\n    cx: &mut Context<Editor>,\n) {\n    let singleton_buffer = editor.buffer().read(cx).as_singleton();\n\n    match provider {\n        InlineCompletionProvider::None => {}\n        InlineCompletionProvider::Copilot => {\n            if let Some(copilot) = Copilot::global(cx) {\n                if let Some(buffer) = singleton_buffer {\n                    if buffer.read(cx).file().is_some() {\n                        copilot.update(cx, |copilot, cx| {\n                            copilot.register_buffer(&buffer, cx);\n                        });\n                    }\n                }\n                let provider = cx.new(|_| CopilotCompletionProvider::new(copilot));\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n        InlineCompletionProvider::Supermaven => {\n            if let Some(supermaven) = Supermaven::global(cx) {\n                let provider = cx.new(|_| SupermavenCompletionProvider::new(supermaven));\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n        InlineCompletionProvider::Zed => {\n            if cx.has_flag::<PredictEditsFeatureFlag>()\n                || (cfg!(debug_assertions) && client.status().borrow().is_connected())\n            {\n                let zeta = zeta::Zeta::register(client.clone(), user_store, cx);\n                if let Some(buffer) = &singleton_buffer {\n                    if buffer.read(cx).file().is_some() {\n                        zeta.update(cx, |zeta, cx| {\n                            zeta.register_buffer(&buffer, cx);\n                        });\n                    }\n                }\n<|user_cursor_is_here|>\n                let data_collection = ProviderDataCollection::new(\n                    zeta.clone(),\n                    window.root::<Workspace>().flatten(),\n                    singleton_buffer,\n                    cx,\n                );\n\n                let provider =\n                    cx.new(|_| zeta::ZetaInlineCompletionProvider::new(zeta, data_collection));\n\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n    }\n}\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}