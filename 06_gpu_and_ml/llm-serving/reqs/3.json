{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/inline_completion/src/inline_completion.rs\":\n```diff\n@@ -15,6 +15,7 @@\n #[derive(Clone)]\n pub struct InlineCompletion {\n     pub edits: Vec<(Range<language::Anchor>, String)>,\n+    pub edit_preview: Option<language::EditPreview>,\n }\n \n pub trait InlineCompletionProvider: 'static + Sized {\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1453,6 +1453,14 @@\n         true\n     }\n \n+    fn show_data_collection_toggle() -> bool {\n+        true\n+    }\n+\n+    fn toggle_data_collection(&self, cx: &mut App) {\n+        println!(\"TOGGLING!\");\n+    }\n+\n     fn is_enabled(\n         &self,\n         buffer: &Entity<Buffer>,\n\n```\n\n\n\n\n\nUser edited \"crates/editor/src/inline_completion_tests.rs\":\n```diff\n@@ -1,7 +1,7 @@\n use gpui::{prelude::*, Entity};\n use indoc::indoc;\n use inline_completion::InlineCompletionProvider;\n-use language::{Language, LanguageConfig};\n+use language::{BufferSnapshot, Language, LanguageConfig};\n use multi_buffer::{Anchor, MultiBufferSnapshot, ToPoint};\n use std::{num::NonZeroU32, ops::Range, sync::Arc};\n use text::{Point, ToOffset};\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -264,7 +264,7 @@\n                                 let user_store = user_store.clone();\n \n                                 if let Some(workspace) = workspace.upgrade() {\n-                                    ZedPredictTos::toggle(workspace, user_store, window, cx);\n+                                    ZedPredictModal::toggle(workspace, user_store, window, cx);\n                                 }\n                             })),\n                     );\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -264,7 +264,7 @@\n                                 let user_store = user_store.clone();\n \n                                 if let Some(workspace) = workspace.upgrade() {\n-                                    ZedPredictModal::toggle(workspace, user_store, window, cx);\n+                                    ZedPredictOnboarding::toggle(workspace, user_store, window, cx);\n                                 }\n                             })),\n                     );\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1457,7 +1457,7 @@\n         true\n     }\n \n-    fn toggle_data_collection(&self, cx: &mut App) {\n+    fn toggle_data_collection(&self, _cx: &mut App) {\n         println!(\"TOGGLING!\");\n     }\n \n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -265,6 +265,7 @@\n \n                                 if let Some(workspace) = workspace.upgrade() {\n                                     ZedPredictOnboarding::toggle(workspace, user_store, window, cx);\n+                                    \n                                 }\n                             })),\n                     );\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -264,8 +264,7 @@\n                                 let user_store = user_store.clone();\n \n                                 if let Some(workspace) = workspace.upgrade() {\n-                                    ZedPredictOnboarding::toggle(workspace, user_store, window, cx);\n-                                    \n+                                    ZedPredictModal::toggle(workspace, user_store, window, cx);\n                                 }\n                             })),\n                     );\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -18,6 +18,7 @@\n     File, Language,\n };\n use settings::{update_settings_file, Settings, SettingsStore};\n+use zed_predict_onboarding::ZedPredictModal;\n use std::{path::Path, sync::Arc, time::Duration};\n use supermaven::{AccountStatus, Supermaven};\n use ui::{prelude::*, ButtonLike, Color, Icon, IconWithIndicator, Indicator, PopoverMenuHandle};\n\n```\n\n### Input:\n```crates/zeta/src/zeta.rs\n    Disabled,\n<|editable_region_start|>\n}\n\nimpl DataCollectionChoice {\n    pub fn is_enabled(&self) -> bool {\n        match self {\n            Self::Enabled => true,\n            Self::NotAnswered | Self::Disabled => false,\n        }\n    }\n\n    pub fn is_answered(&self) -> bool {\n        match self {\n            Self::Enabled | Self::Disabled => true,\n            Self::NotAnswered => false,\n        }\n    }\n}\n\npub struct ZetaInlineCompletionProvider {\n    zeta: Entity<Zeta>,\n    workspace: WeakEntity<Workspace>,\n    pending_completions: ArrayVec<PendingCompletion, 2>,\n    next_pending_completion_id: usize,\n    current_completion: Option<CurrentInlineCompletion>,\n    data_collection_choice: DataCollectionChoice,\n}\n\nimpl ZetaInlineCompletionProvider {\n    pub const DEBOUNCE_TIMEOUT: Duration = Duration::from_millis(8);\n\n    pub fn new(\n        zeta: Entity<Zeta>,\n        workspace: WeakEntity<Workspace>,\n        data_collection_choice: DataCollectionChoice,\n    ) -> Self {\n        Self {\n            zeta,\n            pending_completions: ArrayVec::new(),\n            next_pending_completion_id: 0,\n            current_completion: None,\n            workspace,\n            data_collection_choice,\n        }\n    }\n}\n\nimpl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n    fn name() -> &'static str {\n        \"zed-predict\"\n    }\n\n    fn display_name() -> &'static str {\n        \"Zed Predict\"\n    }\n\n    fn show_completions_in_menu() -> bool {\n        true\n    }\n\n    fn show_completions_in_normal_mode() -> bool {\n        true\n    }\n\n    fn show_tab_accept_marker() -> bool {\n        true\n    }\n\n    fn show_data_collection_toggle() -> bool {\n        true\n    }\n    \n    <|user_cursor_is_here|>\n\n    fn toggle_data_collection(&self, _cx: &mut App) {\n        println!(\"TOGGLING!\");\n    }\n\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool {\n        let buffer = buffer.read(cx);\n        let file = buffer.file();\n        let language = buffer.language_at(cursor_position);\n        let settings = all_language_settings(file, cx);\n        settings.inline_completions_enabled(language.as_ref(), file.map(|f| f.path().as_ref()), cx)\n    }\n\n    fn needs_terms_acceptance(&self, cx: &App) -> bool {\n        !self.zeta.read(cx).tos_accepted\n    }\n\n    fn is_refreshing(&self) -> bool {\n        !self.pending_completions.is_empty()\n    }\n\n    fn refresh(\n        &mut self,\n        buffer: Entity<Buffer>,\n        position: language::Anchor,\n        debounce: bool,\n        cx: &mut Context<Self>,\n    ) {\n        if !self.zeta.read(cx).tos_accepted {\n            return;\n        }\n\n        let pending_completion_id = self.next_pending_completion_id;\n        self.next_pending_completion_id += 1;\n        let can_collect_data = self.data_collection_choice.is_enabled();\n\n        let task = cx.spawn(|this, mut cx| async move {\n            if debounce {\n                cx.background_executor().timer(Self::DEBOUNCE_TIMEOUT).await;\n            }\n\n            let completion_request = this.update(&mut cx, |this, cx| {\n                this.zeta.update(cx, |zeta, cx| {\n                    zeta.request_completion(&buffer, position, can_collect_data, cx)\n                })\n            });\n\n            let completion = match completion_request {\n                Ok(completion_request) => {\n                    let completion_request = completion_request.await;\n                    completion_request.map(|c| {\n                        c.map(|completion| CurrentInlineCompletion {\n                            buffer_id: buffer.entity_id(),\n                            completion,\n                        })\n                    })\n                }\n                Err(error) => Err(error),\n            };\n            let Some(new_completion) = completion\n                .context(\"edit prediction failed\")\n                .log_err()\n                .flatten()\n            else {\n                return;\n            };\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/zeta/src/zeta.rs\n    Disabled,\n<|editable_region_start|>\n}\n\nimpl DataCollectionChoice {\n    pub fn is_enabled(&self) -> bool {\n        match self {\n            Self::Enabled => true,\n            Self::NotAnswered | Self::Disabled => false,\n        }\n    }\n\n    pub fn is_answered(&self) -> bool {\n        match self {\n            Self::Enabled | Self::Disabled => true,\n            Self::NotAnswered => false,\n        }\n    }\n}\n\npub struct ZetaInlineCompletionProvider {\n    zeta: Entity<Zeta>,\n    workspace: WeakEntity<Workspace>,\n    pending_completions: ArrayVec<PendingCompletion, 2>,\n    next_pending_completion_id: usize,\n    current_completion: Option<CurrentInlineCompletion>,\n    data_collection_choice: DataCollectionChoice,\n}\n\nimpl ZetaInlineCompletionProvider {\n    pub const DEBOUNCE_TIMEOUT: Duration = Duration::from_millis(8);\n\n    pub fn new(\n        zeta: Entity<Zeta>,\n        workspace: WeakEntity<Workspace>,\n        data_collection_choice: DataCollectionChoice,\n    ) -> Self {\n        Self {\n            zeta,\n            pending_completions: ArrayVec::new(),\n            next_pending_completion_id: 0,\n            current_completion: None,\n            workspace,\n            data_collection_choice,\n        }\n    }\n}\n\nimpl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n    fn name() -> &'static str {\n        \"zed-predict\"\n    }\n\n    fn display_name() -> &'static str {\n        \"Zed Predict\"\n    }\n\n    fn show_completions_in_menu() -> bool {\n        true\n    }\n\n    fn show_completions_in_normal_mode() -> bool {\n        true\n    }\n\n    fn show_tab_accept_marker() -> bool {\n        true\n    }\n\n    fn show_data_collection_toggle() -> bool {\n        true\n    }\n    \n    <|user_cursor_is_here|>\n\n    fn toggle_data_collection(&self, _cx: &mut App) {\n        println!(\"TOGGLING!\");\n    }\n\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool {\n        let buffer = buffer.read(cx);\n        let file = buffer.file();\n        let language = buffer.language_at(cursor_position);\n        let settings = all_language_settings(file, cx);\n        settings.inline_completions_enabled(language.as_ref(), file.map(|f| f.path().as_ref()), cx)\n    }\n\n    fn needs_terms_acceptance(&self, cx: &App) -> bool {\n        !self.zeta.read(cx).tos_accepted\n    }\n\n    fn is_refreshing(&self) -> bool {\n        !self.pending_completions.is_empty()\n    }\n\n    fn refresh(\n        &mut self,\n        buffer: Entity<Buffer>,\n        position: language::Anchor,\n        debounce: bool,\n        cx: &mut Context<Self>,\n    ) {\n        if !self.zeta.read(cx).tos_accepted {\n            return;\n        }\n\n        let pending_completion_id = self.next_pending_completion_id;\n        self.next_pending_completion_id += 1;\n        let can_collect_data = self.data_collection_choice.is_enabled();\n\n        let task = cx.spawn(|this, mut cx| async move {\n            if debounce {\n                cx.background_executor().timer(Self::DEBOUNCE_TIMEOUT).await;\n            }\n\n            let completion_request = this.update(&mut cx, |this, cx| {\n                this.zeta.update(cx, |zeta, cx| {\n                    zeta.request_completion(&buffer, position, can_collect_data, cx)\n                })\n            });\n\n            let completion = match completion_request {\n                Ok(completion_request) => {\n                    let completion_request = completion_request.await;\n                    completion_request.map(|c| {\n                        c.map(|completion| CurrentInlineCompletion {\n                            buffer_id: buffer.entity_id(),\n                            completion,\n                        })\n                    })\n                }\n                Err(error) => Err(error),\n            };\n            let Some(new_completion) = completion\n                .context(\"edit prediction failed\")\n                .log_err()\n                .flatten()\n            else {\n                return;\n            };\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}