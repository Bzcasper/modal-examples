{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/project/src/git.rs\":\n```diff\n@@ -15,7 +15,7 @@\n use rpc::{proto, AnyProtoClient};\n use settings::WorktreeId;\n use std::sync::Arc;\n-use text::Rope;\n+use text::Rope;sdasdsa\n use util::maybe;\n use worktree::{ProjectEntryId, RepositoryEntry, StatusEntry};\n \n\n```\n\nUser edited \"crates/project/src/git.rs\":\n```diff\n@@ -15,7 +15,7 @@\n use rpc::{proto, AnyProtoClient};\n use settings::WorktreeId;\n use std::sync::Arc;\n-use text::Rope;sdasdsa\n+use text::Rope;\n use util::maybe;\n use worktree::{ProjectEntryId, RepositoryEntry, StatusEntry};\n \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -103,7 +103,7 @@\n     - Etc.\n   \n ## Stretch\n-\n+- [ ] https://github.com/zed-industries/zed/issues/7566\n - [ ] Add \"debug: copy git state\" command\n     - Use to debug user issues as they start testing git_ui\n   - [ ] Smoother handling of open buffers whose backing file changes when switching branches\n\n```\n\n\n\nUser edited \"untitled\":\n```diff\n@@ -103,7 +103,7 @@\n     - Etc.\n   \n ## Stretch\n-- [ ] https://github.com/zed-industries/zed/issues/7566\n+- [ ] Show submodule branch on the GUI https://github.com/zed-industries/zed/issues/7566\n - [ ] Add \"debug: copy git state\" command\n     - Use to debug user issues as they start testing git_ui\n   - [ ] Smoother handling of open buffers whose backing file changes when switching branches\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser edited \"crates/project/src/lsp_command.rs\":\n```diff\n@@ -6,6 +6,8 @@\n     InlayHintLabel, InlayHintLabelPart, InlayHintLabelPartTooltip, InlayHintTooltip, Location,\n     LocationLink, MarkupContent, PrepareRenameResponse, ProjectTransaction, ResolveState,\n };\n+\n+///\n use anyhow::{anyhow, Context as _, Result};\n use async_trait::async_trait;\n use client::proto::{self, PeerId};\n\n```\n\nUser edited \"crates/project/src/lsp_command.rs\":\n```diff\n@@ -6,8 +6,6 @@\n     InlayHintLabel, InlayHintLabelPart, InlayHintLabelPartTooltip, InlayHintTooltip, Location,\n     LocationLink, MarkupContent, PrepareRenameResponse, ProjectTransaction, ResolveState,\n };\n-\n-///\n use anyhow::{anyhow, Context as _, Result};\n use async_trait::async_trait;\n use client::proto::{self, PeerId};\n\n```\n\nUser edited \"crates/diagnostics/src/diagnostics.rs\":\n```diff\n@@ -1073,10 +1073,10 @@\n                 }\n             }\n             let end = included_child_end.unwrap_or(node_range.end);\n-            if let Some(start) = included_child_start {\n-                let row_count = end.row - start.row;\n+            sdasdif let Some(start) = included_child_start {\n+                sdasdlet row_count = end.row - start.row;\n                 if row_count < max_row_count {\n-                    return Some(RangeInclusive::new(start.row, end.row));\n+                    sdasdreturn Some(RangeInclusive::new(start.row, end.row));\n                 }\n             }\n \n\n```\n\n### Input:\n```crates/diagnostics/src/diagnostics.rs\n                        outline_range.end.row,\n<|editable_region_start|>\n                    ));\n                }\n            }\n        }\n    }\n\n    let mut node = snapshot.syntax_ancestor(input_range.clone())?;\n    loop {\n        let node_start = Point::from_ts_point(node.start_position());\n        let node_end = Point::from_ts_point(node.end_position());\n        let node_range = node_start..node_end;\n        let row_count = node_end.row - node_start.row + 1;\n\n        // Stop if we've exceeded the row count or reached an outline node. Then, find the interval\n        // of node children which contains the query range. For example, this allows just returning\n        // the header of a declaration rather than the entire declaration.\n        if row_count > max_row_count || outline_range == Some(node_range.clone()) {\n            let mut cursor = node.walk();\n            let mut included_child_start = None;\n            let mut included_child_end = None;\n            let mut previous_end = node_start;\n            if cursor.goto_first_child() {\n                loop {\n                    let child_node = cursor.node();\n                    let child_range = previous_end..Point::from_ts_point(child_node.end_position());\n                    if included_child_start.is_none() && child_range.contains(&input_range.start) {\n                        included_child_start = Some(child_range.start);\n                    }\n                    if child_range.contains(&input_range.end) {\n                        included_child_end = Some(child_range.end);\n                    }\n                    previous_end = child_range.end;\n                    if !cursor.goto_next_sibling() {\n                        break;\n                    }\n                }\n            }\n            let end = included_child_end.unwrap_or(node_range.end);\n            sdasdif let Some(start) = included_child_start {\n                sdasdlet row_count = end.row - start.row;\n                if row_count < max_row_count {\n                    sdasd<|user_cursor_is_here|>return Some(RangeInclusive::new(start.row, end.row));\n                }\n            }\n\n            log::info!(\n                \"Expanding to ancestor started on {} node exceeding row limit of {max_row_count}.\",\n                node.grammar_name()\n            );\n            return None;\n        }\n\n        let node_name = node.grammar_name();\n        let node_row_range = RangeInclusive::new(node_range.start.row, node_range.end.row);\n        if node_name.ends_with(\"block\") {\n            return Some(node_row_range);\n        } else if node_name.ends_with(\"statement\") || node_name.ends_with(\"declaration\") {\n            // Expand to the nearest dedent or blank line for statements and declarations.\n            let tab_size = snapshot.settings_at(node_range.start, cx).tab_size.get();\n            let indent_level = snapshot\n                .line_indent_for_row(node_range.start.row)\n                .len(tab_size);\n            let rows_remaining = max_row_count.saturating_sub(row_count);\n            let Some(start_row) = (node_range.start.row.saturating_sub(rows_remaining)\n                ..node_range.start.row)\n                .rev()\n                .find(|row| is_line_blank_or_indented_less(indent_level, *row, tab_size, snapshot))\n            else {\n                return Some(node_row_range);\n            };\n            let rows_remaining = max_row_count.saturating_sub(node_range.end.row - start_row);\n            let Some(end_row) = (node_range.end.row + 1\n                ..cmp::min(\n                    node_range.end.row + rows_remaining + 1,\n                    snapshot.row_count(),\n                ))\n                .find(|row| is_line_blank_or_indented_less(indent_level, *row, tab_size, snapshot))\n            else {\n                return Some(node_row_range);\n            };\n            return Some(RangeInclusive::new(start_row, end_row));\n        }\n\n        // TODO: doing this instead of walking a cursor as that doesn't work - why?\n        let Some(parent) = node.parent() else {\n<|editable_region_end|>\n        // TODO: doing this instead of walking a cursor as that doesn't work - why?\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/diagnostics/src/diagnostics.rs\n                        outline_range.end.row,\n<|editable_region_start|>\n                    ));\n                }\n            }\n        }\n    }\n\n    let mut node = snapshot.syntax_ancestor(input_range.clone())?;\n    loop {\n        let node_start = Point::from_ts_point(node.start_position());\n        let node_end = Point::from_ts_point(node.end_position());\n        let node_range = node_start..node_end;\n        let row_count = node_end.row - node_start.row + 1;\n\n        // Stop if we've exceeded the row count or reached an outline node. Then, find the interval\n        // of node children which contains the query range. For example, this allows just returning\n        // the header of a declaration rather than the entire declaration.\n        if row_count > max_row_count || outline_range == Some(node_range.clone()) {\n            let mut cursor = node.walk();\n            let mut included_child_start = None;\n            let mut included_child_end = None;\n            let mut previous_end = node_start;\n            if cursor.goto_first_child() {\n                loop {\n                    let child_node = cursor.node();\n                    let child_range = previous_end..Point::from_ts_point(child_node.end_position());\n                    if included_child_start.is_none() && child_range.contains(&input_range.start) {\n                        included_child_start = Some(child_range.start);\n                    }\n                    if child_range.contains(&input_range.end) {\n                        included_child_end = Some(child_range.end);\n                    }\n                    previous_end = child_range.end;\n                    if !cursor.goto_next_sibling() {\n                        break;\n                    }\n                }\n            }\n            let end = included_child_end.unwrap_or(node_range.end);\n            sdasdif let Some(start) = included_child_start {\n                sdasdlet row_count = end.row - start.row;\n                if row_count < max_row_count {\n                    sdasd<|user_cursor_is_here|>return Some(RangeInclusive::new(start.row, end.row));\n                }\n            }\n\n            log::info!(\n                \"Expanding to ancestor started on {} node exceeding row limit of {max_row_count}.\",\n                node.grammar_name()\n            );\n            return None;\n        }\n\n        let node_name = node.grammar_name();\n        let node_row_range = RangeInclusive::new(node_range.start.row, node_range.end.row);\n        if node_name.ends_with(\"block\") {\n            return Some(node_row_range);\n        } else if node_name.ends_with(\"statement\") || node_name.ends_with(\"declaration\") {\n            // Expand to the nearest dedent or blank line for statements and declarations.\n            let tab_size = snapshot.settings_at(node_range.start, cx).tab_size.get();\n            let indent_level = snapshot\n                .line_indent_for_row(node_range.start.row)\n                .len(tab_size);\n            let rows_remaining = max_row_count.saturating_sub(row_count);\n            let Some(start_row) = (node_range.start.row.saturating_sub(rows_remaining)\n                ..node_range.start.row)\n                .rev()\n                .find(|row| is_line_blank_or_indented_less(indent_level, *row, tab_size, snapshot))\n            else {\n                return Some(node_row_range);\n            };\n            let rows_remaining = max_row_count.saturating_sub(node_range.end.row - start_row);\n            let Some(end_row) = (node_range.end.row + 1\n                ..cmp::min(\n                    node_range.end.row + rows_remaining + 1,\n                    snapshot.row_count(),\n                ))\n                .find(|row| is_line_blank_or_indented_less(indent_level, *row, tab_size, snapshot))\n            else {\n                return Some(node_row_range);\n            };\n            return Some(RangeInclusive::new(start_row, end_row));\n        }\n\n        // TODO: doing this instead of walking a cursor as that doesn't work - why?\n        let Some(parent) = node.parent() else {\n<|editable_region_end|>\n        // TODO: doing this instead of walking a cursor as that doesn't work - why?\n```"
  },
  "max_tokens": 1024
}