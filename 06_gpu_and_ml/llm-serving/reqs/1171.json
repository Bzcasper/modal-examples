{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -86,7 +86,7 @@\n     where\n         V: ModalView,\n     {\n-        cx.ongoing\n+        cx.s\n         let focus_handle = cx.focus_handle();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -86,7 +86,7 @@\n     where\n         V: ModalView,\n     {\n-        cx.s\n+        window.\n         let focus_handle = cx.focus_handle();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -86,7 +86,7 @@\n     where\n         V: ModalView,\n     {\n-        window.\n+        window.take_autoscroll()\n         let focus_handle = cx.focus_handle();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -86,7 +86,7 @@\n     where\n         V: ModalView,\n     {\n-        window.take_autoscroll()\n+        window.take_autoscroll();\n         let focus_handle = cx.focus_handle();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -87,6 +87,7 @@\n         V: ModalView,\n     {\n         window.take_autoscroll();\n+        window.\n         let focus_handle = cx.focus_handle();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -87,7 +87,6 @@\n         V: ModalView,\n     {\n         window.take_autoscroll();\n-        window.\n         let focus_handle = cx.focus_handle();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -86,7 +86,6 @@\n     where\n         V: ModalView,\n     {\n-        window.take_autoscroll();\n         let focus_handle = cx.focus_handle();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n\n```\n\nUser edited \"crates/project/src/project_tree/server_tree.rs\":\n```diff\n@@ -185,7 +185,6 @@\n                     .map(|adapter| (adapter, (LspSettings::default(), BTreeSet::new()))),\n             ),\n         };\n-        dbg!(&adapters.len());\n         self.get_with_adapters(path, adapters, delegate, cx)\n     }\n \n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -87,6 +87,7 @@\n         V: ModalView,\n     {\n         let focus_handle = cx.focus_handle();\n+        cx.take_\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n             _subscriptions: [\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -87,7 +87,7 @@\n         V: ModalView,\n     {\n         let focus_handle = cx.focus_handle();\n-        cx.take_\n+        cx.take_autoscroll();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n             _subscriptions: [\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -87,7 +87,7 @@\n         V: ModalView,\n     {\n         let focus_handle = cx.focus_handle();\n-        cx.take_autoscroll();\n+        window.take_autoscroll();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n             _subscriptions: [\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -87,7 +87,6 @@\n         V: ModalView,\n     {\n         let focus_handle = cx.focus_handle();\n-        window.take_autoscroll();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n             _subscriptions: [\n\n```\n\n### Input:\n```crates/editor/src/element.rs\n<|editable_region_start|>\n<|user_cursor_is_here|>use crate::{\n    blame_entry_tooltip::{blame_entry_relative_timestamp, BlameEntryTooltip},\n    code_context_menus::{CodeActionsMenu, MENU_ASIDE_MAX_WIDTH, MENU_ASIDE_MIN_WIDTH, MENU_GAP},\n    display_map::{\n        Block, BlockContext, BlockStyle, DisplaySnapshot, HighlightedChunk, ToDisplayPoint,\n    },\n    editor_settings::{\n        CurrentLineHighlight, DoubleClickInMultibuffer, MultiCursorModifier, ScrollBeyondLastLine,\n        ScrollbarDiagnostics, ShowScrollbar,\n    },\n    git::blame::{CommitDetails, GitBlame},\n    hover_popover::{\n        self, hover_at, HOVER_POPOVER_GAP, MIN_POPOVER_CHARACTER_WIDTH, MIN_POPOVER_LINE_HEIGHT,\n    },\n    items::BufferSearchHighlights,\n    mouse_context_menu::{self, MenuPosition, MouseContextMenu},\n    scroll::{axis_pair, scroll_amount::ScrollAmount, AxisPair},\n    BlockId, ChunkReplacement, CursorShape, CustomBlockId, DisplayPoint, DisplayRow,\n    DocumentHighlightRead, DocumentHighlightWrite, EditDisplayMode, Editor, EditorMode,\n    EditorSettings, EditorSnapshot, EditorStyle, ExpandExcerpts, FocusedBlock, GoToHunk,\n    GoToPrevHunk, GutterDimensions, HalfPageDown, HalfPageUp, HandleInput, HoveredCursor,\n    InlineCompletion, JumpData, LineDown, LineUp, OpenExcerpts, PageDown, PageUp, Point,\n    RevertSelectedHunks, RowExt, RowRangeExt, SelectPhase, Selection, SoftWrap,\n    StickyHeaderExcerpt, ToPoint, ToggleFold, CURSORS_VISIBLE_FOR, FILE_HEADER_HEIGHT,\n    GIT_BLAME_MAX_AUTHOR_CHARS_DISPLAYED, MAX_LINE_LEN, MULTI_BUFFER_EXCERPT_HEADER_HEIGHT,\n};\nuse client::ParticipantIndex;\nuse collections::{BTreeMap, HashMap, HashSet};\nuse file_icons::FileIcons;\nuse git::{blame::BlameEntry, diff::DiffHunkStatus, Oid};\nuse gpui::{\n    anchored, deferred, div, fill, linear_color_stop, linear_gradient, outline, point, px, quad,\n    relative, size, svg, transparent_black, Action, AnyElement, App, AvailableSpace, Axis, Bounds,\n    ClickEvent, ClipboardItem, ContentMask, Context, Corner, Corners, CursorStyle, DispatchPhase,\n    Edges, Element, ElementInputHandler, Entity, Focusable as _, FontId, GlobalElementId, Hitbox,\n    Hsla, InteractiveElement, IntoElement, Length, ModifiersChangedEvent, MouseButton,\n    MouseDownEvent, MouseMoveEvent, MouseUpEvent, PaintQuad, ParentElement, Pixels, ScrollDelta,\n    ScrollWheelEvent, ShapedLine, SharedString, Size, StatefulInteractiveElement, Style, Styled,\n    Subscription, TextRun, TextStyleRefinement, WeakEntity, Window,\n};\nuse itertools::Itertools;\nuse language::{\n    language_settings::{\n        IndentGuideBackgroundColoring, IndentGuideColoring, IndentGuideSettings,\n        ShowWhitespaceSetting,\n    },\n    ChunkRendererContext,\n};\nuse lsp::DiagnosticSeverity;\nuse multi_buffer::{\n    Anchor, ExcerptId, ExcerptInfo, ExpandExcerptDirection, MultiBufferPoint, MultiBufferRow,\n    RowInfo, ToOffset,\n};\nuse project::project_settings::{GitGutterSetting, ProjectSettings};\nuse settings::Settings;\nuse smallvec::{smallvec, SmallVec};\nuse std::{\n    any::TypeId,\n    borrow::Cow,\n    cmp::{self, Ordering},\n    fmt::{self, Write},\n    iter, mem,\n    ops::{Deref, Range},\n    rc::Rc,\n    sync::Arc,\n};\nuse sum_tree::Bias;\nuse text::BufferId;\nuse theme::{ActiveTheme, Appearance, PlayerColor};\nuse ui::{\n    h_flex, prelude::*, ButtonLike, ButtonStyle, ContextMenu, IconButtonShape, KeyBinding, Tooltip,\n    POPOVER_Y_PADDING,\n};\nuse unicode_segmentation::UnicodeSegmentation;\nuse util::{RangeExt, ResultExt};\nuse workspace::{item::Item, notifications::NotifyTaskExt, Workspace};\n\nconst INLINE_BLAME_PADDING_EM_WIDTHS: f32 = 7.;\n\n#[derive(Debug, Clone, PartialEq, Eq)]\nenum DisplayDiffHunk {\n    Folded {\n        display_row: DisplayRow,\n    },\n\n    Unfolded {\n        diff_base_byte_range: Range<usize>,\n        display_row_range: Range<DisplayRow>,\n        multi_buffer_range: Range<Anchor>,\n        status: DiffHunkStatus,\n    },\n}\n\nstruct SelectionLayout {\n    head: DisplayPoint,\n    cursor_shape: CursorShape,\n    is_newest: bool,\n    is_local: bool,\n    range: Range<DisplayPoint>,\n<|editable_region_end|>\n    is_local: bool,\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/editor/src/element.rs\n<|editable_region_start|>\n<|user_cursor_is_here|>use crate::{\n    blame_entry_tooltip::{blame_entry_relative_timestamp, BlameEntryTooltip},\n    code_context_menus::{CodeActionsMenu, MENU_ASIDE_MAX_WIDTH, MENU_ASIDE_MIN_WIDTH, MENU_GAP},\n    display_map::{\n        Block, BlockContext, BlockStyle, DisplaySnapshot, HighlightedChunk, ToDisplayPoint,\n    },\n    editor_settings::{\n        CurrentLineHighlight, DoubleClickInMultibuffer, MultiCursorModifier, ScrollBeyondLastLine,\n        ScrollbarDiagnostics, ShowScrollbar,\n    },\n    git::blame::{CommitDetails, GitBlame},\n    hover_popover::{\n        self, hover_at, HOVER_POPOVER_GAP, MIN_POPOVER_CHARACTER_WIDTH, MIN_POPOVER_LINE_HEIGHT,\n    },\n    items::BufferSearchHighlights,\n    mouse_context_menu::{self, MenuPosition, MouseContextMenu},\n    scroll::{axis_pair, scroll_amount::ScrollAmount, AxisPair},\n    BlockId, ChunkReplacement, CursorShape, CustomBlockId, DisplayPoint, DisplayRow,\n    DocumentHighlightRead, DocumentHighlightWrite, EditDisplayMode, Editor, EditorMode,\n    EditorSettings, EditorSnapshot, EditorStyle, ExpandExcerpts, FocusedBlock, GoToHunk,\n    GoToPrevHunk, GutterDimensions, HalfPageDown, HalfPageUp, HandleInput, HoveredCursor,\n    InlineCompletion, JumpData, LineDown, LineUp, OpenExcerpts, PageDown, PageUp, Point,\n    RevertSelectedHunks, RowExt, RowRangeExt, SelectPhase, Selection, SoftWrap,\n    StickyHeaderExcerpt, ToPoint, ToggleFold, CURSORS_VISIBLE_FOR, FILE_HEADER_HEIGHT,\n    GIT_BLAME_MAX_AUTHOR_CHARS_DISPLAYED, MAX_LINE_LEN, MULTI_BUFFER_EXCERPT_HEADER_HEIGHT,\n};\nuse client::ParticipantIndex;\nuse collections::{BTreeMap, HashMap, HashSet};\nuse file_icons::FileIcons;\nuse git::{blame::BlameEntry, diff::DiffHunkStatus, Oid};\nuse gpui::{\n    anchored, deferred, div, fill, linear_color_stop, linear_gradient, outline, point, px, quad,\n    relative, size, svg, transparent_black, Action, AnyElement, App, AvailableSpace, Axis, Bounds,\n    ClickEvent, ClipboardItem, ContentMask, Context, Corner, Corners, CursorStyle, DispatchPhase,\n    Edges, Element, ElementInputHandler, Entity, Focusable as _, FontId, GlobalElementId, Hitbox,\n    Hsla, InteractiveElement, IntoElement, Length, ModifiersChangedEvent, MouseButton,\n    MouseDownEvent, MouseMoveEvent, MouseUpEvent, PaintQuad, ParentElement, Pixels, ScrollDelta,\n    ScrollWheelEvent, ShapedLine, SharedString, Size, StatefulInteractiveElement, Style, Styled,\n    Subscription, TextRun, TextStyleRefinement, WeakEntity, Window,\n};\nuse itertools::Itertools;\nuse language::{\n    language_settings::{\n        IndentGuideBackgroundColoring, IndentGuideColoring, IndentGuideSettings,\n        ShowWhitespaceSetting,\n    },\n    ChunkRendererContext,\n};\nuse lsp::DiagnosticSeverity;\nuse multi_buffer::{\n    Anchor, ExcerptId, ExcerptInfo, ExpandExcerptDirection, MultiBufferPoint, MultiBufferRow,\n    RowInfo, ToOffset,\n};\nuse project::project_settings::{GitGutterSetting, ProjectSettings};\nuse settings::Settings;\nuse smallvec::{smallvec, SmallVec};\nuse std::{\n    any::TypeId,\n    borrow::Cow,\n    cmp::{self, Ordering},\n    fmt::{self, Write},\n    iter, mem,\n    ops::{Deref, Range},\n    rc::Rc,\n    sync::Arc,\n};\nuse sum_tree::Bias;\nuse text::BufferId;\nuse theme::{ActiveTheme, Appearance, PlayerColor};\nuse ui::{\n    h_flex, prelude::*, ButtonLike, ButtonStyle, ContextMenu, IconButtonShape, KeyBinding, Tooltip,\n    POPOVER_Y_PADDING,\n};\nuse unicode_segmentation::UnicodeSegmentation;\nuse util::{RangeExt, ResultExt};\nuse workspace::{item::Item, notifications::NotifyTaskExt, Workspace};\n\nconst INLINE_BLAME_PADDING_EM_WIDTHS: f32 = 7.;\n\n#[derive(Debug, Clone, PartialEq, Eq)]\nenum DisplayDiffHunk {\n    Folded {\n        display_row: DisplayRow,\n    },\n\n    Unfolded {\n        diff_base_byte_range: Range<usize>,\n        display_row_range: Range<DisplayRow>,\n        multi_buffer_range: Range<Anchor>,\n        status: DiffHunkStatus,\n    },\n}\n\nstruct SelectionLayout {\n    head: DisplayPoint,\n    cursor_shape: CursorShape,\n    is_newest: bool,\n    is_local: bool,\n    range: Range<DisplayPoint>,\n<|editable_region_end|>\n    is_local: bool,\n```"
  },
  "max_tokens": 1024
}