{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/picker/src/picker.rs\":\n```diff\n@@ -487,10 +487,10 @@\n             panic!(\"unexpected call\");\n         };\n         match event {\n-            editor::EditorEvent::BufferEdited => {a\n+            editor::EditorEvent::BufferEdited => {\n                 let query = editor.read(cx).text(cx);\n                 self.update_matches(query, window, cx);\n-            }a\n+            }\n             editor::EditorEvent::Blurred => {\n                 self.cancel(&menu::Cancel, window, cx);\n             }\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -86,6 +86,7 @@\n     where\n         V: ModalView,\n     {\n+        cx.\n         let focus_handle = cx.focus_handle();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n\n```\n\nUser edited \"crates/workspace/src/modal_layer.rs\":\n```diff\n@@ -86,7 +86,7 @@\n     where\n         V: ModalView,\n     {\n-        cx.\n+        cx.s\n         let focus_handle = cx.focus_handle();\n         self.active_modal = Some(ActiveModal {\n             modal: Box::new(new_modal.clone()),\n\n```\n\n### Input:\n```crates/workspace/src/modal_layer.rs\n    fn on_before_dismiss(&mut self, window: &mut Window, cx: &mut App) -> DismissDecision;\n<|editable_region_start|>\n    fn view(&self) -> AnyView;\n    fn fade_out_background(&self, cx: &mut App) -> bool;\n}\n\nimpl<V: ModalView> ModalViewHandle for Entity<V> {\n    fn on_before_dismiss(&mut self, window: &mut Window, cx: &mut App) -> DismissDecision {\n        self.update(cx, |this, cx| this.on_before_dismiss(window, cx))\n    }\n\n    fn view(&self) -> AnyView {\n        self.clone().into()\n    }\n\n    fn fade_out_background(&self, cx: &mut App) -> bool {\n        self.read(cx).fade_out_background()\n    }\n}\n\npub struct ActiveModal {\n    modal: Box<dyn ModalViewHandle>,\n    _subscriptions: [Subscription; 2],\n    previous_focus_handle: Option<FocusHandle>,\n    focus_handle: FocusHandle,\n}\n\npub struct ModalLayer {\n    active_modal: Option<ActiveModal>,\n    dismiss_on_focus_lost: bool,\n}\n\nimpl Default for ModalLayer {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\nimpl ModalLayer {\n    pub fn new() -> Self {\n        Self {\n            active_modal: None,\n            dismiss_on_focus_lost: false,\n        }\n    }\n\n    pub fn toggle_modal<V, B>(&mut self, window: &mut Window, cx: &mut Context<Self>, build_view: B)\n    where\n        V: ModalView,\n        B: FnOnce(&mut Window, &mut Context<V>) -> V,\n    {\n        if let Some(active_modal) = &self.active_modal {\n            let is_close = active_modal.modal.view().downcast::<V>().is_ok();\n            let did_close = self.hide_modal(window, cx);\n            if is_close || !did_close {\n                return;\n            }\n        }\n        let new_modal = cx.new(|cx| build_view(window, cx));\n        self.show_modal(new_modal, window, cx);\n    }\n\n    fn show_modal<V>(&mut self, new_modal: Entity<V>, window: &mut Window, cx: &mut Context<Self>)\n    where\n        V: ModalView,\n    {\n        cx.s<|user_cursor_is_here|>\n        let focus_handle = cx.focus_handle();\n        self.active_modal = Some(ActiveModal {\n            modal: Box::new(new_modal.clone()),\n            _subscriptions: [\n                cx.subscribe_in(\n                    &new_modal,\n                    window,\n                    |this, _, _: &DismissEvent, window, cx| {\n                        this.hide_modal(window, cx);\n                    },\n                ),\n                cx.on_focus_out(&focus_handle, window, |this, _event, window, cx| {\n                    if this.dismiss_on_focus_lost {\n                        this.hide_modal(window, cx);\n                    }\n                }),\n            ],\n            previous_focus_handle: window.focused(cx),\n            focus_handle,\n        });\n        cx.defer_in(window, move |_, window, cx| {\n            window.focus(&new_modal.focus_handle(cx));\n        });\n        cx.notify();\n    }\n\n    fn hide_modal(&mut self, window: &mut Window, cx: &mut Context<Self>) -> bool {\n        let Some(active_modal) = self.active_modal.as_mut() else {\n            self.dismiss_on_focus_lost = false;\n            return false;\n        };\n\n        match active_modal.modal.on_before_dismiss(window, cx) {\n            DismissDecision::Dismiss(dismiss) => {\n                self.dismiss_on_focus_lost = !dismiss;\n                if !dismiss {\n                    return false;\n                }\n            }\n            DismissDecision::Pending => {\n                self.dismiss_on_focus_lost = false;\n                return false;\n            }\n        }\n\n        if let Some(active_modal) = self.active_modal.take() {\n            if let Some(previous_focus) = active_modal.previous_focus_handle {\n                if active_modal.focus_handle.contains_focused(window, cx) {\n                    previous_focus.focus(window);\n                }\n            }\n            cx.notify();\n        }\n        true\n    }\n\n    pub fn active_modal<V>(&self) -> Option<Entity<V>>\n    where\n        V: 'static,\n    {\n        let active_modal = self.active_modal.as_ref()?;\n        active_modal.modal.view().downcast::<V>().ok()\n    }\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/workspace/src/modal_layer.rs\n    fn on_before_dismiss(&mut self, window: &mut Window, cx: &mut App) -> DismissDecision;\n<|editable_region_start|>\n    fn view(&self) -> AnyView;\n    fn fade_out_background(&self, cx: &mut App) -> bool;\n}\n\nimpl<V: ModalView> ModalViewHandle for Entity<V> {\n    fn on_before_dismiss(&mut self, window: &mut Window, cx: &mut App) -> DismissDecision {\n        self.update(cx, |this, cx| this.on_before_dismiss(window, cx))\n    }\n\n    fn view(&self) -> AnyView {\n        self.clone().into()\n    }\n\n    fn fade_out_background(&self, cx: &mut App) -> bool {\n        self.read(cx).fade_out_background()\n    }\n}\n\npub struct ActiveModal {\n    modal: Box<dyn ModalViewHandle>,\n    _subscriptions: [Subscription; 2],\n    previous_focus_handle: Option<FocusHandle>,\n    focus_handle: FocusHandle,\n}\n\npub struct ModalLayer {\n    active_modal: Option<ActiveModal>,\n    dismiss_on_focus_lost: bool,\n}\n\nimpl Default for ModalLayer {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\nimpl ModalLayer {\n    pub fn new() -> Self {\n        Self {\n            active_modal: None,\n            dismiss_on_focus_lost: false,\n        }\n    }\n\n    pub fn toggle_modal<V, B>(&mut self, window: &mut Window, cx: &mut Context<Self>, build_view: B)\n    where\n        V: ModalView,\n        B: FnOnce(&mut Window, &mut Context<V>) -> V,\n    {\n        if let Some(active_modal) = &self.active_modal {\n            let is_close = active_modal.modal.view().downcast::<V>().is_ok();\n            let did_close = self.hide_modal(window, cx);\n            if is_close || !did_close {\n                return;\n            }\n        }\n        let new_modal = cx.new(|cx| build_view(window, cx));\n        self.show_modal(new_modal, window, cx);\n    }\n\n    fn show_modal<V>(&mut self, new_modal: Entity<V>, window: &mut Window, cx: &mut Context<Self>)\n    where\n        V: ModalView,\n    {\n        cx.s<|user_cursor_is_here|>\n        let focus_handle = cx.focus_handle();\n        self.active_modal = Some(ActiveModal {\n            modal: Box::new(new_modal.clone()),\n            _subscriptions: [\n                cx.subscribe_in(\n                    &new_modal,\n                    window,\n                    |this, _, _: &DismissEvent, window, cx| {\n                        this.hide_modal(window, cx);\n                    },\n                ),\n                cx.on_focus_out(&focus_handle, window, |this, _event, window, cx| {\n                    if this.dismiss_on_focus_lost {\n                        this.hide_modal(window, cx);\n                    }\n                }),\n            ],\n            previous_focus_handle: window.focused(cx),\n            focus_handle,\n        });\n        cx.defer_in(window, move |_, window, cx| {\n            window.focus(&new_modal.focus_handle(cx));\n        });\n        cx.notify();\n    }\n\n    fn hide_modal(&mut self, window: &mut Window, cx: &mut Context<Self>) -> bool {\n        let Some(active_modal) = self.active_modal.as_mut() else {\n            self.dismiss_on_focus_lost = false;\n            return false;\n        };\n\n        match active_modal.modal.on_before_dismiss(window, cx) {\n            DismissDecision::Dismiss(dismiss) => {\n                self.dismiss_on_focus_lost = !dismiss;\n                if !dismiss {\n                    return false;\n                }\n            }\n            DismissDecision::Pending => {\n                self.dismiss_on_focus_lost = false;\n                return false;\n            }\n        }\n\n        if let Some(active_modal) = self.active_modal.take() {\n            if let Some(previous_focus) = active_modal.previous_focus_handle {\n                if active_modal.focus_handle.contains_focused(window, cx) {\n                    previous_focus.focus(window);\n                }\n            }\n            cx.notify();\n        }\n        true\n    }\n\n    pub fn active_modal<V>(&self) -> Option<Entity<V>>\n    where\n        V: 'static,\n    {\n        let active_modal = self.active_modal.as_ref()?;\n        active_modal.modal.view().downcast::<V>().ok()\n    }\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}