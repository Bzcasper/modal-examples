{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1349,6 +1349,17 @@\n             return;\n         }\n \n+        if let Some(current_completion) = self.current_completion.as_ref() {\n+            let snapshot = buffer.read(cx).snapshot();\n+            if current_completion\n+                .completion\n+                .interpolate(&snapshot)\n+                .is_some()\n+            {\n+                return;\n+            }\n+        }\n+\n         let pending_completion_id = self.next_pending_completion_id;\n         self.next_pending_completion_id += 1;\n \n\n```\n\nUser edited \"crates/editor/src/inline_completion_tests.rs\":\n```diff\n@@ -410,7 +410,7 @@\n     ) {\n     }\n \n-    fn accept(&mut self, _cx: &mut gpui::Context<Self>) {}\n+    fn accept(&mut self, snapshot: &BufferSnapshot, _cx: &mut gpui::Context<Self>) {}\n \n     fn discard(&mut self, _cx: &mut gpui::Context<Self>) {}\n \n\n```\n\n\n\n\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -261,7 +261,7 @@\n                     }\n                 }\n \n-                if let Some(workspace) = editor.workspace() {\n+                // if let Some(workspace) = editor.workspace() {\n                     let project_abs_path = singleton_buffer.and_then(|buffer| {\n                         buffer.update(cx, |buffer, cx| {\n                             buffer.file().and_then(|file| {\n\n```\n\n\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -279,7 +279,7 @@\n                 let provider = cx.new(|_| {\n                     zeta::ZetaInlineCompletionProvider::new(\n                         zeta,\n-                        workspace.downgrade(),\n+                        edito,\n                         data_collection_choice,\n                         project_abs_path,\n                     )\n\n```\n\n### Input:\n```crates/zed/src/zed/inline_completion_registry.rs\n            |editor, _: &copilot::NextSuggestion, window: &mut Window, cx: &mut Context<Editor>| {\n<|editable_region_start|>\n                editor.next_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor,\n             _: &copilot::PreviousSuggestion,\n             window: &mut Window,\n             cx: &mut Context<Editor>| {\n                editor.previous_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor,\n             _: &editor::actions::AcceptPartialCopilotSuggestion,\n             window: &mut Window,\n             cx: &mut Context<Editor>| {\n                editor.accept_partial_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n}\n\nfn assign_inline_completion_provider(\n    editor: &mut Editor,\n    provider: InlineCompletionProvider,\n    client: &Arc<Client>,\n    user_store: Entity<UserStore>,\n    window: &mut Window,\n    cx: &mut Context<Editor>,\n) {\n    let singleton_buffer = editor.buffer().read(cx).as_singleton();\n\n    match provider {\n        InlineCompletionProvider::None => {}\n        InlineCompletionProvider::Copilot => {\n            if let Some(copilot) = Copilot::global(cx) {\n                if let Some(buffer) = singleton_buffer {\n                    if buffer.read(cx).file().is_some() {\n                        copilot.update(cx, |copilot, cx| {\n                            copilot.register_buffer(&buffer, cx);\n                        });\n                    }\n                }\n                let provider = cx.new(|_| CopilotCompletionProvider::new(copilot));\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n        InlineCompletionProvider::Supermaven => {\n            if let Some(supermaven) = Supermaven::global(cx) {\n                let provider = cx.new(|_| SupermavenCompletionProvider::new(supermaven));\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n        InlineCompletionProvider::Zed => {\n            if cx.has_flag::<PredictEditsFeatureFlag>()\n                || (cfg!(debug_assertions) && client.status().borrow().is_connected())\n            {\n                let zeta = zeta::Zeta::register(client.clone(), user_store, cx);\n                if let Some(buffer) = &singleton_buffer {\n                    if buffer.read(cx).file().is_some() {\n                        zeta.update(cx, |zeta, cx| {\n                            zeta.register_buffer(&buffer, cx);\n                        });\n                    }\n                }\n\n                // if let Some(workspace) = editor.workspace() {\n                let project_abs_path = singleton_buffer.and_then(|buffer| {\n                    buffer.update(cx, |buffer, cx| {\n                        buffer.file().and_then(|file| {\n                            workspace.update(cx, |workspace, cx| {\n                                workspace.absolute_path_of_worktree(file.worktree_id(cx), cx)\n                            })\n                        })\n                    })\n                });\n                let data_collection_choice = project_abs_path\n                    .as_ref()\n                    .map(|path| zeta.read(cx).data_collection_choice_at(path))\n                    .unwrap_or(zeta::DataCollectionChoice::NotAnswered);\n\n                let provider = cx.new(|_| {\n                    zeta::ZetaInlineCompletionProvider::new(\n                        zeta,\n                        edito<|user_cursor_is_here|>,\n                        data_collection_choice,\n                        project_abs_path,\n                    )\n                });\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n                // }\n            }\n        }\n    }\n}\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/zed/src/zed/inline_completion_registry.rs\n            |editor, _: &copilot::NextSuggestion, window: &mut Window, cx: &mut Context<Editor>| {\n<|editable_region_start|>\n                editor.next_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor,\n             _: &copilot::PreviousSuggestion,\n             window: &mut Window,\n             cx: &mut Context<Editor>| {\n                editor.previous_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n    editor\n        .register_action(cx.listener(\n            |editor,\n             _: &editor::actions::AcceptPartialCopilotSuggestion,\n             window: &mut Window,\n             cx: &mut Context<Editor>| {\n                editor.accept_partial_inline_completion(&Default::default(), window, cx);\n            },\n        ))\n        .detach();\n}\n\nfn assign_inline_completion_provider(\n    editor: &mut Editor,\n    provider: InlineCompletionProvider,\n    client: &Arc<Client>,\n    user_store: Entity<UserStore>,\n    window: &mut Window,\n    cx: &mut Context<Editor>,\n) {\n    let singleton_buffer = editor.buffer().read(cx).as_singleton();\n\n    match provider {\n        InlineCompletionProvider::None => {}\n        InlineCompletionProvider::Copilot => {\n            if let Some(copilot) = Copilot::global(cx) {\n                if let Some(buffer) = singleton_buffer {\n                    if buffer.read(cx).file().is_some() {\n                        copilot.update(cx, |copilot, cx| {\n                            copilot.register_buffer(&buffer, cx);\n                        });\n                    }\n                }\n                let provider = cx.new(|_| CopilotCompletionProvider::new(copilot));\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n        InlineCompletionProvider::Supermaven => {\n            if let Some(supermaven) = Supermaven::global(cx) {\n                let provider = cx.new(|_| SupermavenCompletionProvider::new(supermaven));\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n            }\n        }\n        InlineCompletionProvider::Zed => {\n            if cx.has_flag::<PredictEditsFeatureFlag>()\n                || (cfg!(debug_assertions) && client.status().borrow().is_connected())\n            {\n                let zeta = zeta::Zeta::register(client.clone(), user_store, cx);\n                if let Some(buffer) = &singleton_buffer {\n                    if buffer.read(cx).file().is_some() {\n                        zeta.update(cx, |zeta, cx| {\n                            zeta.register_buffer(&buffer, cx);\n                        });\n                    }\n                }\n\n                // if let Some(workspace) = editor.workspace() {\n                let project_abs_path = singleton_buffer.and_then(|buffer| {\n                    buffer.update(cx, |buffer, cx| {\n                        buffer.file().and_then(|file| {\n                            workspace.update(cx, |workspace, cx| {\n                                workspace.absolute_path_of_worktree(file.worktree_id(cx), cx)\n                            })\n                        })\n                    })\n                });\n                let data_collection_choice = project_abs_path\n                    .as_ref()\n                    .map(|path| zeta.read(cx).data_collection_choice_at(path))\n                    .unwrap_or(zeta::DataCollectionChoice::NotAnswered);\n\n                let provider = cx.new(|_| {\n                    zeta::ZetaInlineCompletionProvider::new(\n                        zeta,\n                        edito<|user_cursor_is_here|>,\n                        data_collection_choice,\n                        project_abs_path,\n                    )\n                });\n                editor.set_inline_completion_provider(Some(provider), window, cx);\n                // }\n            }\n        }\n    }\n}\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}