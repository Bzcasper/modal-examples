{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\n\n\n### Input:\n```til-posts/repeating-pattern-svg.mdx\n<|start_of_file|>\n<|editable_region_start|>\n<|user_cursor_is_here|>---\ntitle: \"Repeating Pattern with SVGs\"\ndate: \"2025-01-31\"\n---\n\nIt turns out that SVG has a built-in mechanism to build repeating patterns that virtually cost nothing performance-wise, and it is awesome. Check it out:\n\n<Code\n  variant=\"demo\"\n  language=\"html\"\n  code={`<svg width=\"690\" height=\"136\" xmlns=\"http://www.w3.org/2000/svg\">\n    <pattern id=\"tilePattern\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-axe\">\n        <path d=\"m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9\"/>\n        <path d=\"M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z\"/>\n      </svg>\n    </pattern>\n  <rect width=\"100%\" height=\"100%\" fill=\"url(#tilePattern)\" />\n</svg>`}\n>\n  <svg width=\"690\" height=\"136\" xmlns=\"http://www.w3.org/2000/svg\">\n      <pattern id=\"tilePattern\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-axe\">\n          <path d=\"m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9\"/>\n          <path d=\"M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z\"/>\n        </svg>\n      </pattern>\n    <rect width=\"100%\" height=\"100%\" fill=\"url(#tilePattern)\" />\n  </svg>\n</Code>\n\nIn both JavaScript and Rust (considering [GPUI](https:/gpui.rs)), a common approach would be to use an array and map/iterate over it to draw an arbitrary number of icons until the design looks good.\nWhile this is certainly a valid way to go, it has the obvious performance drawback of adding a large number of repeated elements to the render/DOM.\n\nSVG, however, has this functionality just there, built-in through the `pattern` tag. This tag can be passed as a URL in the `fill` attribute of the `<rect>` container, providing a much simpler solution.\nAnd if you combine that with a mask and linear gradient, you can create a super common fading-off pattern effect, without probably sacrificing virtually nothing in performance.\n\n<Code\n  variant=\"demo\"\n  language=\"html\"\ncode={`<svg width=\"690\" height=\"136\" xmlns=\"http://www.w3.org/2000/svg\">\n  <defs>\n      <pattern id=\"tilePattern\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-axe\">\n        <path d=\"m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9\"/>\n        <path d=\"M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z\"/>\n      </svg>\n    </pattern>\n    <linearGradient id=\"fade\" y2=\"1\" x2=\"0\">\n      <stop offset=\"0\" stop-color=\"white\" stop-opacity=\".24\"/>\n      <stop offset=\"1\" stop-color=\"white\" stop-opacity=\"0\"/>\n    </linearGradient>\n    <mask id=\"fadeMask\" maskContentUnits=\"objectBoundingBox\">\n      <rect width=\"1\" height=\"1\" fill=\"url(#fade)\"/>\n    </mask>\n  </defs>\n  <rect width=\"100%\" height=\"100%\" fill=\"url(#tilePattern)\" mask=\"url(#fadeMask)\"/>\n</svg>`}\n>\n<svg width=\"690\" height=\"136\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <pattern id=\"tilePattern\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-axe\">\n          <path d=\"m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9\"/>\n          <path d=\"M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z\"/>\n<|editable_region_end|>\n        </svg>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```til-posts/repeating-pattern-svg.mdx\n<|start_of_file|>\n<|editable_region_start|>\n<|user_cursor_is_here|>---\ntitle: \"Repeating Pattern with SVGs\"\ndate: \"2025-01-31\"\n---\n\nIt turns out that SVG has a built-in mechanism to build repeating patterns that virtually cost nothing performance-wise, and it is awesome. Check it out:\n\n<Code\n  variant=\"demo\"\n  language=\"html\"\n  code={`<svg width=\"690\" height=\"136\" xmlns=\"http://www.w3.org/2000/svg\">\n    <pattern id=\"tilePattern\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-axe\">\n        <path d=\"m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9\"/>\n        <path d=\"M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z\"/>\n      </svg>\n    </pattern>\n  <rect width=\"100%\" height=\"100%\" fill=\"url(#tilePattern)\" />\n</svg>`}\n>\n  <svg width=\"690\" height=\"136\" xmlns=\"http://www.w3.org/2000/svg\">\n      <pattern id=\"tilePattern\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-axe\">\n          <path d=\"m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9\"/>\n          <path d=\"M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z\"/>\n        </svg>\n      </pattern>\n    <rect width=\"100%\" height=\"100%\" fill=\"url(#tilePattern)\" />\n  </svg>\n</Code>\n\nIn both JavaScript and Rust (considering [GPUI](https:/gpui.rs)), a common approach would be to use an array and map/iterate over it to draw an arbitrary number of icons until the design looks good.\nWhile this is certainly a valid way to go, it has the obvious performance drawback of adding a large number of repeated elements to the render/DOM.\n\nSVG, however, has this functionality just there, built-in through the `pattern` tag. This tag can be passed as a URL in the `fill` attribute of the `<rect>` container, providing a much simpler solution.\nAnd if you combine that with a mask and linear gradient, you can create a super common fading-off pattern effect, without probably sacrificing virtually nothing in performance.\n\n<Code\n  variant=\"demo\"\n  language=\"html\"\ncode={`<svg width=\"690\" height=\"136\" xmlns=\"http://www.w3.org/2000/svg\">\n  <defs>\n      <pattern id=\"tilePattern\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-axe\">\n        <path d=\"m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9\"/>\n        <path d=\"M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z\"/>\n      </svg>\n    </pattern>\n    <linearGradient id=\"fade\" y2=\"1\" x2=\"0\">\n      <stop offset=\"0\" stop-color=\"white\" stop-opacity=\".24\"/>\n      <stop offset=\"1\" stop-color=\"white\" stop-opacity=\"0\"/>\n    </linearGradient>\n    <mask id=\"fadeMask\" maskContentUnits=\"objectBoundingBox\">\n      <rect width=\"1\" height=\"1\" fill=\"url(#fade)\"/>\n    </mask>\n  </defs>\n  <rect width=\"100%\" height=\"100%\" fill=\"url(#tilePattern)\" mask=\"url(#fadeMask)\"/>\n</svg>`}\n>\n<svg width=\"690\" height=\"136\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <pattern id=\"tilePattern\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-axe\">\n          <path d=\"m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9\"/>\n          <path d=\"M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z\"/>\n<|editable_region_end|>\n        </svg>\n```"
  },
  "max_tokens": 1024
}