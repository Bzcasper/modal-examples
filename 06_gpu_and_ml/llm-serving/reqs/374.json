{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1411,7 +1411,7 @@\n \n pub struct ZetaInlineCompletionProvider {\n     zeta: Entity<Zeta>,\n-    // workspace: WeakEntity<Workspace>,\n+    workspace: WeakEntity<Workspace>,\n     pending_completions: ArrayVec<PendingCompletion, 2>,\n     next_pending_completion_id: usize,\n     current_completion: Option<CurrentInlineCompletion>,\n@@ -1424,7 +1424,7 @@\n \n     pub fn new(\n         zeta: Entity<Zeta>,\n-        // workspace: WeakEntity<Workspace>,\n+        workspace: WeakEntity<Workspace>,\n         data_collection_choice: DataCollectionChoice,\n         project_abs_path: Option<PathBuf>,\n     ) -> Self {\n\n```\n\n\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -285,6 +285,8 @@\n                         )\n                     });\n                     editor.set_inline_completion_provider(Some(provider), window, cx);\n+                } else {\n+                    println!(\"No workspace!\");\n                 }\n             }\n         }\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -285,8 +285,6 @@\n                         )\n                     });\n                     editor.set_inline_completion_provider(Some(provider), window, cx);\n-                } else {\n-                    println!(\"No workspace!\");\n                 }\n             }\n         }\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -260,6 +260,8 @@\n                         });\n                     }\n                 }\n+                \n+                cx.defer\n \n                 if let Some(workspace) = editor.workspace() {\n                     let project_abs_path = singleton_buffer.and_then(|buffer| {\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -260,8 +260,6 @@\n                         });\n                     }\n                 }\n-                \n-                cx.defer\n \n                 if let Some(workspace) = editor.workspace() {\n                     let project_abs_path = singleton_buffer.and_then(|buffer| {\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -39,6 +39,9 @@\n                 }\n             })\n             .detach();\n+            \n+            window.\n+            \n             editors\n                 .borrow_mut()\n                 .insert(editor_handle, window.window_handle());\n\n```\n\n\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -40,7 +40,7 @@\n             })\n             .detach();\n             \n-            window.\n+            window.root\n             \n             editors\n                 .borrow_mut()\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -40,7 +40,7 @@\n             })\n             .detach();\n             \n-            window.root\n+            window.root().vi\n             \n             editors\n                 .borrow_mut()\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -40,7 +40,7 @@\n             })\n             .detach();\n             \n-            window.root().vi\n+            window.root::<Workspace>().\n             \n             editors\n                 .borrow_mut()\n\n```\n\n### Input:\n```crates/zed/src/zed/inline_completion_registry.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse std::{cell::RefCell, rc::Rc, sync::Arc};\n\nuse client::{Client, UserStore};\nuse collections::HashMap;\nuse copilot::{Copilot, CopilotCompletionProvider};\nuse editor::{Editor, EditorMode};\nuse feature_flags::{FeatureFlagAppExt, PredictEditsFeatureFlag};\nuse fs::Fs;\nuse gpui::{AnyWindowHandle, App, AppContext, Context, Entity, WeakEntity};\nuse language::language_settings::{all_language_settings, InlineCompletionProvider};\nuse settings::SettingsStore;\nuse supermaven::{Supermaven, SupermavenCompletionProvider};\nuse ui::Window;\nuse zed_predict_onboarding::ZedPredictModal;\n\npub fn init(client: Arc<Client>, user_store: Entity<UserStore>, fs: Arc<dyn Fs>, cx: &mut App) {\n    let editors: Rc<RefCell<HashMap<WeakEntity<Editor>, AnyWindowHandle>>> = Rc::default();\n    cx.observe_new({\n        let editors = editors.clone();\n        let client = client.clone();\n        let user_store = user_store.clone();\n        move |editor: &mut Editor, window, cx: &mut Context<Editor>| {\n            if editor.mode() != EditorMode::Full {\n                return;\n            }\n\n            register_backward_compatible_actions(editor, cx);\n\n            let Some(window) = window else {\n                return;\n            };\n\n            let editor_handle = cx.entity().downgrade();\n            cx.on_release({\n                let editor_handle = editor_handle.clone();\n                let editors = editors.clone();\n                move |_, _| {\n                    editors.borrow_mut().remove(&editor_handle);\n                }\n            })\n            .detach();\n            \n            window.root::<Workspace>().<|user_cursor_is_here|>\n            \n            editors\n                .borrow_mut()\n                .insert(editor_handle, window.window_handle());\n            let provider = all_language_settings(None, cx).inline_completions.provider;\n            assign_inline_completion_provider(\n                editor,\n                provider,\n                &client,\n                user_store.clone(),\n                window,\n                cx,\n            );\n        }\n    })\n    .detach();\n\n    let mut provider = all_language_settings(None, cx).inline_completions.provider;\n    for (editor, window) in editors.borrow().iter() {\n        _ = window.update(cx, |_window, window, cx| {\n            _ = editor.update(cx, |editor, cx| {\n                assign_inline_completion_provider(\n                    editor,\n                    provider,\n                    &client,\n                    user_store.clone(),\n                    window,\n                    cx,\n                );\n            })\n        });\n    }\n\n    if cx.has_flag::<PredictEditsFeatureFlag>() {\n        cx.on_action(clear_zeta_edit_history);\n    }\n\n    cx.observe_flag::<PredictEditsFeatureFlag, _>({\n        let editors = editors.clone();\n        let client = client.clone();\n        let user_store = user_store.clone();\n        move |active, cx| {\n            let provider = all_language_settings(None, cx).inline_completions.provider;\n            assign_inline_completion_providers(&editors, provider, &client, user_store.clone(), cx);\n            if active && !cx.is_action_available(&zeta::ClearHistory) {\n                cx.on_action(clear_zeta_edit_history);\n            }\n        }\n    })\n    .detach();\n\n    cx.observe_global::<SettingsStore>({\n        let editors = editors.clone();\n        let client = client.clone();\n        let user_store = user_store.clone();\n        let fs = fs.clone();\n        move |cx| {\n            let new_provider = all_language_settings(None, cx).inline_completions.provider;\n            if new_provider != provider {\n                provider = new_provider;\n                assign_inline_completion_providers(\n                    &editors,\n                    provider,\n                    &client,\n                    user_store.clone(),\n                    cx,\n                );\n\n                if !user_store\n                    .read(cx)\n                    .current_user_has_accepted_terms()\n<|editable_region_end|>\n                    .read(cx)\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/zed/src/zed/inline_completion_registry.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse std::{cell::RefCell, rc::Rc, sync::Arc};\n\nuse client::{Client, UserStore};\nuse collections::HashMap;\nuse copilot::{Copilot, CopilotCompletionProvider};\nuse editor::{Editor, EditorMode};\nuse feature_flags::{FeatureFlagAppExt, PredictEditsFeatureFlag};\nuse fs::Fs;\nuse gpui::{AnyWindowHandle, App, AppContext, Context, Entity, WeakEntity};\nuse language::language_settings::{all_language_settings, InlineCompletionProvider};\nuse settings::SettingsStore;\nuse supermaven::{Supermaven, SupermavenCompletionProvider};\nuse ui::Window;\nuse zed_predict_onboarding::ZedPredictModal;\n\npub fn init(client: Arc<Client>, user_store: Entity<UserStore>, fs: Arc<dyn Fs>, cx: &mut App) {\n    let editors: Rc<RefCell<HashMap<WeakEntity<Editor>, AnyWindowHandle>>> = Rc::default();\n    cx.observe_new({\n        let editors = editors.clone();\n        let client = client.clone();\n        let user_store = user_store.clone();\n        move |editor: &mut Editor, window, cx: &mut Context<Editor>| {\n            if editor.mode() != EditorMode::Full {\n                return;\n            }\n\n            register_backward_compatible_actions(editor, cx);\n\n            let Some(window) = window else {\n                return;\n            };\n\n            let editor_handle = cx.entity().downgrade();\n            cx.on_release({\n                let editor_handle = editor_handle.clone();\n                let editors = editors.clone();\n                move |_, _| {\n                    editors.borrow_mut().remove(&editor_handle);\n                }\n            })\n            .detach();\n            \n            window.root::<Workspace>().<|user_cursor_is_here|>\n            \n            editors\n                .borrow_mut()\n                .insert(editor_handle, window.window_handle());\n            let provider = all_language_settings(None, cx).inline_completions.provider;\n            assign_inline_completion_provider(\n                editor,\n                provider,\n                &client,\n                user_store.clone(),\n                window,\n                cx,\n            );\n        }\n    })\n    .detach();\n\n    let mut provider = all_language_settings(None, cx).inline_completions.provider;\n    for (editor, window) in editors.borrow().iter() {\n        _ = window.update(cx, |_window, window, cx| {\n            _ = editor.update(cx, |editor, cx| {\n                assign_inline_completion_provider(\n                    editor,\n                    provider,\n                    &client,\n                    user_store.clone(),\n                    window,\n                    cx,\n                );\n            })\n        });\n    }\n\n    if cx.has_flag::<PredictEditsFeatureFlag>() {\n        cx.on_action(clear_zeta_edit_history);\n    }\n\n    cx.observe_flag::<PredictEditsFeatureFlag, _>({\n        let editors = editors.clone();\n        let client = client.clone();\n        let user_store = user_store.clone();\n        move |active, cx| {\n            let provider = all_language_settings(None, cx).inline_completions.provider;\n            assign_inline_completion_providers(&editors, provider, &client, user_store.clone(), cx);\n            if active && !cx.is_action_available(&zeta::ClearHistory) {\n                cx.on_action(clear_zeta_edit_history);\n            }\n        }\n    })\n    .detach();\n\n    cx.observe_global::<SettingsStore>({\n        let editors = editors.clone();\n        let client = client.clone();\n        let user_store = user_store.clone();\n        let fs = fs.clone();\n        move |cx| {\n            let new_provider = all_language_settings(None, cx).inline_completions.provider;\n            if new_provider != provider {\n                provider = new_provider;\n                assign_inline_completion_providers(\n                    &editors,\n                    provider,\n                    &client,\n                    user_store.clone(),\n                    cx,\n                );\n\n                if !user_store\n                    .read(cx)\n                    .current_user_has_accepted_terms()\n<|editable_region_end|>\n                    .read(cx)\n```"
  },
  "max_tokens": 1024
}