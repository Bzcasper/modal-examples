{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -21,15 +21,13 @@\n use std::{path::Path, sync::Arc, time::Duration};\n use supermaven::{AccountStatus, Supermaven};\n use ui::{\n-    prelude::*, ButtonLike, Color, ContextMenuEntry, IconWithIndicator, Indicator,\n-    PopoverMenuHandle,\n+    prelude::*, ButtonCommon, ButtonLike, Clickable, Color, ContextMenu, ContextMenuEntry,\n+    IconButton, IconName, IconSize, IconWithIndicator, Indicator, PopoverMenu, PopoverMenuHandle,\n+    Tooltip,\n };\n use workspace::{\n-    create_and_open_local_file,\n-    item::ItemHandle,\n-    notifications::NotificationId,\n-\n-    StatusItemView, Toast, Workspace,\n+    create_and_open_local_file, item::ItemHandle, notifications::NotificationId, StatusItemView,\n+    Toast, Workspace,\n };\n use zed_actions::OpenBrowser;\n use zed_predict_onboarding::ZedPredictModal;\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -443,7 +443,7 @@\n             move |_, cx| toggle_inline_completions_globally(fs.clone(), cx),\n         );\n \n-        if let Some(provider) = &self.inline_completion_provider {\n+        if let Some(provider) = &self.inline_completion_provider.as_mut() {\n             let data_collection = provider.data_collection_state(cx);\n             if data_collection.is_supported() {\n                 let mut provider = provider.clone();\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -22,7 +22,7 @@\n use supermaven::{AccountStatus, Supermaven};\n use ui::{\n     prelude::*, ButtonCommon, ButtonLike, Clickable, Color, ContextMenu, ContextMenuEntry,\n-    IconButton, IconName, IconSize, IconWithIndicator, Indicator, PopoverMenu, PopoverMenuHandle,\n+    IconButton, IconName,  IconWithIndicator, Indicator, PopoverMenu, PopoverMenuHandle,\n     Tooltip,\n };\n use workspace::{\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -443,7 +443,7 @@\n             move |_, cx| toggle_inline_completions_globally(fs.clone(), cx),\n         );\n \n-        if let Some(provider) = &self.inline_completion_provider.as_mut() {\n+        if let Some(provider) = &self.inline_completion_provider {\n             let data_collection = provider.data_collection_state(cx);\n             if data_collection.is_supported() {\n                 let mut provider = provider.clone();\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -22,8 +22,7 @@\n use supermaven::{AccountStatus, Supermaven};\n use ui::{\n     prelude::*, ButtonCommon, ButtonLike, Clickable, Color, ContextMenu, ContextMenuEntry,\n-    IconButton, IconName,  IconWithIndicator, Indicator, PopoverMenu, PopoverMenuHandle,\n-    Tooltip,\n+    IconButton, IconName, IconWithIndicator, Indicator, PopoverMenu, PopoverMenuHandle, Tooltip,\n };\n use workspace::{\n     create_and_open_local_file, item::ItemHandle, notifications::NotificationId, StatusItemView,\n\n```\n\n\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -449,7 +449,9 @@\n                     ContextMenuEntry::new(\"Data Collection\")\n                         .toggleable(IconPosition::Start, data_collection.is_enabled())\n                         .disabled(data_collection.is_unknown())\n-                        .handler(move |_, cx| {}),\n+                        .handler(move |_, cx| {\n+                            \n+                        }),\n                 );\n             }\n         }\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -21,7 +21,7 @@\n use std::{path::Path, sync::Arc, time::Duration};\n use supermaven::{AccountStatus, Supermaven};\n use ui::{\n-    prelude::*, ButtonLike, Clickable, Color, ContextMenu, ContextMenuEntry, IconButton, IconName,\n+    prelude::*, ButtonLike, Clickable, Color, ContextMenu, ContextMenuEntry, IconButton, \n     IconWithIndicator, Indicator, PopoverMenu, PopoverMenuHandle, Tooltip,\n };\n use workspace::{\n\n```\n\n### Input:\n```crates/inline_completion_button/src/inline_completion_button.rs\n        fs: Arc<dyn Fs>,\n<|editable_region_start|>\n        user_store: Entity<UserStore>,\n        client: Arc<Client>,\n        popover_menu_handle: PopoverMenuHandle<ContextMenu>,\n        cx: &mut Context<Self>,\n    ) -> Self {\n        if let Some(copilot) = Copilot::global(cx) {\n            cx.observe(&copilot, |_, _, cx| cx.notify()).detach()\n        }\n\n        cx.observe_global::<SettingsStore>(move |_, cx| cx.notify())\n            .detach();\n\n        Self {\n            editor_subscription: None,\n            editor_enabled: None,\n            editor_focus_handle: None,\n            language: None,\n            file: None,\n            inline_completion_provider: None,\n            popover_menu_handle,\n            workspace,\n            client,\n            fs,\n            user_store,\n        }\n    }\n\n    pub fn build_copilot_start_menu(\n        &mut self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Entity<ContextMenu> {\n        let fs = self.fs.clone();\n        ContextMenu::build(window, cx, |menu, _, _| {\n            menu.entry(\"Sign In\", None, copilot::initiate_sign_in)\n                .entry(\"Disable Copilot\", None, {\n                    let fs = fs.clone();\n                    move |_window, cx| hide_copilot(fs.clone(), cx)\n                })\n                .entry(\"Use Supermaven\", None, {\n                    let fs = fs.clone();\n                    move |_window, cx| {\n                        set_completion_provider(\n                            fs.clone(),\n                            cx,\n                            InlineCompletionProvider::Supermaven,\n                        )\n                    }\n                })\n        })\n    }\n\n    // Predict Edits at Cursor – alt-tab\n    // Automatically Predict:\n    // ✓ PATH\n    // ✓ Rust\n    // ✓ All Files\n    pub fn build_language_settings_menu(&self, mut menu: ContextMenu, cx: &mut Contex<|user_cursor_is_here|>) -> ContextMenu {\n        let fs = self.fs.clone();\n\n        menu = menu.header(\"Predict Edits For:\");\n\n        if let Some(language) = self.language.clone() {\n            let fs = fs.clone();\n            let language_enabled =\n                language_settings::language_settings(Some(language.name()), None, cx)\n                    .show_inline_completions;\n\n            menu = menu.toggleable_entry(\n                language.name(),\n                language_enabled,\n                IconPosition::Start,\n                None,\n                move |_, cx| {\n                    toggle_inline_completions_for_language(language.clone(), fs.clone(), cx)\n                },\n            );\n        }\n\n        let settings = AllLanguageSettings::get_global(cx);\n        if let Some(file) = &self.file {\n            let path = file.path().clone();\n            let path_enabled = settings.inline_completions_enabled_for_path(&path);\n\n            menu = menu.toggleable_entry(\n                \"This File\",\n                path_enabled,\n                IconPosition::Start,\n                None,\n                move |window, cx| {\n                    if let Some(workspace) = window.root().flatten() {\n                        let workspace = workspace.downgrade();\n                        window\n                            .spawn(cx, |cx| {\n                                configure_disabled_globs(\n                                    workspace,\n                                    path_enabled.then_some(path.clone()),\n                                    cx,\n                                )\n                            })\n                            .detach_and_log_err(cx);\n                    }\n                },\n            );\n        }\n\n        let globally_enabled = settings.inline_completions_enabled(None, None, cx);\n        menu = menu.toggleable_entry(\n            \"All Files\",\n            globally_enabled,\n            IconPosition::Start,\n            None,\n            move |_, cx| toggle_inline_completions_globally(fs.clone(), cx),\n        );\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/inline_completion_button/src/inline_completion_button.rs\n        fs: Arc<dyn Fs>,\n<|editable_region_start|>\n        user_store: Entity<UserStore>,\n        client: Arc<Client>,\n        popover_menu_handle: PopoverMenuHandle<ContextMenu>,\n        cx: &mut Context<Self>,\n    ) -> Self {\n        if let Some(copilot) = Copilot::global(cx) {\n            cx.observe(&copilot, |_, _, cx| cx.notify()).detach()\n        }\n\n        cx.observe_global::<SettingsStore>(move |_, cx| cx.notify())\n            .detach();\n\n        Self {\n            editor_subscription: None,\n            editor_enabled: None,\n            editor_focus_handle: None,\n            language: None,\n            file: None,\n            inline_completion_provider: None,\n            popover_menu_handle,\n            workspace,\n            client,\n            fs,\n            user_store,\n        }\n    }\n\n    pub fn build_copilot_start_menu(\n        &mut self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Entity<ContextMenu> {\n        let fs = self.fs.clone();\n        ContextMenu::build(window, cx, |menu, _, _| {\n            menu.entry(\"Sign In\", None, copilot::initiate_sign_in)\n                .entry(\"Disable Copilot\", None, {\n                    let fs = fs.clone();\n                    move |_window, cx| hide_copilot(fs.clone(), cx)\n                })\n                .entry(\"Use Supermaven\", None, {\n                    let fs = fs.clone();\n                    move |_window, cx| {\n                        set_completion_provider(\n                            fs.clone(),\n                            cx,\n                            InlineCompletionProvider::Supermaven,\n                        )\n                    }\n                })\n        })\n    }\n\n    // Predict Edits at Cursor – alt-tab\n    // Automatically Predict:\n    // ✓ PATH\n    // ✓ Rust\n    // ✓ All Files\n    pub fn build_language_settings_menu(&self, mut menu: ContextMenu, cx: &mut Contex<|user_cursor_is_here|>) -> ContextMenu {\n        let fs = self.fs.clone();\n\n        menu = menu.header(\"Predict Edits For:\");\n\n        if let Some(language) = self.language.clone() {\n            let fs = fs.clone();\n            let language_enabled =\n                language_settings::language_settings(Some(language.name()), None, cx)\n                    .show_inline_completions;\n\n            menu = menu.toggleable_entry(\n                language.name(),\n                language_enabled,\n                IconPosition::Start,\n                None,\n                move |_, cx| {\n                    toggle_inline_completions_for_language(language.clone(), fs.clone(), cx)\n                },\n            );\n        }\n\n        let settings = AllLanguageSettings::get_global(cx);\n        if let Some(file) = &self.file {\n            let path = file.path().clone();\n            let path_enabled = settings.inline_completions_enabled_for_path(&path);\n\n            menu = menu.toggleable_entry(\n                \"This File\",\n                path_enabled,\n                IconPosition::Start,\n                None,\n                move |window, cx| {\n                    if let Some(workspace) = window.root().flatten() {\n                        let workspace = workspace.downgrade();\n                        window\n                            .spawn(cx, |cx| {\n                                configure_disabled_globs(\n                                    workspace,\n                                    path_enabled.then_some(path.clone()),\n                                    cx,\n                                )\n                            })\n                            .detach_and_log_err(cx);\n                    }\n                },\n            );\n        }\n\n        let globally_enabled = settings.inline_completions_enabled(None, None, cx);\n        menu = menu.toggleable_entry(\n            \"All Files\",\n            globally_enabled,\n            IconPosition::Start,\n            None,\n            move |_, cx| toggle_inline_completions_globally(fs.clone(), cx),\n        );\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}