{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"assets/keymaps/default-macos.json\":\n```diff\n@@ -505,7 +505,7 @@\n       \"cmd-shift-e\": \"project_panel::ToggleFocus\",\n       \"cmd-shift-b\": \"outline_panel::ToggleFocus\",\n       \"ctrl-shift-g\": \"git_panel::ToggleFocus\",\n-      \"cmd-?\": \"assistant::ToggleFocus\",\n+      \"cmd-i\": \"assistant::ToggleFocus\",\n       \"cmd-alt-s\": \"workspace::SaveAll\",\n       \"cmd-k m\": \"language_selector::Toggle\",\n       \"escape\": \"workspace::Unfollow\",\n\n```\n\nUser edited \"\":\n```diff\n@@ -35,6 +35,10 @@\n       ]\n     }\n   ],\n+  \"project_panel\": {\n+      \"folder_icons\": false\n+    },\n+\n   \"inline_completions\": {\n     \"disabled_globs\": [\".env\"]\n   },\n\n```\n\nUser edited \"\":\n```diff\n@@ -36,8 +36,8 @@\n     }\n   ],\n   \"project_panel\": {\n-      \"folder_icons\": false\n-    },\n+    \"folder_icons\": false\n+  },\n \n   \"inline_completions\": {\n     \"disabled_globs\": [\".env\"]\n\n```\n\nUser edited \"\":\n```diff\n@@ -3,7 +3,8 @@\n     \"context\": \"Workspace\",\n     \"bindings\": {\n       \"alt-\\\\\": null,\n-      \"ctrl-c\": \"menu::Cancel\"\n+      \"ctrl-c\": \"menu::Cancel\",\n+      \"alt-cmd-o\": [\"projects::OpenRecent\", {\"create_new_window\": true }], \n     }\n   },\n   {\n\n```\n\nUser edited \"\":\n```diff\n@@ -4,7 +4,7 @@\n     \"bindings\": {\n       \"alt-\\\\\": null,\n       \"ctrl-c\": \"menu::Cancel\",\n-      \"alt-cmd-o\": [\"projects::OpenRecent\", {\"create_new_window\": true }], \n+      \"alt-cmd-o\": [\"projects::OpenRecent\", { \"create_new_window\": true }]\n     }\n   },\n   {\n\n```\n\nUser edited \"crates/editor/src/editor.rs\":\n```diff\n@@ -2745,7 +2745,7 @@\n                 if let Some(bracket_pair) = bracket_pair {\n                     let snapshot_settings = snapshot.settings_at(selection.start, cx);\n                     let autoclose = self.use_autoclose && snapshot_settings.use_autoclose;\n-                    let auto_surround =\n+                    let (auto_surround) =\n                         self.use_auto_surround && snapshot_settings.use_auto_surround;\n                     if selection.is_empty() {\n                         if is_bracket_pair_start {\n\n```\n\n### Input:\n```crates/editor/src/editor.rs\n                    // `text` can be empty when a user is using IME (e.g. Chinese Wubi Simplified)\n<|editable_region_start|>\n                    //  and they are removing the character that triggered IME popup.\n                    for (pair, enabled) in scope.brackets() {\n                        if !pair.close && !pair.surround {\n                            continue;\n                        }\n\n                        if enabled && pair.start.ends_with(text.as_ref()) {\n                            let prefix_len = pair.start.len() - text.len();\n                            let preceding_text_matches_prefix = prefix_len == 0\n                                || (selection.start.column >= (prefix_len as u32)\n                                    && snapshot.contains_str_at(\n                                        Point::new(\n                                            selection.start.row,\n                                            selection.start.column - (prefix_len as u32),\n                                        ),\n                                        &pair.start[..prefix_len],\n                                    ));\n                            if preceding_text_matches_prefix {\n                                bracket_pair = Some(pair.clone());\n                                is_bracket_pair_start = true;\n                                break;\n                            }\n                        }\n                        if pair.end.as_str() == text.as_ref() {\n                            bracket_pair = Some(pair.clone());\n                            is_bracket_pair_end = true;\n                            break;\n                        }\n                    }\n                }\n\n                if let Some(bracket_pair) = bracket_pair {\n                    let snapshot_settings = snapshot.settings_at(selection.start, cx);\n                    let autoclose = self.use_autoclose && snapshot_settings.use_autoclose;\n                    let (auto_surround<|user_cursor_is_here|>) =\n                        self.use_auto_surround && snapshot_settings.use_auto_surround;\n                    if selection.is_empty() {\n                        if is_bracket_pair_start {\n                            // If the inserted text is a suffix of an opening bracket and the\n                            // selection is preceded by the rest of the opening bracket, then\n                            // insert the closing bracket.\n                            let following_text_allows_autoclose = snapshot\n                                .chars_at(selection.start)\n                                .next()\n                                .map_or(true, |c| scope.should_autoclose_before(c));\n\n                            let is_closing_quote = if bracket_pair.end == bracket_pair.start\n                                && bracket_pair.start.len() == 1\n                            {\n                                let target = bracket_pair.start.chars().next().unwrap();\n                                let current_line_count = snapshot\n                                    .reversed_chars_at(selection.start)\n                                    .take_while(|&c| c != '\\n')\n                                    .filter(|&c| c == target)\n                                    .count();\n                                current_line_count % 2 == 1\n                            } else {\n                                false\n                            };\n\n                            if autoclose\n                                && bracket_pair.close\n                                && following_text_allows_autoclose\n                                && !is_closing_quote\n                            {\n                                let anchor = snapshot.anchor_before(selection.end);\n                                new_selections.push((selection.map(|_| anchor), text.len()));\n                                new_autoclose_regions.push((\n                                    anchor,\n                                    text.len(),\n                                    selection.id,\n<|editable_region_end|>\n                                    text.len(),\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/editor/src/editor.rs\n                    // `text` can be empty when a user is using IME (e.g. Chinese Wubi Simplified)\n<|editable_region_start|>\n                    //  and they are removing the character that triggered IME popup.\n                    for (pair, enabled) in scope.brackets() {\n                        if !pair.close && !pair.surround {\n                            continue;\n                        }\n\n                        if enabled && pair.start.ends_with(text.as_ref()) {\n                            let prefix_len = pair.start.len() - text.len();\n                            let preceding_text_matches_prefix = prefix_len == 0\n                                || (selection.start.column >= (prefix_len as u32)\n                                    && snapshot.contains_str_at(\n                                        Point::new(\n                                            selection.start.row,\n                                            selection.start.column - (prefix_len as u32),\n                                        ),\n                                        &pair.start[..prefix_len],\n                                    ));\n                            if preceding_text_matches_prefix {\n                                bracket_pair = Some(pair.clone());\n                                is_bracket_pair_start = true;\n                                break;\n                            }\n                        }\n                        if pair.end.as_str() == text.as_ref() {\n                            bracket_pair = Some(pair.clone());\n                            is_bracket_pair_end = true;\n                            break;\n                        }\n                    }\n                }\n\n                if let Some(bracket_pair) = bracket_pair {\n                    let snapshot_settings = snapshot.settings_at(selection.start, cx);\n                    let autoclose = self.use_autoclose && snapshot_settings.use_autoclose;\n                    let (auto_surround<|user_cursor_is_here|>) =\n                        self.use_auto_surround && snapshot_settings.use_auto_surround;\n                    if selection.is_empty() {\n                        if is_bracket_pair_start {\n                            // If the inserted text is a suffix of an opening bracket and the\n                            // selection is preceded by the rest of the opening bracket, then\n                            // insert the closing bracket.\n                            let following_text_allows_autoclose = snapshot\n                                .chars_at(selection.start)\n                                .next()\n                                .map_or(true, |c| scope.should_autoclose_before(c));\n\n                            let is_closing_quote = if bracket_pair.end == bracket_pair.start\n                                && bracket_pair.start.len() == 1\n                            {\n                                let target = bracket_pair.start.chars().next().unwrap();\n                                let current_line_count = snapshot\n                                    .reversed_chars_at(selection.start)\n                                    .take_while(|&c| c != '\\n')\n                                    .filter(|&c| c == target)\n                                    .count();\n                                current_line_count % 2 == 1\n                            } else {\n                                false\n                            };\n\n                            if autoclose\n                                && bracket_pair.close\n                                && following_text_allows_autoclose\n                                && !is_closing_quote\n                            {\n                                let anchor = snapshot.anchor_before(selection.end);\n                                new_selections.push((selection.map(|_| anchor), text.len()));\n                                new_autoclose_regions.push((\n                                    anchor,\n                                    text.len(),\n                                    selection.id,\n<|editable_region_end|>\n                                    text.len(),\n```"
  },
  "max_tokens": 1024
}