{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"untitled\":\n```diff\n@@ -84,6 +84,7 @@\n - [ ] Linux not:x11,wayland (159)     https://github.com/zed-industries/zed/issues?q=is%3Aopen%20-label%3Alinux-wayland%20-label%3Alinux-x11%20label%3Alinux%20no%3Atype%20%20%20\n - [ ] AI (168)                        https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3Aai%20no%3Atype\n - [ ] [joseph] Panics: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22 (65 -> )\n+- [ ] [joseph] https://github.com/zed-industries/zed/issues?q=state%3Aopen%20label%3A%22awaiting%20info%22\n - \n \n ### \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -83,7 +83,7 @@\n - [ ] Linux-wayland (64)              https://github.com/zed-industries/zed/issues?q=is%3Aopen%20label%3Alinux-wayland%20no%3Atype%20%20\n - [ ] Linux not:x11,wayland (159)     https://github.com/zed-industries/zed/issues?q=is%3Aopen%20-label%3Alinux-wayland%20-label%3Alinux-x11%20label%3Alinux%20no%3Atype%20%20%20\n - [ ] AI (168)                        https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3Aai%20no%3Atype\n-- [ ] [joseph] Panics: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22 (65 -> )\n+- [joseph] Panics: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22 (65 -> )\n - [ ] [joseph] https://github.com/zed-industries/zed/issues?q=state%3Aopen%20label%3A%22awaiting%20info%22\n - \n \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -84,7 +84,7 @@\n - [ ] Linux not:x11,wayland (159)     https://github.com/zed-industries/zed/issues?q=is%3Aopen%20-label%3Alinux-wayland%20-label%3Alinux-x11%20label%3Alinux%20no%3Atype%20%20%20\n - [ ] AI (168)                        https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3Aai%20no%3Atype\n - [joseph] Panics: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22 (65 -> )\n-- [ ] [joseph] https://github.com/zed-industries/zed/issues?q=state%3Aopen%20label%3A%22awaiting%20info%22\n+- [joseph] https://github.com/zed-industries/zed/issues?q=state%3Aopen%20label%3A%22awaiting%20info%22\n - \n \n ### \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -84,7 +84,7 @@\n - [ ] Linux not:x11,wayland (159)     https://github.com/zed-industries/zed/issues?q=is%3Aopen%20-label%3Alinux-wayland%20-label%3Alinux-x11%20label%3Alinux%20no%3Atype%20%20%20\n - [ ] AI (168)                        https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3Aai%20no%3Atype\n - [joseph] Panics: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22 (65 -> )\n-- [joseph] https://github.com/zed-industries/zed/issues?q=state%3Aopen%20label%3A%22awaiting%20info%22\n+- [joseph] awaiting-info issues: https://github.com/zed-industries/zed/issues?q=state%3Aopen%20label%3A%22awaiting%20info%22\n - \n \n ### \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -84,7 +84,7 @@\n - [ ] Linux not:x11,wayland (159)     https://github.com/zed-industries/zed/issues?q=is%3Aopen%20-label%3Alinux-wayland%20-label%3Alinux-x11%20label%3Alinux%20no%3Atype%20%20%20\n - [ ] AI (168)                        https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3Aai%20no%3Atype\n - [joseph] Panics: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22 (65 -> )\n-- [joseph] awaiting-info issues: https://github.com/zed-industries/zed/issues?q=state%3Aopen%20label%3A%22awaiting%20info%22\n+- [joseph] awaiting-info issues: https://github.com/zed-industries/zed/issues?q=state%3Aopen%20label%3A%22awaiting%20info%22 \n - \n \n ### \n\n```\n\n### Input:\n```crates/assistant_context_editor/src/context_history.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse std::sync::Arc;\n\nuse gpui::{App, Entity, EventEmitter, FocusHandle, Focusable, Subscription, Task, WeakEntity};\nuse picker::{Picker, PickerDelegate};\nuse project::Project;\nuse ui::utils::{format_distance_from_now, DateTimeType};\nuse ui::{prelude::*, Avatar, ListItem, ListItemSpacing};\nuse workspace::{Item, Workspace};\n\nuse crate::{\n    AssistantPanelDelegate, ContextStore, RemoteContextMetadata, SavedContextMetadata,\n    DEFAULT_TAB_TITLE,\n};\n\n#[derive(Clone)]\npub enum ContextMetadata {\n    Remote(RemoteContextMetadata),\n    Saved(SavedContextMetadata),\n}\n\nenum SavedContextPickerEvent {\n    Confirmed(ContextMetadata),\n}\n\npub struct ContextHistory {\n    picker: Entity<Picker<SavedContextPickerDelegate>>,\n    _subscriptions: Vec<Subscription>,\n    workspace: WeakEntity<Workspace>,\n}\n\nimpl ContextHistory {\n    pub fn new(\n        project: Entity<Project>,\n        context_store: Entity<ContextStore>,\n        workspace: WeakEntity<Workspace>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Self {\n        let picker = cx.new(|cx| {\n            Picker::uniform_list<|user_cursor_is_here|>(\n                SavedContextPickerDelegate::new(project, context_store.clone()),\n                window,\n                cx,\n            )\n            .modal(false)\n            .max_height(None)\n        });\n\n        let subscriptions = vec![\n            cx.observe_in(&context_store, window, |this, _, window, cx| {\n                this.picker\n                    .update(cx, |picker, cx| picker.refresh(window, cx));\n            }),\n            cx.subscribe_in(&picker, window, Self::handle_picker_event),\n        ];\n\n        Self {\n            picker,\n            _subscriptions: subscriptions,\n            workspace,\n        }\n    }\n\n    fn handle_picker_event(\n        &mut self,\n        _: &Entity<Picker<SavedContextPickerDelegate>>,\n        event: &SavedContextPickerEvent,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let SavedContextPickerEvent::Confirmed(context) = event;\n\n        let Some(assistant_panel_delegate) = <dyn AssistantPanelDelegate>::try_global(cx) else {\n            return;\n        };\n\n        self.workspace\n            .update(cx, |workspace, cx| match context {\n                ContextMetadata::Remote(metadata) => {\n                    assistant_panel_delegate\n                        .open_remote_context(workspace, metadata.id.clone(), window, cx)\n                        .detach_and_log_err(cx);\n                }\n                ContextMetadata::Saved(metadata) => {\n                    assistant_panel_delegate\n                        .open_saved_context(workspace, metadata.path.clone(), window, cx)\n                        .detach_and_log_err(cx);\n                }\n            })\n            .ok();\n    }\n}\n\nimpl Render for ContextHistory {\n    fn render(&mut self, _window: &mut Window, _cx: &mut Context<Self>) -> impl IntoElement {\n        div().size_full().child(self.picker.clone())\n    }\n}\n\nimpl Focusable for ContextHistory {\n    fn focus_handle(&self, cx: &App) -> FocusHandle {\n        self.picker.focus_handle(cx)\n    }\n}\n\nimpl EventEmitter<()> for ContextHistory {}\n\nimpl Item for ContextHistory {\n    type Event = ();\n\n    fn tab_content_text(&self, _window: &Window, _cx: &App) -> Option<SharedString> {\n        Some(\"History\".into())\n    }\n}\n\nstruct SavedContextPickerDelegate {\n    store: Entity<ContextStore>,\n    project: Entity<Project>,\n    matches: Vec<ContextMetadata>,\n    selected_index: usize,\n}\n\nimpl EventEmitter<SavedContextPickerEvent> for Picker<SavedContextPickerDelegate> {}\n\nimpl SavedContextPickerDelegate {\n    fn new(project: Entity<Project>, store: Entity<ContextStore>) -> Self {\n        Self {\n            project,\n            store,\n            matches: Vec::new(),\n            selected_index: 0,\n        }\n    }\n}\n\nimpl PickerDelegate for SavedContextPickerDelegate {\n    type ListItem = ListItem;\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/assistant_context_editor/src/context_history.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse std::sync::Arc;\n\nuse gpui::{App, Entity, EventEmitter, FocusHandle, Focusable, Subscription, Task, WeakEntity};\nuse picker::{Picker, PickerDelegate};\nuse project::Project;\nuse ui::utils::{format_distance_from_now, DateTimeType};\nuse ui::{prelude::*, Avatar, ListItem, ListItemSpacing};\nuse workspace::{Item, Workspace};\n\nuse crate::{\n    AssistantPanelDelegate, ContextStore, RemoteContextMetadata, SavedContextMetadata,\n    DEFAULT_TAB_TITLE,\n};\n\n#[derive(Clone)]\npub enum ContextMetadata {\n    Remote(RemoteContextMetadata),\n    Saved(SavedContextMetadata),\n}\n\nenum SavedContextPickerEvent {\n    Confirmed(ContextMetadata),\n}\n\npub struct ContextHistory {\n    picker: Entity<Picker<SavedContextPickerDelegate>>,\n    _subscriptions: Vec<Subscription>,\n    workspace: WeakEntity<Workspace>,\n}\n\nimpl ContextHistory {\n    pub fn new(\n        project: Entity<Project>,\n        context_store: Entity<ContextStore>,\n        workspace: WeakEntity<Workspace>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Self {\n        let picker = cx.new(|cx| {\n            Picker::uniform_list<|user_cursor_is_here|>(\n                SavedContextPickerDelegate::new(project, context_store.clone()),\n                window,\n                cx,\n            )\n            .modal(false)\n            .max_height(None)\n        });\n\n        let subscriptions = vec![\n            cx.observe_in(&context_store, window, |this, _, window, cx| {\n                this.picker\n                    .update(cx, |picker, cx| picker.refresh(window, cx));\n            }),\n            cx.subscribe_in(&picker, window, Self::handle_picker_event),\n        ];\n\n        Self {\n            picker,\n            _subscriptions: subscriptions,\n            workspace,\n        }\n    }\n\n    fn handle_picker_event(\n        &mut self,\n        _: &Entity<Picker<SavedContextPickerDelegate>>,\n        event: &SavedContextPickerEvent,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) {\n        let SavedContextPickerEvent::Confirmed(context) = event;\n\n        let Some(assistant_panel_delegate) = <dyn AssistantPanelDelegate>::try_global(cx) else {\n            return;\n        };\n\n        self.workspace\n            .update(cx, |workspace, cx| match context {\n                ContextMetadata::Remote(metadata) => {\n                    assistant_panel_delegate\n                        .open_remote_context(workspace, metadata.id.clone(), window, cx)\n                        .detach_and_log_err(cx);\n                }\n                ContextMetadata::Saved(metadata) => {\n                    assistant_panel_delegate\n                        .open_saved_context(workspace, metadata.path.clone(), window, cx)\n                        .detach_and_log_err(cx);\n                }\n            })\n            .ok();\n    }\n}\n\nimpl Render for ContextHistory {\n    fn render(&mut self, _window: &mut Window, _cx: &mut Context<Self>) -> impl IntoElement {\n        div().size_full().child(self.picker.clone())\n    }\n}\n\nimpl Focusable for ContextHistory {\n    fn focus_handle(&self, cx: &App) -> FocusHandle {\n        self.picker.focus_handle(cx)\n    }\n}\n\nimpl EventEmitter<()> for ContextHistory {}\n\nimpl Item for ContextHistory {\n    type Event = ();\n\n    fn tab_content_text(&self, _window: &Window, _cx: &App) -> Option<SharedString> {\n        Some(\"History\".into())\n    }\n}\n\nstruct SavedContextPickerDelegate {\n    store: Entity<ContextStore>,\n    project: Entity<Project>,\n    matches: Vec<ContextMetadata>,\n    selected_index: usize,\n}\n\nimpl EventEmitter<SavedContextPickerEvent> for Picker<SavedContextPickerDelegate> {}\n\nimpl SavedContextPickerDelegate {\n    fn new(project: Entity<Project>, store: Entity<ContextStore>) -> Self {\n        Self {\n            project,\n            store,\n            matches: Vec::new(),\n            selected_index: 0,\n        }\n    }\n}\n\nimpl PickerDelegate for SavedContextPickerDelegate {\n    type ListItem = ListItem;\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}