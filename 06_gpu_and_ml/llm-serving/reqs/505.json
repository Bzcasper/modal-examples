{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -237,7 +237,7 @@\n                 CompletionKind::Enum => {\n                     let label = format!(\"enum {}\", completion.label);\n                     Some(zed_extension_api::CodeLabel {\n-                        spans: vec![CodeLabel]\n+                        spans: vec![CodeLabelSpan::]\n                     })\n                 }\n \n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -237,7 +237,7 @@\n                 CompletionKind::Enum => {\n                     let label = format!(\"enum {}\", completion.label);\n                     Some(zed_extension_api::CodeLabel {\n-                        spans: vec![CodeLabelSpan::]\n+                        spans: vec![CodeLabelSpan::code_range(range)]\n                     })\n                 }\n \n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -237,7 +237,10 @@\n                 CompletionKind::Enum => {\n                     let label = format!(\"enum {}\", completion.label);\n                     Some(zed_extension_api::CodeLabel {\n-                        spans: vec![CodeLabelSpan::code_range(range)]\n+                        spans: vec![CodeLabelSpan::code_range(Range {\n+                            start: 0,\n+                            end: label.len(),\n+                        })],\n                     })\n                 }\n \n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -241,6 +241,9 @@\n                             start: 0,\n                             end: label.len(),\n                         })],\n+                        filter_range: Range {\n+                            start: \n+                        }\n                     })\n                 }\n \n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -242,8 +242,10 @@\n                             end: label.len(),\n                         })],\n                         filter_range: Range {\n-                            start: \n-                        }\n+                            start: \"enum \".len() as u32,\n+                            end: label.len() as u32,\n+                        },\n+                        code,\n                     })\n                 }\n \n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -236,7 +236,7 @@\n                 }\n                 CompletionKind::Enum => {\n                     let label = format!(\"enum {}\", completion.label);\n-                    Some(zed_extension_api::CodeLabel {\n+                    return Some(zed_extension_api::CodeLabel {\n                         spans: vec![CodeLabelSpan::code_range(Range {\n                             start: 0,\n                             end: label.len(),\n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -246,7 +246,7 @@\n                             end: label.len() as u32,\n                         },\n                         code,\n-                    })\n+                    });\n                 }\n \n                 _ => {}\n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -235,15 +235,15 @@\n                     }\n                 }\n                 CompletionKind::Enum => {\n-                    let label = format!(\"enum {}\", completion.label);\n+                    let code = format!(\"enum {}\", completion.label);\n                     return Some(zed_extension_api::CodeLabel {\n                         spans: vec![CodeLabelSpan::code_range(Range {\n                             start: 0,\n-                            end: label.len(),\n+                            end: code.len(),\n                         })],\n                         filter_range: Range {\n                             start: \"enum \".len() as u32,\n-                            end: label.len() as u32,\n+                            end: code.len() as u32,\n                         },\n                         code,\n                     });\n\n```\n\n### Input:\n```extensions/zig/src/zig.rs\n        let completion_len = completion.label.len();\n<|editable_region_start|>\n        fn format_function(completion: &Completion) -> Option<zed_extension_api::CodeLabel> {\n            let completion_len = completion.label.len();\n            let details = completion.label_details.as_ref()?;\n            let (detail, description) =\n                details.detail.as_ref().zip(details.description.as_ref())?;\n            let start = \"fn \".len() as u32;\n            let (spans, code) = {\n                let code = format!(\"fn {}{} {}\", completion.label, detail, description);\n                (\n                    vec![CodeLabelSpan::code_range(Range {\n                        start: 0,\n                        end: code.len().try_into().expect(\"Label to not overflow u32\"),\n                    })],\n                    code,\n                )\n            };\n            Some(zed_extension_api::CodeLabel {\n                code,\n                spans,\n                filter_range: Range {\n                    start,\n                    end: start + completion_len as u32,\n                },\n            })\n        }\n        if let Some(kind) = completion.kind {\n            match kind {\n                CompletionKind::Keyword => {\n                    return Some(zed_extension_api::CodeLabel {\n                        spans: vec![CodeLabelSpan::literal(\n                            completion.label.clone(),\n                            Some(\"keyword\".into()),\n                        )],\n                        code: completion.label,\n                        filter_range: Range {\n                            start: 0,\n                            end: completion_len as u32,\n                        },\n                    })\n                }\n                CompletionKind::Function => {\n                    if let Some(label) = format_function(&completion) {\n                        return Some(label);\n                    }\n                }\n                CompletionKind::Struct => {\n                    if completion\n                        .detail\n                        .as_ref()\n                        .map_or(false, |detail| detail.starts_with(\"fn \"))\n                    {\n                        if let Some(label) = format_function(&completion) {\n                            return Some(label);\n                        }\n                    } else if completion.detail.a<|user_cursor_is_here|>{\n                        let code = format!(\"struct {}\", completion.label);\n                        return Some(zed_extension_api::CodeLabel {\n                            spans: vec![CodeLabelSpan::code_range(Range {\n                                start: 0,\n                                end: code.len() as u32,\n                            })],\n                            filter_range: Range {\n                                start: \"struct \".len() as u32,\n                                end: code.len() as u32,\n                            },\n                            code,\n                        });\n                    }\n                }\n                CompletionKind::Enum => {\n                    let code = format!(\"enum {}\", completion.label);\n                    return Some(zed_extension_api::CodeLabel {\n                        spans: vec![CodeLabelSpan::code_range(Range {\n                            start: 0,\n                            end: code.len() as u32,\n                        })],\n                        filter_range: Range {\n                            start: \"enum \".len() as u32,\n                            end: code.len() as u32,\n                        },\n                        code,\n                    });\n                }\n\n                _ => {}\n            }\n        }\n        Some(zed_extension_api::CodeLabel {\n            code: completion.label,\n            spans: vec![],\n            filter_range: Range {\n                start: 0,\n                end: completion_len as u32,\n            },\n        })\n    }\n}\n\nzed::register_extension!(ZigExtension);\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```extensions/zig/src/zig.rs\n        let completion_len = completion.label.len();\n<|editable_region_start|>\n        fn format_function(completion: &Completion) -> Option<zed_extension_api::CodeLabel> {\n            let completion_len = completion.label.len();\n            let details = completion.label_details.as_ref()?;\n            let (detail, description) =\n                details.detail.as_ref().zip(details.description.as_ref())?;\n            let start = \"fn \".len() as u32;\n            let (spans, code) = {\n                let code = format!(\"fn {}{} {}\", completion.label, detail, description);\n                (\n                    vec![CodeLabelSpan::code_range(Range {\n                        start: 0,\n                        end: code.len().try_into().expect(\"Label to not overflow u32\"),\n                    })],\n                    code,\n                )\n            };\n            Some(zed_extension_api::CodeLabel {\n                code,\n                spans,\n                filter_range: Range {\n                    start,\n                    end: start + completion_len as u32,\n                },\n            })\n        }\n        if let Some(kind) = completion.kind {\n            match kind {\n                CompletionKind::Keyword => {\n                    return Some(zed_extension_api::CodeLabel {\n                        spans: vec![CodeLabelSpan::literal(\n                            completion.label.clone(),\n                            Some(\"keyword\".into()),\n                        )],\n                        code: completion.label,\n                        filter_range: Range {\n                            start: 0,\n                            end: completion_len as u32,\n                        },\n                    })\n                }\n                CompletionKind::Function => {\n                    if let Some(label) = format_function(&completion) {\n                        return Some(label);\n                    }\n                }\n                CompletionKind::Struct => {\n                    if completion\n                        .detail\n                        .as_ref()\n                        .map_or(false, |detail| detail.starts_with(\"fn \"))\n                    {\n                        if let Some(label) = format_function(&completion) {\n                            return Some(label);\n                        }\n                    } else if completion.detail.a<|user_cursor_is_here|>{\n                        let code = format!(\"struct {}\", completion.label);\n                        return Some(zed_extension_api::CodeLabel {\n                            spans: vec![CodeLabelSpan::code_range(Range {\n                                start: 0,\n                                end: code.len() as u32,\n                            })],\n                            filter_range: Range {\n                                start: \"struct \".len() as u32,\n                                end: code.len() as u32,\n                            },\n                            code,\n                        });\n                    }\n                }\n                CompletionKind::Enum => {\n                    let code = format!(\"enum {}\", completion.label);\n                    return Some(zed_extension_api::CodeLabel {\n                        spans: vec![CodeLabelSpan::code_range(Range {\n                            start: 0,\n                            end: code.len() as u32,\n                        })],\n                        filter_range: Range {\n                            start: \"enum \".len() as u32,\n                            end: code.len() as u32,\n                        },\n                        code,\n                    });\n                }\n\n                _ => {}\n            }\n        }\n        Some(zed_extension_api::CodeLabel {\n            code: completion.label,\n            spans: vec![],\n            filter_range: Range {\n                start: 0,\n                end: completion_len as u32,\n            },\n        })\n    }\n}\n\nzed::register_extension!(ZigExtension);\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}