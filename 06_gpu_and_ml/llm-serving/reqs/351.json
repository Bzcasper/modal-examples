{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"src/family.rs\":\n```diff\n@@ -36,6 +36,7 @@\n         let mut fonts = vec![];\n         for font_handle in font_handles {\n             fonts.push(F::from_handle(font_handle)?)\n+            fonts\n         }\n         Ok(Family { fonts })\n     }\n\n```\n\nUser edited \"src/family.rs\":\n```diff\n@@ -36,7 +36,7 @@\n         let mut fonts = vec![];\n         for font_handle in font_handles {\n             fonts.push(F::from_handle(font_handle)?)\n-            fonts\n+            fonts.push(F::from_handle(font_handle)?)\n         }\n         Ok(Family { fonts })\n     }\n\n```\n\n### Input:\n```src/family.rs\n<|start_of_file|>\n<|editable_region_start|>\n// font-kit/src/family.rs\n//\n// Copyright © 2018 The Pathfinder Project Developers.\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//! Defines a set of faces that vary in weight, width or slope.\n\nuse crate::error::FontLoadingError;\nuse crate::family_handle::FamilyHandle;\nuse crate::font::Font;\nuse crate::handle::Handle;\nuse crate::loader::Loader;\n\n/// Defines a set of faces that vary in weight, width or slope.\n#[derive(Debug)]\npub struct Family<F = Font>\nwhere\n    F: Loader,\n{\n    fonts: Vec<F>,\n}\n\nimpl<F> Family<F>\nwhere\n    F: Loader,\n{\n    pub(crate) fn from_font_handles<'a, I>(font_handles: I) -> Result<Family<F>, FontLoadingError>\n    where\n        I: Iterator<Item = &'a Handle>,\n    {\n        let mut fonts = vec![];\n        for font_handle in font_handles {\n            fonts.push(F::from_handle(font_handle)?)\n            fonts.push(F::from_handle(font_handle)?)<|user_cursor_is_here|>\n        }\n        Ok(Family { fonts })\n    }\n\n    #[inline]\n    pub(crate) fn from_handle(family_handle: &FamilyHandle) -> Result<Family<F>, FontLoadingError> {\n        Family::from_font_handles(family_handle.fonts.iter())\n    }\n\n    /// Returns the individual fonts in this family.\n    #[inline]\n    pub fn fonts(&self) -> &[F] {\n        &self.fonts\n    }\n\n    /// Returns true if and only if this family is empty.\n    #[inline]\n    pub fn is_empty(&self) -> bool {\n        self.fonts.is_empty()\n    }\n}\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```src/family.rs\n<|start_of_file|>\n<|editable_region_start|>\n// font-kit/src/family.rs\n//\n// Copyright © 2018 The Pathfinder Project Developers.\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//! Defines a set of faces that vary in weight, width or slope.\n\nuse crate::error::FontLoadingError;\nuse crate::family_handle::FamilyHandle;\nuse crate::font::Font;\nuse crate::handle::Handle;\nuse crate::loader::Loader;\n\n/// Defines a set of faces that vary in weight, width or slope.\n#[derive(Debug)]\npub struct Family<F = Font>\nwhere\n    F: Loader,\n{\n    fonts: Vec<F>,\n}\n\nimpl<F> Family<F>\nwhere\n    F: Loader,\n{\n    pub(crate) fn from_font_handles<'a, I>(font_handles: I) -> Result<Family<F>, FontLoadingError>\n    where\n        I: Iterator<Item = &'a Handle>,\n    {\n        let mut fonts = vec![];\n        for font_handle in font_handles {\n            fonts.push(F::from_handle(font_handle)?)\n            fonts.push(F::from_handle(font_handle)?)<|user_cursor_is_here|>\n        }\n        Ok(Family { fonts })\n    }\n\n    #[inline]\n    pub(crate) fn from_handle(family_handle: &FamilyHandle) -> Result<Family<F>, FontLoadingError> {\n        Family::from_font_handles(family_handle.fonts.iter())\n    }\n\n    /// Returns the individual fonts in this family.\n    #[inline]\n    pub fn fonts(&self) -> &[F] {\n        &self.fonts\n    }\n\n    /// Returns true if and only if this family is empty.\n    #[inline]\n    pub fn is_empty(&self) -> bool {\n        self.fonts.is_empty()\n    }\n}\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}