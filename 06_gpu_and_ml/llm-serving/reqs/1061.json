{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"untitled\":\n```diff\n@@ -101,7 +101,7 @@\n - [ ] [@cole @nathan] [2024 Week 06](https://github.com/zed-industries/zed/issues?q=state%3Aopen%20created%3A%3E%3D2024-02-11%20created%3A%3C2024-02-18%20no%3Atype)\n - [ ] [@antonio @conrad] [2024 Week 07](https://github.com/zed-industries/zed/issues?q=state%3Aopen%20created%3A%3E%3D2024-02-18%20created%3A%3C2024-02-25%20no%3Atype)\n - [ ] [@max] [2024 Week 08](https://github.com/zed-industries/zed/issues?q=state%3Aopen%20created%3A%3E%3D2024-02-25%20created%3A%3C2024-03-03%20no%3Atype)\n-- [ ] [@joseph] [2024 Week 09](https://github.com/zed-industries/zed/issues?q=state%3Aopen%20created%3A%3E%3D2024-03-03%20created%3A%3C2024-03-10%20no%3Atype)\n+- [ ] [] [2024 Week 09](https://github.com/zed-industries/zed/issues?q=state%3Aopen%20created%3A%3E%3D2024-03-03%20created%3A%3C2024-03-10%20no%3Atype)\n - [ ] [@michael @ben] [2024 Week 10](https://github.com/zed-industries/zed/issues?q=state%3Aopen%20created%3A%3E%3D2024-03-10%20created%3A%3C2024-03-17%20no%3Atype)\n - [ ] [ ] [2024 Week 11](https://github.com/zed-industries/zed/issues?q=state%3Aopen%20created%3A%3E%3D2024-03-17%20created%3A%3C2024-03-24%20no%3Atype)\n - [ ] [ ] [2024 Week 12](https://github.com/zed-industries/zed/issues?q=state%3Aopen%20created%3A%3E%3D2024-03-24%20created%3A%3C2024-03-31%20no%3Atype)\n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -89,7 +89,7 @@\n \n - [ ] 397 Bugs without comments: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20comments%3A0%20label%3Abug\n - [ ] 561 Enhancement without comments: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20comments%3A0%20label%3Aenhancement\n-- [ ] \n+- [ ] https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n \n ### Date ranges - `state:open created:>=2024-01-01 created:<2024-02-01 no:type`\n \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -89,7 +89,7 @@\n \n - [ ] 397 Bugs without comments: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20comments%3A0%20label%3Abug\n - [ ] 561 Enhancement without comments: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20comments%3A0%20label%3Aenhancement\n-- [ ] https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n+- [ ] [ ] https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n \n ### Date ranges - `state:open created:>=2024-01-01 created:<2024-02-01 no:type`\n \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -89,7 +89,7 @@\n \n - [ ] 397 Bugs without comments: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20comments%3A0%20label%3Abug\n - [ ] 561 Enhancement without comments: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20comments%3A0%20label%3Aenhancement\n-- [ ] [ ] https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n+- [ ] [joseph] https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n \n ### Date ranges - `state:open created:>=2024-01-01 created:<2024-02-01 no:type`\n \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -83,13 +83,13 @@\n - [ ] Linux-wayland (64)              https://github.com/zed-industries/zed/issues?q=is%3Aopen%20label%3Alinux-wayland%20no%3Atype%20%20\n - [ ] Linux not:x11,wayland (159)     https://github.com/zed-industries/zed/issues?q=is%3Aopen%20-label%3Alinux-wayland%20-label%3Alinux-x11%20label%3Alinux%20no%3Atype%20%20%20\n - [ ] AI (168)                        https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3Aai%20no%3Atype\n+- [ ] [joseph] https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n - \n \n ### \n \n - [ ] 397 Bugs without comments: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20comments%3A0%20label%3Abug\n - [ ] 561 Enhancement without comments: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20comments%3A0%20label%3Aenhancement\n-- [ ] [joseph] https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n \n ### Date ranges - `state:open created:>=2024-01-01 created:<2024-02-01 no:type`\n \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -83,7 +83,7 @@\n - [ ] Linux-wayland (64)              https://github.com/zed-industries/zed/issues?q=is%3Aopen%20label%3Alinux-wayland%20no%3Atype%20%20\n - [ ] Linux not:x11,wayland (159)     https://github.com/zed-industries/zed/issues?q=is%3Aopen%20-label%3Alinux-wayland%20-label%3Alinux-x11%20label%3Alinux%20no%3Atype%20%20%20\n - [ ] AI (168)                        https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3Aai%20no%3Atype\n-- [ ] [joseph] https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n+- [ ] [joseph] Panics: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n - \n \n ### \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -83,7 +83,7 @@\n - [ ] Linux-wayland (64)              https://github.com/zed-industries/zed/issues?q=is%3Aopen%20label%3Alinux-wayland%20no%3Atype%20%20\n - [ ] Linux not:x11,wayland (159)     https://github.com/zed-industries/zed/issues?q=is%3Aopen%20-label%3Alinux-wayland%20-label%3Alinux-x11%20label%3Alinux%20no%3Atype%20%20%20\n - [ ] AI (168)                        https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3Aai%20no%3Atype\n-- [ ] [joseph] Panics: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22\n+- [ ] [joseph] Panics: https://github.com/zed-industries/zed/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22panic%20%2F%20crash%22 (65 -> )\n - \n \n ### \n\n```\n\nUser edited \"\":\n```diff\n@@ -5,7 +5,7 @@\n // custom settings, run the `open default settings` command\n // from the command palette or from `Zed` application menu.\n {\n-  \"buffer_font_size\": 10.0,\n+  \"buffer_font_size\": null,\n   \"ui_font_size\": 15,\n   \"vim_mode\": true,\n   \"show_signature_help_after_edits\": true,\n\n```\n\nUser edited \"\":\n```diff\n@@ -5,7 +5,7 @@\n // custom settings, run the `open default settings` command\n // from the command palette or from `Zed` application menu.\n {\n-  \"buffer_font_size\": null,\n+  \"buffer_font_size\": 10.0,\n   \"ui_font_size\": 15,\n   \"vim_mode\": true,\n   \"show_signature_help_after_edits\": true,\n\n```\n\n### Input:\n```crates/feedback/src/feedback_modal.rs\n                        .language_for_name(\"Markdown\");\n<|editable_region_start|>\n\n                    let project = workspace.project().clone();\n\n                    let system_specs = SystemSpecs::new(window, cx);\n                    cx.spawn_in(window, |workspace, mut cx| async move {\n                        let markdown = markdown.await.log_err();\n                        let buffer = project.update(&mut cx, |project, cx| {\n                            project.create_local_buffer(\"\", markdown, cx)\n                        })?;\n                        let system_specs = system_specs.await;\n\n                        workspace.update_in(&mut cx, |workspace, window, cx| {\n                            workspace.toggle_modal(window, cx, move |window, cx| {\n                                FeedbackModal::new(system_specs, project, buffer, window, cx)\n                            });\n                        })?;\n\n                        anyhow::Ok(())\n                    })\n                    .detach_and_log_err(cx);\n                })\n                .detach_and_log_err(cx);\n        });\n    }\n\n    pub fn new(\n        system_specs: SystemSpecs,\n        project: Entity<Project>,\n        buffer: Entity<Buffer>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Self {\n    <|user_cursor_is_here|>    let email_address_editor = cx.new(|cx| {\n            let mut editor = Editor::single_line(window, cx);\n            editor.set_placeholder_text(\"Email address (optional)\", cx);\n\n            if let Ok(Some(email_address)) = KEY_VALUE_STORE.read_kvp(DATABASE_KEY_NAME) {\n                editor.set_text(email_address, window, cx)\n            }\n\n            editor\n        });\n\n        let feedback_editor = cx.new(|cx| {\n            let mut editor = Editor::for_buffer(buffer, Some(project.clone()), window, cx);\n            editor.set_placeholder_text(\n                \"You can use markdown to organize your feedback with code and links.\",\n                cx,\n            );\n            editor.set_show_gutter(false, cx);\n            editor.set_show_indent_guides(false, cx);\n            editor.set_show_inline_completions(Some(false), window, cx);\n            editor.set_vertical_scroll_margin(5, cx);\n            editor.set_use_modal_editing(false);\n            editor.set_soft_wrap();\n            editor\n        });\n\n        cx.subscribe(&feedback_editor, |this, editor, event: &EditorEvent, cx| {\n            if matches!(event, EditorEvent::Edited { .. }) {\n                this.character_count = editor\n                    .read(cx)\n                    .buffer()\n                    .read(cx)\n                    .as_singleton()\n<|editable_region_end|>\n                    .expect(\"Feedback editor is never a multi-buffer\")\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/feedback/src/feedback_modal.rs\n                        .language_for_name(\"Markdown\");\n<|editable_region_start|>\n\n                    let project = workspace.project().clone();\n\n                    let system_specs = SystemSpecs::new(window, cx);\n                    cx.spawn_in(window, |workspace, mut cx| async move {\n                        let markdown = markdown.await.log_err();\n                        let buffer = project.update(&mut cx, |project, cx| {\n                            project.create_local_buffer(\"\", markdown, cx)\n                        })?;\n                        let system_specs = system_specs.await;\n\n                        workspace.update_in(&mut cx, |workspace, window, cx| {\n                            workspace.toggle_modal(window, cx, move |window, cx| {\n                                FeedbackModal::new(system_specs, project, buffer, window, cx)\n                            });\n                        })?;\n\n                        anyhow::Ok(())\n                    })\n                    .detach_and_log_err(cx);\n                })\n                .detach_and_log_err(cx);\n        });\n    }\n\n    pub fn new(\n        system_specs: SystemSpecs,\n        project: Entity<Project>,\n        buffer: Entity<Buffer>,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Self {\n    <|user_cursor_is_here|>    let email_address_editor = cx.new(|cx| {\n            let mut editor = Editor::single_line(window, cx);\n            editor.set_placeholder_text(\"Email address (optional)\", cx);\n\n            if let Ok(Some(email_address)) = KEY_VALUE_STORE.read_kvp(DATABASE_KEY_NAME) {\n                editor.set_text(email_address, window, cx)\n            }\n\n            editor\n        });\n\n        let feedback_editor = cx.new(|cx| {\n            let mut editor = Editor::for_buffer(buffer, Some(project.clone()), window, cx);\n            editor.set_placeholder_text(\n                \"You can use markdown to organize your feedback with code and links.\",\n                cx,\n            );\n            editor.set_show_gutter(false, cx);\n            editor.set_show_indent_guides(false, cx);\n            editor.set_show_inline_completions(Some(false), window, cx);\n            editor.set_vertical_scroll_margin(5, cx);\n            editor.set_use_modal_editing(false);\n            editor.set_soft_wrap();\n            editor\n        });\n\n        cx.subscribe(&feedback_editor, |this, editor, event: &EditorEvent, cx| {\n            if matches!(event, EditorEvent::Edited { .. }) {\n                this.character_count = editor\n                    .read(cx)\n                    .buffer()\n                    .read(cx)\n                    .as_singleton()\n<|editable_region_end|>\n                    .expect(\"Feedback editor is never a multi-buffer\")\n```"
  },
  "max_tokens": 1024
}