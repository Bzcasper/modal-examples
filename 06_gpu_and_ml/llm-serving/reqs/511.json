{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -239,7 +239,7 @@\n                     return Some(zed_extension_api::CodeLabel {\n                         spans: vec![CodeLabelSpan::code_range(Range {\n                             start: 0,\n-                            end: code.len(),\n+                            end: code.len() as u32,\n                         })],\n                         filter_range: Range {\n                             start: \"enum \".len() as u32,\n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -199,7 +199,7 @@\n                 spans,\n                 filter_range: Range {\n                     start,\n-                    end: completion_len as u32,\n+                    end: start + completion_len as u32,\n                 },\n             })\n         }\n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -232,6 +232,8 @@\n                         if let Some(label) = format_function(&completion) {\n                             return Some(label);\n                         }\n+                    } else {\n+                        \n                     }\n                 }\n                 CompletionKind::Enum => {\n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -233,7 +233,18 @@\n                             return Some(label);\n                         }\n                     } else {\n-                        \n+                        let code = format!(\"enum {}\", completion.label);\n+                        return Some(zed_extension_api::CodeLabel {\n+                            spans: vec![CodeLabelSpan::code_range(Range {\n+                                start: 0,\n+                                end: code.len() as u32,\n+                            })],\n+                            filter_range: Range {\n+                                start: \"enum \".len() as u32,\n+                                end: code.len() as u32,\n+                            },\n+                            code,\n+                        });\n                     }\n                 }\n                 CompletionKind::Enum => {\n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -233,7 +233,7 @@\n                             return Some(label);\n                         }\n                     } else {\n-                        let code = format!(\"enum {}\", completion.label);\n+                        let code = format!(\"struct {}\", completion.label);\n                         return Some(zed_extension_api::CodeLabel {\n                             spans: vec![CodeLabelSpan::code_range(Range {\n                                 start: 0,\n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -240,7 +240,7 @@\n                                 end: code.len() as u32,\n                             })],\n                             filter_range: Range {\n-                                start: \"enum \".len() as u32,\n+                                start: \"struct \".len() as u32,\n                                 end: code.len() as u32,\n                             },\n                             code,\n\n```\n\nUser edited \"extensions/zig/src/zig.rs\":\n```diff\n@@ -232,7 +232,7 @@\n                         if let Some(label) = format_function(&completion) {\n                             return Some(label);\n                         }\n-                    } else {\n+                    } else if completion.detail.as_ref().map_or(false, |detail| detail{\n                         let code = format!(\"struct {}\", completion.label);\n                         return Some(zed_extension_api::CodeLabel {\n                             spans: vec![CodeLabelSpan::code_range(Range {\n\n```\n\n### Input:\n```extensions/zig/src/zig.rs\n        fn format_function(completion: &Completion) -> Option<zed_extension_api::CodeLabel> {\n<|editable_region_start|>\n            let completion_len = completion.label.len();\n            let details = completion.label_details.as_ref()?;\n            let (detail, description) =\n                details.detail.as_ref().zip(details.description.as_ref())?;\n            let start = \"fn \".len() as u32;\n            let (spans, code) = {\n                let code = format!(\"fn {}{} {}\", completion.label, detail, description);\n                (\n                    vec![CodeLabelSpan::code_range(Range {\n                        start: 0,\n                        end: code.len().try_into().expect(\"Label to not overflow u32\"),\n                    })],\n                    code,\n                )\n            };\n            Some(zed_extension_api::CodeLabel {\n                code,\n                spans,\n                filter_range: Range {\n                    start,\n                    end: start + completion_len as u32,\n                },\n            })\n        }\n        if let Some(kind) = completion.kind {\n            match kind {\n                CompletionKind::Keyword => {\n                    return Some(zed_extension_api::CodeLabel {\n                        spans: vec![CodeLabelSpan::literal(\n                            completion.label.clone(),\n                            Some(\"keyword\".into()),\n                        )],\n                        code: completion.label,\n                        filter_range: Range {\n                            start: 0,\n                            end: completion_len as u32,\n                        },\n                    })\n                }\n                CompletionKind::Function => {\n                    if let Some(label) = format_function(&completion) {\n                        return Some(label);\n                    }\n                }\n                CompletionKind::Struct => {\n                    if completion\n                        .detail\n                        .as_ref()\n                        .map_or(false, |detail| detail.starts_with(\"fn \"))\n                    {\n                        if let Some(label) = format_function(&completion) {\n                            return Some(label);\n                        }\n                    } else if completion.detail.as_ref().map_or(false, |detail| detail.e<|user_cursor_is_here|>{\n                        let code = format!(\"struct {}\", completion.label);\n                        return Some(zed_extension_api::CodeLabel {\n                            spans: vec![CodeLabelSpan::code_range(Range {\n                                start: 0,\n                                end: code.len() as u32,\n                            })],\n                            filter_range: Range {\n                                start: \"struct \".len() as u32,\n                                end: code.len() as u32,\n                            },\n                            code,\n                        });\n                    }\n                }\n                CompletionKind::Enum => {\n                    let code = format!(\"enum {}\", completion.label);\n                    return Some(zed_extension_api::CodeLabel {\n                        spans: vec![CodeLabelSpan::code_range(Range {\n                            start: 0,\n                            end: code.len() as u32,\n                        })],\n                        filter_range: Range {\n                            start: \"enum \".len() as u32,\n                            end: code.len() as u32,\n                        },\n                        code,\n                    });\n                }\n\n                _ => {}\n            }\n        }\n        Some(zed_extension_api::CodeLabel {\n            code: completion.label,\n            spans: vec![],\n            filter_range: Range {\n                start: 0,\n                end: completion_len as u32,\n            },\n        })\n    }\n}\n\nzed::register_extension!(ZigExtension);\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```extensions/zig/src/zig.rs\n        fn format_function(completion: &Completion) -> Option<zed_extension_api::CodeLabel> {\n<|editable_region_start|>\n            let completion_len = completion.label.len();\n            let details = completion.label_details.as_ref()?;\n            let (detail, description) =\n                details.detail.as_ref().zip(details.description.as_ref())?;\n            let start = \"fn \".len() as u32;\n            let (spans, code) = {\n                let code = format!(\"fn {}{} {}\", completion.label, detail, description);\n                (\n                    vec![CodeLabelSpan::code_range(Range {\n                        start: 0,\n                        end: code.len().try_into().expect(\"Label to not overflow u32\"),\n                    })],\n                    code,\n                )\n            };\n            Some(zed_extension_api::CodeLabel {\n                code,\n                spans,\n                filter_range: Range {\n                    start,\n                    end: start + completion_len as u32,\n                },\n            })\n        }\n        if let Some(kind) = completion.kind {\n            match kind {\n                CompletionKind::Keyword => {\n                    return Some(zed_extension_api::CodeLabel {\n                        spans: vec![CodeLabelSpan::literal(\n                            completion.label.clone(),\n                            Some(\"keyword\".into()),\n                        )],\n                        code: completion.label,\n                        filter_range: Range {\n                            start: 0,\n                            end: completion_len as u32,\n                        },\n                    })\n                }\n                CompletionKind::Function => {\n                    if let Some(label) = format_function(&completion) {\n                        return Some(label);\n                    }\n                }\n                CompletionKind::Struct => {\n                    if completion\n                        .detail\n                        .as_ref()\n                        .map_or(false, |detail| detail.starts_with(\"fn \"))\n                    {\n                        if let Some(label) = format_function(&completion) {\n                            return Some(label);\n                        }\n                    } else if completion.detail.as_ref().map_or(false, |detail| detail.e<|user_cursor_is_here|>{\n                        let code = format!(\"struct {}\", completion.label);\n                        return Some(zed_extension_api::CodeLabel {\n                            spans: vec![CodeLabelSpan::code_range(Range {\n                                start: 0,\n                                end: code.len() as u32,\n                            })],\n                            filter_range: Range {\n                                start: \"struct \".len() as u32,\n                                end: code.len() as u32,\n                            },\n                            code,\n                        });\n                    }\n                }\n                CompletionKind::Enum => {\n                    let code = format!(\"enum {}\", completion.label);\n                    return Some(zed_extension_api::CodeLabel {\n                        spans: vec![CodeLabelSpan::code_range(Range {\n                            start: 0,\n                            end: code.len() as u32,\n                        })],\n                        filter_range: Range {\n                            start: \"enum \".len() as u32,\n                            end: code.len() as u32,\n                        },\n                        code,\n                    });\n                }\n\n                _ => {}\n            }\n        }\n        Some(zed_extension_api::CodeLabel {\n            code: completion.label,\n            spans: vec![],\n            filter_range: Range {\n                start: 0,\n                end: completion_len as u32,\n            },\n        })\n    }\n}\n\nzed::register_extension!(ZigExtension);\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}