{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\n\n\n### Input:\n```ZetaReview.tsx\n<|editable_region_start|>\n<|user_cursor_is_here|>import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport {\n  TooltipButton,\n  ZedPredictIcon,\n  ButtonAlt,\n  KeybindingText,\n} from \"@/components/general\";\nimport { KeyboardShortcut } from \"@/components/utils\";\nimport { getRandomNumber } from \"@/lib/utils\";\n\nexport function ZetaReviewModal({\n  open,\n  onOpen,\n  onClose,\n}: ZetaReviewModalProps) {\n  const [selectedReviewId, setSelectedReviewId] = React.useState<string | null>(\n    null,\n  );\n\n  const [pendingReviews, setPendingReviews] = React.useState<PendingReview[]>([\n    {\n      id: \"1\",\n      fileName: \"src/components/modals/ZetaReview.tsx\",\n      recency: \"1 hour ago\",\n      type: \"file\",\n      latency: getRandomNumber(500),\n    },\n    {\n      id: \"2\",\n      fileName: \"src/components/Button.tsx\",\n      recency: \"2 hours ago\",\n      type: \"file\",\n      latency: getRandomNumber(200),\n    },\n    {\n      id: \"3\",\n      fileName: \"src/components/Input.tsx\",\n      recency: \"3 hours ago\",\n      type: \"diff\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"4\",\n      fileName: \"src/components/Dropdown.tsx\",\n      recency: \"4 hours ago\",\n      type: \"diff\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"5\",\n      fileName: \"src/utils/helpers.ts\",\n      recency: \"5 hours ago\",\n      type: \"file\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"6\",\n      fileName: \"src/styles/globals.css\",\n      recency: \"6 hours ago\",\n      type: \"file\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"7\",\n      fileName: \"src/components/Modal.tsx\",\n      recency: \"7 hours ago\",\n      type: \"diff\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"8\",\n      fileName: \"src/hooks/useModal.ts\",\n      recency: \"8 hours ago\",\n      type: \"file\",\n      latency: getRandomNumber(),\n    },\n  ]);\n\n  const [completedReviews, setCompletedReviews] = React.useState<Review[]>([\n    {\n      id: \"9\",\n      fileName: \"src/components/Card.tsx\",\n      recency: \"9 hours ago\",\n      feedback:\n        \"Great implementation of the card component. The accessibility features and responsive design are well thought out.\",\n      isPositive: true,\n      latency: Math.floor(Math.random() * 1000),\n    },\n    {\n      id: \"10\",\n      fileName: \"src/hooks/useTheme.ts\",\n      recency: \"10 hours ago\",\n      feedback:\n        \"The theme hook implementation could be improved. Consider adding support for system theme preference and persisting the theme choice.\",\n      isPositive: false,\n      latency: Math.floor(Math.random() * 1000),\n    },\n    {\n      id: \"11\",\n      fileName: \"src/utils/format.ts\",\n      recency: \"11 hours ago\",\n      feedback:\n        \"The formatting utilities are well documented and cover all necessary use cases. Good job on the type safety!\",\n      isPositive: true,\n      latency: Math.floor(Math.random() * 1000),\n    },\n  ]);\n\n  const handleSubmitReview = (feedback: string, isPositive: boolean) => {\n    const pendingReview = pendingReviews.find((r) => r.id === selectedReviewId);\n    if (!pendingReview) return;\n\n    const newReview: Review = {\n      ...pendingReview,\n      feedback,\n      isPositive,\n    };\n\n    setPendingReviews((prev) => prev.filter((r) => r.id !== selectedReviewId));\n    setCompletedReviews((prev) => [...prev, newReview]);\n    setSelectedReviewId(null);\n  };\n\n  const selectedReview = React.useMemo(() => {\n    if (!selectedReviewId) return null;\n    return (\n      completedReviews.find((r) => r.id === selectedReviewId) ||\n      pendingReviews.find((r) => r.id === selectedReviewId) ||\n      null\n    );\n  }, [selectedReviewId, completedReviews, pendingReviews]);\n\n  return (\n    <>\n      <KeyboardShortcut combo={{ key: \";\", metaKey: true }} onActivate={onOpen}>\n        <TooltipButton\n          icon={<ZedPredictIcon />}\n          label=\"Zed Predict\"\n          keybindingContent={\n            <>\n              <Command />;\n            </>\n          }\n          onClick={onOpen}\n        />\n      </KeyboardShortcut>\n      <Dialog\n        open={open}\n<|editable_region_end|>\n      <Dialog\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```ZetaReview.tsx\n<|editable_region_start|>\n<|user_cursor_is_here|>import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport {\n  TooltipButton,\n  ZedPredictIcon,\n  ButtonAlt,\n  KeybindingText,\n} from \"@/components/general\";\nimport { KeyboardShortcut } from \"@/components/utils\";\nimport { getRandomNumber } from \"@/lib/utils\";\n\nexport function ZetaReviewModal({\n  open,\n  onOpen,\n  onClose,\n}: ZetaReviewModalProps) {\n  const [selectedReviewId, setSelectedReviewId] = React.useState<string | null>(\n    null,\n  );\n\n  const [pendingReviews, setPendingReviews] = React.useState<PendingReview[]>([\n    {\n      id: \"1\",\n      fileName: \"src/components/modals/ZetaReview.tsx\",\n      recency: \"1 hour ago\",\n      type: \"file\",\n      latency: getRandomNumber(500),\n    },\n    {\n      id: \"2\",\n      fileName: \"src/components/Button.tsx\",\n      recency: \"2 hours ago\",\n      type: \"file\",\n      latency: getRandomNumber(200),\n    },\n    {\n      id: \"3\",\n      fileName: \"src/components/Input.tsx\",\n      recency: \"3 hours ago\",\n      type: \"diff\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"4\",\n      fileName: \"src/components/Dropdown.tsx\",\n      recency: \"4 hours ago\",\n      type: \"diff\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"5\",\n      fileName: \"src/utils/helpers.ts\",\n      recency: \"5 hours ago\",\n      type: \"file\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"6\",\n      fileName: \"src/styles/globals.css\",\n      recency: \"6 hours ago\",\n      type: \"file\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"7\",\n      fileName: \"src/components/Modal.tsx\",\n      recency: \"7 hours ago\",\n      type: \"diff\",\n      latency: getRandomNumber(100),\n    },\n    {\n      id: \"8\",\n      fileName: \"src/hooks/useModal.ts\",\n      recency: \"8 hours ago\",\n      type: \"file\",\n      latency: getRandomNumber(),\n    },\n  ]);\n\n  const [completedReviews, setCompletedReviews] = React.useState<Review[]>([\n    {\n      id: \"9\",\n      fileName: \"src/components/Card.tsx\",\n      recency: \"9 hours ago\",\n      feedback:\n        \"Great implementation of the card component. The accessibility features and responsive design are well thought out.\",\n      isPositive: true,\n      latency: Math.floor(Math.random() * 1000),\n    },\n    {\n      id: \"10\",\n      fileName: \"src/hooks/useTheme.ts\",\n      recency: \"10 hours ago\",\n      feedback:\n        \"The theme hook implementation could be improved. Consider adding support for system theme preference and persisting the theme choice.\",\n      isPositive: false,\n      latency: Math.floor(Math.random() * 1000),\n    },\n    {\n      id: \"11\",\n      fileName: \"src/utils/format.ts\",\n      recency: \"11 hours ago\",\n      feedback:\n        \"The formatting utilities are well documented and cover all necessary use cases. Good job on the type safety!\",\n      isPositive: true,\n      latency: Math.floor(Math.random() * 1000),\n    },\n  ]);\n\n  const handleSubmitReview = (feedback: string, isPositive: boolean) => {\n    const pendingReview = pendingReviews.find((r) => r.id === selectedReviewId);\n    if (!pendingReview) return;\n\n    const newReview: Review = {\n      ...pendingReview,\n      feedback,\n      isPositive,\n    };\n\n    setPendingReviews((prev) => prev.filter((r) => r.id !== selectedReviewId));\n    setCompletedReviews((prev) => [...prev, newReview]);\n    setSelectedReviewId(null);\n  };\n\n  const selectedReview = React.useMemo(() => {\n    if (!selectedReviewId) return null;\n    return (\n      completedReviews.find((r) => r.id === selectedReviewId) ||\n      pendingReviews.find((r) => r.id === selectedReviewId) ||\n      null\n    );\n  }, [selectedReviewId, completedReviews, pendingReviews]);\n\n  return (\n    <>\n      <KeyboardShortcut combo={{ key: \";\", metaKey: true }} onActivate={onOpen}>\n        <TooltipButton\n          icon={<ZedPredictIcon />}\n          label=\"Zed Predict\"\n          keybindingContent={\n            <>\n              <Command />;\n            </>\n          }\n          onClick={onOpen}\n        />\n      </KeyboardShortcut>\n      <Dialog\n        open={open}\n<|editable_region_end|>\n      <Dialog\n```"
  },
  "max_tokens": 1024
}