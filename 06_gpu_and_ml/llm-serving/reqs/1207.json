{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\n\n\n### Input:\n```src/pages/[company].tsx\n<|editable_region_start|>\n<|user_cursor_is_here|>import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\nimport Image from \"next/image\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { Dialog as BaseDialog } from \"@base-ui-components/react/dialog\";\nimport {\n  DialogBackdrop,\n  DialogWrap,\n  DialogDescription,\n} from \"@/components/primitives/Dialog\";\nimport { Job } from \"@/types/job\";\nimport { Button } from \"@/components/primitives/Button\";\nimport { Navbar } from \"@/components/primitives/Navbar\";\nimport { Link } from \"@/components/primitives/Link\";\nimport { ContainerTransition } from \"@/components/primitives/Container\";\nimport { SectionDivider } from \"@/components/primitives/Divider\";\nimport { formatDate } from \"@/utils/date\";\nimport ReactMarkdown, { Components } from \"react-markdown\";\nimport rehypeRaw from \"rehype-raw\";\nimport DOMPurify from \"isomorphic-dompurify\";\nimport * as cheerio from \"cheerio\";\nimport { MapPin, Clock, Calendar, Copy, Check } from \"lucide-react\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n);\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  try {\n    const { company } = context.params as { company: string };\n\n    if (!company) {\n      return { notFound: true };\n    }\n\n    const { data, error } = await supabase\n      .from(\"job-postings\")\n      .select(\"*\")\n      .eq(\"company_slug\", company)\n      .order(\"created_at\", { ascending: false })\n      .limit(1);\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return { notFound: true };\n    }\n\n    if (!data || data.length === 0) {\n      return { notFound: true };\n    }\n\n    return {\n      props: {\n        job: data[0],\n      },\n      revalidate: 60, // Revalidate every 60 seconds\n    };\n  } catch (error) {\n    console.error(\"Error in getStaticProps:\", error);\n    return { notFound: true };\n  }\n};\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nfunction Dialog({ email }: { email: string }) {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopyEmail = () => {\n    navigator.clipboard.writeText(email).then(\n      () => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      },\n      (err) => {\n        console.error(\"Failed to copy text: \", err);\n      },\n    );\n  };\n\n  return (\n    <BaseDialog.Root dismissible>\n      <BaseDialog.Trigger\n        render={\n          <Button variant=\"primary\" className=\"flex w-full sm:w-fit ml-auto\">\n            Apply For Role\n          </Button>\n        }\n      />\n      <BaseDialog.Portal>\n        <DialogBackdrop />\n        <DialogWrap title=\"Apply via email\">\n          <DialogDescription>\n            Copy the email to send your application. Good luck!\n          </DialogDescription>\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={handleCopyEmail}\n          >\n            {email}\n            <span className=\"relative flex items-center\">\n              <Copy\n                size={14}\n                className={clsx(\n                  \"absolute transition-opacity duration-300\",\n                  copied ? \"opacity-0\" : \"opacity-50\",\n                )}\n              />\n              <Check\n                size={14}\n                className={clsx(\n                  \"absolute transition-opacity duration-300 text-green-600 dark:text-green-300\",\n                  copied ? \"opacity-100\" : \"opacity-0\",\n                )}\n              />\n            </span>\n          </Button>\n        </DialogWrap>\n      </BaseDialog.Portal>\n    </BaseDialog.Root>\n  );\n}\n\nexport default function CompanyPage({\n  job,\n  error,\n}: {\n  job?: Job;\n  error?: string;\n}) {\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!job) {\n    return <div>Job not found</div>;\n  }\n\n  const components: Components = {\n    h1: (props) => (\n      <h1 className=\"text-2xl dark:text-white font-bold my-4\" {...props} />\n<|editable_region_end|>\n    h1: (props) => (\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```src/pages/[company].tsx\n<|editable_region_start|>\n<|user_cursor_is_here|>import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { GetStaticProps, GetStaticPaths } from \"next\";\nimport Image from \"next/image\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { Dialog as BaseDialog } from \"@base-ui-components/react/dialog\";\nimport {\n  DialogBackdrop,\n  DialogWrap,\n  DialogDescription,\n} from \"@/components/primitives/Dialog\";\nimport { Job } from \"@/types/job\";\nimport { Button } from \"@/components/primitives/Button\";\nimport { Navbar } from \"@/components/primitives/Navbar\";\nimport { Link } from \"@/components/primitives/Link\";\nimport { ContainerTransition } from \"@/components/primitives/Container\";\nimport { SectionDivider } from \"@/components/primitives/Divider\";\nimport { formatDate } from \"@/utils/date\";\nimport ReactMarkdown, { Components } from \"react-markdown\";\nimport rehypeRaw from \"rehype-raw\";\nimport DOMPurify from \"isomorphic-dompurify\";\nimport * as cheerio from \"cheerio\";\nimport { MapPin, Clock, Calendar, Copy, Check } from \"lucide-react\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n);\n\nexport const getStaticProps: GetStaticProps = async (context) => {\n  try {\n    const { company } = context.params as { company: string };\n\n    if (!company) {\n      return { notFound: true };\n    }\n\n    const { data, error } = await supabase\n      .from(\"job-postings\")\n      .select(\"*\")\n      .eq(\"company_slug\", company)\n      .order(\"created_at\", { ascending: false })\n      .limit(1);\n\n    if (error) {\n      console.error(\"Supabase error:\", error);\n      return { notFound: true };\n    }\n\n    if (!data || data.length === 0) {\n      return { notFound: true };\n    }\n\n    return {\n      props: {\n        job: data[0],\n      },\n      revalidate: 60, // Revalidate every 60 seconds\n    };\n  } catch (error) {\n    console.error(\"Error in getStaticProps:\", error);\n    return { notFound: true };\n  }\n};\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  return { paths: [], fallback: \"blocking\" };\n};\n\nfunction Dialog({ email }: { email: string }) {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopyEmail = () => {\n    navigator.clipboard.writeText(email).then(\n      () => {\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      },\n      (err) => {\n        console.error(\"Failed to copy text: \", err);\n      },\n    );\n  };\n\n  return (\n    <BaseDialog.Root dismissible>\n      <BaseDialog.Trigger\n        render={\n          <Button variant=\"primary\" className=\"flex w-full sm:w-fit ml-auto\">\n            Apply For Role\n          </Button>\n        }\n      />\n      <BaseDialog.Portal>\n        <DialogBackdrop />\n        <DialogWrap title=\"Apply via email\">\n          <DialogDescription>\n            Copy the email to send your application. Good luck!\n          </DialogDescription>\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={handleCopyEmail}\n          >\n            {email}\n            <span className=\"relative flex items-center\">\n              <Copy\n                size={14}\n                className={clsx(\n                  \"absolute transition-opacity duration-300\",\n                  copied ? \"opacity-0\" : \"opacity-50\",\n                )}\n              />\n              <Check\n                size={14}\n                className={clsx(\n                  \"absolute transition-opacity duration-300 text-green-600 dark:text-green-300\",\n                  copied ? \"opacity-100\" : \"opacity-0\",\n                )}\n              />\n            </span>\n          </Button>\n        </DialogWrap>\n      </BaseDialog.Portal>\n    </BaseDialog.Root>\n  );\n}\n\nexport default function CompanyPage({\n  job,\n  error,\n}: {\n  job?: Job;\n  error?: string;\n}) {\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!job) {\n    return <div>Job not found</div>;\n  }\n\n  const components: Components = {\n    h1: (props) => (\n      <h1 className=\"text-2xl dark:text-white font-bold my-4\" {...props} />\n<|editable_region_end|>\n    h1: (props) => (\n```"
  },
  "max_tokens": 1024
}