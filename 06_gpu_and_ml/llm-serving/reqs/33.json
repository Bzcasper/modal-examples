{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1457,7 +1457,7 @@\n         true\n     }\n     \n-    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n+    fn is_data_collection_enabled(&self, cx: &App) -> bool {\n         \n     }\n \n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1458,6 +1458,7 @@\n     }\n     \n     fn is_data_collection_enabled(&self, cx: &App) -> bool {\n+        self.\n         \n     }\n \n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1458,8 +1458,7 @@\n     }\n     \n     fn is_data_collection_enabled(&self, cx: &App) -> bool {\n-        self.\n-        \n+        self.data_collection_choice.is_enabled()\n     }\n \n     fn toggle_data_collection(&self, _cx: &mut App) {\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1456,7 +1456,7 @@\n     fn show_data_collection_toggle() -> bool {\n         true\n     }\n-    \n+\n     fn is_data_collection_enabled(&self, cx: &App) -> bool {\n         self.data_collection_choice.is_enabled()\n     }\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1457,7 +1457,7 @@\n         true\n     }\n \n-    fn is_data_collection_enabled(&self, cx: &App) -> bool {\n+    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n         self.data_collection_choice.is_enabled()\n     }\n \n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1462,7 +1462,7 @@\n     }\n \n     fn toggle_data_collection(&self, _cx: &mut App) {\n-        println!(\"TOGGLING!\");\n+        self.data_collection_choice.toggle();\n     }\n \n     fn is_enabled(\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -449,8 +449,13 @@\n                 menu = menu.separator().header(\"Data Collection:\");\n \n                 let provider = provider.clone();\n+                let label = if provider.is_data_collection_enabled(cx) {\n+                    \"Turned On\"\n+                } else {\n+                    \"Turned Off\"\n+                };\n                 menu = menu.toggleable_entry(\n-                    \"Turned On\",\n+                    label,\n                     provider.is_data_collection_enabled(cx),\n                     IconPosition::Start,\n                     None,\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1402,6 +1402,8 @@\n             Self::NotAnswered => false,\n         }\n     }\n+    \n+    p\n }\n \n pub struct ZetaInlineCompletionProvider {\n\n```\n\n### Input:\n```crates/zeta/src/zeta.rs\n                }\n<|editable_region_start|>\n\n                let diff =\n                    similar::TextDiff::from_lines(&old_snapshot.text(), &new_snapshot.text())\n                        .unified_diff()\n                        .to_string();\n                if !diff.is_empty() {\n                    write!(\n                        prompt,\n                        \"User edited {:?}:\\n```diff\\n{}\\n```\",\n                        new_path, diff\n                    )\n                    .unwrap();\n                }\n\n                prompt\n            }\n        }\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct CurrentInlineCompletion {\n    buffer_id: EntityId,\n    completion: InlineCompletion,\n}\n\nimpl CurrentInlineCompletion {\n    fn should_replace_completion(&self, old_completion: &Self, snapshot: &BufferSnapshot) -> bool {\n        if self.buffer_id != old_completion.buffer_id {\n            return true;\n        }\n\n        let Some(old_edits) = old_completion.completion.interpolate(&snapshot) else {\n            return true;\n        };\n        let Some(new_edits) = self.completion.interpolate(&snapshot) else {\n            return false;\n        };\n\n        if old_edits.len() == 1 && new_edits.len() == 1 {\n            let (old_range, old_text) = &old_edits[0];\n            let (new_range, new_text) = &new_edits[0];\n            new_range == old_range && new_text.starts_with(old_text)\n        } else {\n            true\n        }\n    }\n}\n\nstruct PendingCompletion {\n    id: usize,\n    _task: Task<()>,\n}\n\npub enum DataCollectionChoice {\n    NotAnswered,\n    Enabled,\n    Disabled,\n}\n\nimpl DataCollectionChoice {\n    pub fn is_enabled(&self) -> bool {\n        match self {\n            Self::Enabled => true,\n            Self::NotAnswered | Self::Disabled => false,\n        }\n    }\n\n    pub fn is_answered(&self) -> bool {\n        match self {\n            Self::Enabled | Self::Disabled => true,\n            Self::NotAnswered => false,\n        }\n    }\n    \n    p<|user_cursor_is_here|>\n}\n\npub struct ZetaInlineCompletionProvider {\n    zeta: Entity<Zeta>,\n    workspace: WeakEntity<Workspace>,\n    pending_completions: ArrayVec<PendingCompletion, 2>,\n    next_pending_completion_id: usize,\n    current_completion: Option<CurrentInlineCompletion>,\n    data_collection_choice: DataCollectionChoice,\n}\n\nimpl ZetaInlineCompletionProvider {\n    pub const DEBOUNCE_TIMEOUT: Duration = Duration::from_millis(8);\n\n    pub fn new(\n        zeta: Entity<Zeta>,\n        workspace: WeakEntity<Workspace>,\n        data_collection_choice: DataCollectionChoice,\n    ) -> Self {\n        Self {\n            zeta,\n            pending_completions: ArrayVec::new(),\n            next_pending_completion_id: 0,\n            current_completion: None,\n            workspace,\n            data_collection_choice,\n        }\n    }\n}\n\nimpl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n    fn name() -> &'static str {\n        \"zed-predict\"\n    }\n\n    fn display_name() -> &'static str {\n        \"Zed Predict\"\n    }\n\n    fn show_completions_in_menu() -> bool {\n        true\n    }\n\n    fn show_completions_in_normal_mode() -> bool {\n        true\n    }\n\n    fn show_tab_accept_marker() -> bool {\n        true\n    }\n\n    fn show_data_collection_toggle() -> bool {\n        true\n    }\n\n    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n        self.data_collection_choice.is_enabled()\n    }\n\n    fn toggle_data_collection(&self, _cx: &mut App) {\n        self.data_collection_choice.toggle();\n    }\n\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool {\n        let buffer = buffer.read(cx);\n        let file = buffer.file();\n        let language = buffer.language_at(cursor_position);\n        let settings = all_language_settings(file, cx);\n        settings.inline_completions_enabled(language.as_ref(), file.map(|f| f.path().as_ref()), cx)\n    }\n\n    fn needs_terms_acceptance(&self, cx: &App) -> bool {\n        !self.zeta.read(cx).tos_accepted\n<|editable_region_end|>\n    fn needs_terms_acceptance(&self, cx: &App) -> bool {\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/zeta/src/zeta.rs\n                }\n<|editable_region_start|>\n\n                let diff =\n                    similar::TextDiff::from_lines(&old_snapshot.text(), &new_snapshot.text())\n                        .unified_diff()\n                        .to_string();\n                if !diff.is_empty() {\n                    write!(\n                        prompt,\n                        \"User edited {:?}:\\n```diff\\n{}\\n```\",\n                        new_path, diff\n                    )\n                    .unwrap();\n                }\n\n                prompt\n            }\n        }\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct CurrentInlineCompletion {\n    buffer_id: EntityId,\n    completion: InlineCompletion,\n}\n\nimpl CurrentInlineCompletion {\n    fn should_replace_completion(&self, old_completion: &Self, snapshot: &BufferSnapshot) -> bool {\n        if self.buffer_id != old_completion.buffer_id {\n            return true;\n        }\n\n        let Some(old_edits) = old_completion.completion.interpolate(&snapshot) else {\n            return true;\n        };\n        let Some(new_edits) = self.completion.interpolate(&snapshot) else {\n            return false;\n        };\n\n        if old_edits.len() == 1 && new_edits.len() == 1 {\n            let (old_range, old_text) = &old_edits[0];\n            let (new_range, new_text) = &new_edits[0];\n            new_range == old_range && new_text.starts_with(old_text)\n        } else {\n            true\n        }\n    }\n}\n\nstruct PendingCompletion {\n    id: usize,\n    _task: Task<()>,\n}\n\npub enum DataCollectionChoice {\n    NotAnswered,\n    Enabled,\n    Disabled,\n}\n\nimpl DataCollectionChoice {\n    pub fn is_enabled(&self) -> bool {\n        match self {\n            Self::Enabled => true,\n            Self::NotAnswered | Self::Disabled => false,\n        }\n    }\n\n    pub fn is_answered(&self) -> bool {\n        match self {\n            Self::Enabled | Self::Disabled => true,\n            Self::NotAnswered => false,\n        }\n    }\n    \n    p<|user_cursor_is_here|>\n}\n\npub struct ZetaInlineCompletionProvider {\n    zeta: Entity<Zeta>,\n    workspace: WeakEntity<Workspace>,\n    pending_completions: ArrayVec<PendingCompletion, 2>,\n    next_pending_completion_id: usize,\n    current_completion: Option<CurrentInlineCompletion>,\n    data_collection_choice: DataCollectionChoice,\n}\n\nimpl ZetaInlineCompletionProvider {\n    pub const DEBOUNCE_TIMEOUT: Duration = Duration::from_millis(8);\n\n    pub fn new(\n        zeta: Entity<Zeta>,\n        workspace: WeakEntity<Workspace>,\n        data_collection_choice: DataCollectionChoice,\n    ) -> Self {\n        Self {\n            zeta,\n            pending_completions: ArrayVec::new(),\n            next_pending_completion_id: 0,\n            current_completion: None,\n            workspace,\n            data_collection_choice,\n        }\n    }\n}\n\nimpl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n    fn name() -> &'static str {\n        \"zed-predict\"\n    }\n\n    fn display_name() -> &'static str {\n        \"Zed Predict\"\n    }\n\n    fn show_completions_in_menu() -> bool {\n        true\n    }\n\n    fn show_completions_in_normal_mode() -> bool {\n        true\n    }\n\n    fn show_tab_accept_marker() -> bool {\n        true\n    }\n\n    fn show_data_collection_toggle() -> bool {\n        true\n    }\n\n    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n        self.data_collection_choice.is_enabled()\n    }\n\n    fn toggle_data_collection(&self, _cx: &mut App) {\n        self.data_collection_choice.toggle();\n    }\n\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool {\n        let buffer = buffer.read(cx);\n        let file = buffer.file();\n        let language = buffer.language_at(cursor_position);\n        let settings = all_language_settings(file, cx);\n        settings.inline_completions_enabled(language.as_ref(), file.map(|f| f.path().as_ref()), cx)\n    }\n\n    fn needs_terms_acceptance(&self, cx: &App) -> bool {\n        !self.zeta.read(cx).tos_accepted\n<|editable_region_end|>\n    fn needs_terms_acceptance(&self, cx: &App) -> bool {\n```"
  },
  "max_tokens": 1024
}