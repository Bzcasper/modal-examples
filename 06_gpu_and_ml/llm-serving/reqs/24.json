{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"next.config.mjs\":\n```diff\n@@ -15,7 +15,7 @@\n     },\n }\n \n-const JOBS_DIRECTORY = \"src/content/jobs\"\n+const JOBS_DIRECTORY_TEST = \"src/content/jobs\"\n \n const jobEntries = fs\n     .readdirSync(JOBS_DIRECTORY)\n\n```\n\nUser edited \"next.config.mjs\":\n```diff\n@@ -18,7 +18,7 @@\n const JOBS_DIRECTORY_TEST = \"src/content/jobs\"\n \n const jobEntries = fs\n-    .readdirSync(JOBS_DIRECTORY)\n+    .readdirSync(JOBS_DIRECTORY_TEST)\n     .filter((entry) => entry.endsWith(\".md\"))\n \n const visibleJobPostings = jobEntries.flatMap((jobEntry) => {\n\n```\n\n### Input:\n```next.config.mjs\n<|start_of_file|>\n<|editable_region_start|>\nimport createMdx from \"@next/mdx\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport rehypePrettyCode from \"rehype-pretty-code\"\nimport rehypeSlug from \"rehype-slug\"\nimport remarkFrontmatter from \"remark-frontmatter\"\nimport remarkGfm from \"remark-gfm\"\nimport remarkMdxFrontmatter from \"remark-mdx-frontmatter\"\nimport remarkUnwrapImages from \"remark-unwrap-images\"\n\nconst rehypePrettyCodeOptions = {\n    theme: {\n        dark: \"dark-plus\",\n        light: \"light-plus\",\n    },\n}\n\nconst JOBS_DIRECTORY_TEST = \"src/content/jobs\"\n\nconst jobEntries = fs\n    .readdirSync(JOBS_DIRECTORY_TEST<|user_cursor_is_here|>)\n    .filter((entry) => entry.endsWith(\".md\"))\n\nconst visibleJobPostings = jobEntries.flatMap((jobEntry) => {\n    const contents = fs.readFileSync(\n        path.join(JOBS_DIRECTORY, jobEntry),\n        \"utf-8\",\n    )\n    const [_, rawFrontMatter, body] = contents.split(\"---\")\n    if (!rawFrontMatter || !body) {\n        return []\n    }\n\n    const frontMatter = rawFrontMatter\n        .split(\"\\n\")\n        .map((line) =>\n            line\n                .split(\":\")\n                .map((part) => part.trim())\n                .filter((part) => !!part),\n        )\n        .filter((line) => line.length)\n\n    const getValue = (name) => {\n        const pair = frontMatter.find(([key, _value]) => key === name)\n        if (!pair) {\n            return undefined\n        }\n\n        const [_key, value] = pair\n\n        return value\n    }\n\n    const title = getValue(\"title\")\n    const slug = getValue(\"slug\")\n    const hidden = getValue(\"hidden\")\n\n    const parsedFrontMatter = JSON.parse(`{\n       \"title\": ${JSON.stringify(title)},\n       \"slug\": ${JSON.stringify(slug)},\n       \"hidden\": ${hidden}\n    }`)\n\n    if (parsedFrontMatter.hidden) {\n        return []\n    }\n\n    return [parsedFrontMatter]\n})\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n    pageExtensions: [\"js\", \"jsx\", \"ts\", \"tsx\", \"mdx\"],\n    env: {\n        // We're setting these environment variables so that they are present at build time,\n        // as we need them to know whether to show job-related info in the `Footer` and `AboutNav`.\n        //\n        // Computing that state on every page is a pain, so we do it at build-time instead.\n        HAS_VISIBLE_JOB_POSTINGS: String(visibleJobPostings.length > 0),\n        VISIBLE_JOB_POSTINGS: JSON.stringify(visibleJobPostings),\n    },\n    images: {\n        remotePatterns: [\n            {\n                protocol: \"https\",\n                hostname: \"githubusercontent.com\",\n            },\n            {\n                protocol: \"https\",\n                hostname: \"github.com\",\n            },\n            {\n                protocol: \"https\",\n                hostname: \"avatars.githubusercontent.com\",\n                port: \"\",\n                pathname: \"/u/**\",\n            },\n            {\n                protocol: \"https\",\n                hostname: \"pbs.twimg.com\", // Twitter\n            },\n        ],\n    },\n    async redirects() {\n        return [\n            {\n                source: \"/docs\",\n                destination: \"/docs/getting-started\",\n                permanent: false,\n            },\n            {\n                source: \"/system-requirements\",\n                destination: \"/docs/getting-started\",\n                permanent: false,\n            },\n            {\n                source: \"/releases\",\n                destination: \"/releases/stable\",\n                permanent: false,\n            },\n            {\n                source: \"/releases/latest\",\n                destination: \"/releases\",\n                permanent: false,\n            },\n            {\n                source: \"/preview\",\n                destination: \"/releases/preview\",\n                permanent: false,\n            },\n            {\n                source: \"/preview/latest\",\n                destination: \"/releases/preview\",\n                permanent: false,\n            },\n            {\n                source: \"/languages/:path\",\n                destination:\n                    \"https://github.com/zed-industries/zed/tree/main/docs/src/languages/:path.md\",\n<|editable_region_end|>\n                destination:\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```next.config.mjs\n<|start_of_file|>\n<|editable_region_start|>\nimport createMdx from \"@next/mdx\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport rehypePrettyCode from \"rehype-pretty-code\"\nimport rehypeSlug from \"rehype-slug\"\nimport remarkFrontmatter from \"remark-frontmatter\"\nimport remarkGfm from \"remark-gfm\"\nimport remarkMdxFrontmatter from \"remark-mdx-frontmatter\"\nimport remarkUnwrapImages from \"remark-unwrap-images\"\n\nconst rehypePrettyCodeOptions = {\n    theme: {\n        dark: \"dark-plus\",\n        light: \"light-plus\",\n    },\n}\n\nconst JOBS_DIRECTORY_TEST = \"src/content/jobs\"\n\nconst jobEntries = fs\n    .readdirSync(JOBS_DIRECTORY_TEST<|user_cursor_is_here|>)\n    .filter((entry) => entry.endsWith(\".md\"))\n\nconst visibleJobPostings = jobEntries.flatMap((jobEntry) => {\n    const contents = fs.readFileSync(\n        path.join(JOBS_DIRECTORY, jobEntry),\n        \"utf-8\",\n    )\n    const [_, rawFrontMatter, body] = contents.split(\"---\")\n    if (!rawFrontMatter || !body) {\n        return []\n    }\n\n    const frontMatter = rawFrontMatter\n        .split(\"\\n\")\n        .map((line) =>\n            line\n                .split(\":\")\n                .map((part) => part.trim())\n                .filter((part) => !!part),\n        )\n        .filter((line) => line.length)\n\n    const getValue = (name) => {\n        const pair = frontMatter.find(([key, _value]) => key === name)\n        if (!pair) {\n            return undefined\n        }\n\n        const [_key, value] = pair\n\n        return value\n    }\n\n    const title = getValue(\"title\")\n    const slug = getValue(\"slug\")\n    const hidden = getValue(\"hidden\")\n\n    const parsedFrontMatter = JSON.parse(`{\n       \"title\": ${JSON.stringify(title)},\n       \"slug\": ${JSON.stringify(slug)},\n       \"hidden\": ${hidden}\n    }`)\n\n    if (parsedFrontMatter.hidden) {\n        return []\n    }\n\n    return [parsedFrontMatter]\n})\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n    pageExtensions: [\"js\", \"jsx\", \"ts\", \"tsx\", \"mdx\"],\n    env: {\n        // We're setting these environment variables so that they are present at build time,\n        // as we need them to know whether to show job-related info in the `Footer` and `AboutNav`.\n        //\n        // Computing that state on every page is a pain, so we do it at build-time instead.\n        HAS_VISIBLE_JOB_POSTINGS: String(visibleJobPostings.length > 0),\n        VISIBLE_JOB_POSTINGS: JSON.stringify(visibleJobPostings),\n    },\n    images: {\n        remotePatterns: [\n            {\n                protocol: \"https\",\n                hostname: \"githubusercontent.com\",\n            },\n            {\n                protocol: \"https\",\n                hostname: \"github.com\",\n            },\n            {\n                protocol: \"https\",\n                hostname: \"avatars.githubusercontent.com\",\n                port: \"\",\n                pathname: \"/u/**\",\n            },\n            {\n                protocol: \"https\",\n                hostname: \"pbs.twimg.com\", // Twitter\n            },\n        ],\n    },\n    async redirects() {\n        return [\n            {\n                source: \"/docs\",\n                destination: \"/docs/getting-started\",\n                permanent: false,\n            },\n            {\n                source: \"/system-requirements\",\n                destination: \"/docs/getting-started\",\n                permanent: false,\n            },\n            {\n                source: \"/releases\",\n                destination: \"/releases/stable\",\n                permanent: false,\n            },\n            {\n                source: \"/releases/latest\",\n                destination: \"/releases\",\n                permanent: false,\n            },\n            {\n                source: \"/preview\",\n                destination: \"/releases/preview\",\n                permanent: false,\n            },\n            {\n                source: \"/preview/latest\",\n                destination: \"/releases/preview\",\n                permanent: false,\n            },\n            {\n                source: \"/languages/:path\",\n                destination:\n                    \"https://github.com/zed-industries/zed/tree/main/docs/src/languages/:path.md\",\n<|editable_region_end|>\n                destination:\n```"
  },
  "max_tokens": 1024
}