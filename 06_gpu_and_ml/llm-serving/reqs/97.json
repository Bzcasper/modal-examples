{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1618,6 +1618,8 @@\n         {\n             return;\n         }\n+        \n+        // TODO: \n \n         let Some(file) = snapshot.file() else {\n             return; // Need a file to check the project preferences and ask for data collecting\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1618,9 +1618,9 @@\n         {\n             return;\n         }\n-        \n-        // TODO: \n \n+        // TODO: use project_path\n+\n         let Some(file) = snapshot.file() else {\n             return; // Need a file to check the project preferences and ask for data collecting\n         };\n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -201,7 +201,6 @@\n     llm_token: LlmApiToken,\n     _llm_token_subscription: Subscription,\n     tos_accepted: bool, // Terms of service accepted\n-    data_collection_enabled: bool,\n     _user_store_subscription: Subscription,\n }\n \n\n```\n\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1618,7 +1618,7 @@\n             return;\n         }\n \n-        // TODO: use project_path\n+        // TODO az: use project_path\n \n         let Some(file) = snapshot.file() else {\n             return; // Need a file to check the project preferences and ask for data collecting\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -228,7 +228,7 @@\n     let singleton_buffer = editor.buffer().read(cx).as_singleton();\n \n     match provider {\n-        language::language_settings::InlineCompletionProvider::None => {}\n+        InlineCompletionProvider::None => {}\n         language::language_settings::InlineCompletionProvider::Copilot => {\n             if let Some(copilot) = Copilot::global(cx) {\n                 if let Some(buffer) = singleton_buffer {\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -229,7 +229,7 @@\n \n     match provider {\n         InlineCompletionProvider::None => {}\n-        language::language_settings::InlineCompletionProvider::Copilot => {\n+        InlineCompletionProvider::Copilot => {\n             if let Some(copilot) = Copilot::global(cx) {\n                 if let Some(buffer) = singleton_buffer {\n                     if buffer.read(cx).file().is_some() {\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -242,7 +242,7 @@\n                 editor.set_inline_completion_provider(Some(provider), window, cx);\n             }\n         }\n-        language::language_settings::InlineCompletionProvider::Supermaven => {\n+        InlineCompletionProvider::Supermaven => {\n             if let Some(supermaven) = Supermaven::global(cx) {\n                 let provider = cx.new(|_| SupermavenCompletionProvider::new(supermaven));\n                 editor.set_inline_completion_provider(Some(provider), window, cx);\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -248,7 +248,7 @@\n                 editor.set_inline_completion_provider(Some(provider), window, cx);\n             }\n         }\n-        language::language_settings::InlineCompletionProvider::Zed => {\n+        InlineCompletionProvider::Zed => {\n             if cx.has_flag::<PredictEditsFeatureFlag>()\n                 || (cfg!(debug_assertions) && client.status().borrow().is_connected())\n             {\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -219,7 +219,7 @@\n \n fn assign_inline_completion_provider(\n     editor: &mut Editor,\n-    provider: language::language_settings::InlineCompletionProvider,\n+    provider: InlineCompletionProvider,\n     client: &Arc<Client>,\n     user_store: Entity<UserStore>,\n     window: &mut Window,\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -279,6 +279,7 @@\n                         zeta::ZetaInlineCompletionProvider::new(\n                             zeta,\n                             workspace.downgrade(),\n+                            project_abs_path,\n                             data_collection_choice,\n                         )\n                     });\n\n```\n\n### Input:\n```crates/zeta/src/zeta.rs\n        if self.buffer_id != old_completion.buffer_id {\n<|editable_region_start|>\n            return true;\n        }\n\n        let Some(old_edits) = old_completion.completion.interpolate(&snapshot) else {\n            return true;\n        };\n        let Some(new_edits) = self.completion.interpolate(&snapshot) else {\n            return false;\n        };\n\n        if old_edits.len() == 1 && new_edits.len() == 1 {\n            let (old_range, old_text) = &old_edits[0];\n            let (new_range, new_text) = &new_edits[0];\n            new_range == old_range && new_text.starts_with(old_text)\n        } else {\n            true\n        }\n    }\n}\n\nstruct PendingCompletion {\n    id: usize,\n    _task: Task<()>,\n}\n\npub enum DataCollectionChoice {\n    NotAnswered,\n    Enabled,\n    Disabled,\n}\n\nimpl DataCollectionChoice {\n    pub fn is_enabled(&self) -> bool {\n        match self {\n            Self::Enabled => true,\n            Self::NotAnswered | Self::Disabled => false,\n        }\n    }\n\n    pub fn is_answered(&self) -> bool {\n        match self {\n            Self::Enabled | Self::Disabled => true,\n            Self::NotAnswered => false,\n        }\n    }\n\n    pub fn toggle(&self) -> DataCollectionChoice {\n        match self {\n            Self::Enabled => Self::Disabled,\n            Self::Disabled => Self::Enabled,\n            Self::NotAnswered => Self::Enabled,\n        }\n    }\n}\n\npub struct ZetaInlineCompletionProvider {\n    zeta: Entity<Zeta>,\n    workspace: WeakEntity<Workspace>,\n    pending_completions: ArrayVec<PendingCompletion, 2>,\n    next_pending_completion_id: usize,\n    current_completion: Option<CurrentInlineCompletion>,\n    project_abs_path: PathBuf,\n    data_collection_choice: DataCollectionChoice,\n}\n\nimpl ZetaInlineCompletionProvider {\n    pub const DEBOUNCE_TIMEOUT: Duration = Duration::from_millis(8);\n\n    pub fn new(\n        zeta: Entity<Zeta>,\n        workspace: WeakEntity<Workspace>,\n        data_collection_choice: DataCollectionChoice,\n        project_abs_path: Option<PathBuf><|user_cursor_is_here|>,\n    ) -> Self {\n        Self {\n            zeta,\n            pending_completions: ArrayVec::new(),\n            next_pending_completion_id: 0,\n            current_completion: None,\n            workspace,\n            project_abs_path,\n            data_collection_choice,\n        }\n    }\n}\n\nimpl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n    fn name() -> &'static str {\n        \"zed-predict\"\n    }\n\n    fn display_name() -> &'static str {\n        \"Zed's Edit Predictions\"\n    }\n\n    fn show_completions_in_menu() -> bool {\n        true\n    }\n\n    fn show_completions_in_normal_mode() -> bool {\n        true\n    }\n\n    fn show_tab_accept_marker() -> bool {\n        true\n    }\n\n    fn show_data_collection_toggle() -> bool {\n        true\n    }\n\n    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n        self.data_collection_choice.is_enabled()\n    }\n\n    fn toggle_data_collection(&mut self, cx: &mut App) {\n        self.data_collection_choice = self.data_collection_choice.toggle();\n\n        let abs_path = self.project_abs_path.clone();\n        self.zeta.update(cx, |zeta, cx| {\n            zeta.update_data_collection_preference_for_project(\n                abs_path,\n                self.data_collection_choice.is_enabled(),\n                cx,\n            )\n        });\n    }\n\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool {\n        let buffer = buffer.read(cx);\n        let file = buffer.file();\n        let language = buffer.language_at(cursor_position);\n        let settings = all_language_settings(file, cx);\n        settings.inline_completions_enabled(language.as_ref(), file.map(|f| f.path().as_ref()), cx)\n    }\n\n    fn needs_terms_acceptance(&self, cx: &App) -> bool {\n        !self.zeta.read(cx).tos_accepted\n    }\n\n    fn is_refreshing(&self) -> bool {\n        !self.pending_completions.is_empty()\n    }\n\n    fn refresh(\n        &mut self,\n        buffer: Entity<Buffer>,\n<|editable_region_end|>\n        &mut self,\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/zeta/src/zeta.rs\n        if self.buffer_id != old_completion.buffer_id {\n<|editable_region_start|>\n            return true;\n        }\n\n        let Some(old_edits) = old_completion.completion.interpolate(&snapshot) else {\n            return true;\n        };\n        let Some(new_edits) = self.completion.interpolate(&snapshot) else {\n            return false;\n        };\n\n        if old_edits.len() == 1 && new_edits.len() == 1 {\n            let (old_range, old_text) = &old_edits[0];\n            let (new_range, new_text) = &new_edits[0];\n            new_range == old_range && new_text.starts_with(old_text)\n        } else {\n            true\n        }\n    }\n}\n\nstruct PendingCompletion {\n    id: usize,\n    _task: Task<()>,\n}\n\npub enum DataCollectionChoice {\n    NotAnswered,\n    Enabled,\n    Disabled,\n}\n\nimpl DataCollectionChoice {\n    pub fn is_enabled(&self) -> bool {\n        match self {\n            Self::Enabled => true,\n            Self::NotAnswered | Self::Disabled => false,\n        }\n    }\n\n    pub fn is_answered(&self) -> bool {\n        match self {\n            Self::Enabled | Self::Disabled => true,\n            Self::NotAnswered => false,\n        }\n    }\n\n    pub fn toggle(&self) -> DataCollectionChoice {\n        match self {\n            Self::Enabled => Self::Disabled,\n            Self::Disabled => Self::Enabled,\n            Self::NotAnswered => Self::Enabled,\n        }\n    }\n}\n\npub struct ZetaInlineCompletionProvider {\n    zeta: Entity<Zeta>,\n    workspace: WeakEntity<Workspace>,\n    pending_completions: ArrayVec<PendingCompletion, 2>,\n    next_pending_completion_id: usize,\n    current_completion: Option<CurrentInlineCompletion>,\n    project_abs_path: PathBuf,\n    data_collection_choice: DataCollectionChoice,\n}\n\nimpl ZetaInlineCompletionProvider {\n    pub const DEBOUNCE_TIMEOUT: Duration = Duration::from_millis(8);\n\n    pub fn new(\n        zeta: Entity<Zeta>,\n        workspace: WeakEntity<Workspace>,\n        data_collection_choice: DataCollectionChoice,\n        project_abs_path: Option<PathBuf><|user_cursor_is_here|>,\n    ) -> Self {\n        Self {\n            zeta,\n            pending_completions: ArrayVec::new(),\n            next_pending_completion_id: 0,\n            current_completion: None,\n            workspace,\n            project_abs_path,\n            data_collection_choice,\n        }\n    }\n}\n\nimpl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n    fn name() -> &'static str {\n        \"zed-predict\"\n    }\n\n    fn display_name() -> &'static str {\n        \"Zed's Edit Predictions\"\n    }\n\n    fn show_completions_in_menu() -> bool {\n        true\n    }\n\n    fn show_completions_in_normal_mode() -> bool {\n        true\n    }\n\n    fn show_tab_accept_marker() -> bool {\n        true\n    }\n\n    fn show_data_collection_toggle() -> bool {\n        true\n    }\n\n    fn is_data_collection_enabled(&self, _cx: &App) -> bool {\n        self.data_collection_choice.is_enabled()\n    }\n\n    fn toggle_data_collection(&mut self, cx: &mut App) {\n        self.data_collection_choice = self.data_collection_choice.toggle();\n\n        let abs_path = self.project_abs_path.clone();\n        self.zeta.update(cx, |zeta, cx| {\n            zeta.update_data_collection_preference_for_project(\n                abs_path,\n                self.data_collection_choice.is_enabled(),\n                cx,\n            )\n        });\n    }\n\n    fn is_enabled(\n        &self,\n        buffer: &Entity<Buffer>,\n        cursor_position: language::Anchor,\n        cx: &App,\n    ) -> bool {\n        let buffer = buffer.read(cx);\n        let file = buffer.file();\n        let language = buffer.language_at(cursor_position);\n        let settings = all_language_settings(file, cx);\n        settings.inline_completions_enabled(language.as_ref(), file.map(|f| f.path().as_ref()), cx)\n    }\n\n    fn needs_terms_acceptance(&self, cx: &App) -> bool {\n        !self.zeta.read(cx).tos_accepted\n    }\n\n    fn is_refreshing(&self) -> bool {\n        !self.pending_completions.is_empty()\n    }\n\n    fn refresh(\n        &mut self,\n        buffer: Entity<Buffer>,\n<|editable_region_end|>\n        &mut self,\n```"
  },
  "max_tokens": 1024
}