{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"script/danger/dangerfile.ts\":\n```diff\n@@ -9,7 +9,7 @@\n });\n \n const RELEASE_NOTES_PATTERN = /Release Notes:\\r?\\n\\s+-/gm;\n-const body = danger.github.pr.body;\n+const body = <danger>.github.pr.body;\n \n const hasReleaseNotes = RELEASE_NOTES_PATTERN.test(body);\n \n\n```\n\nUser edited \"script/danger/dangerfile.ts\":\n```diff\n@@ -9,7 +9,7 @@\n });\n \n const RELEASE_NOTES_PATTERN = /Release Notes:\\r?\\n\\s+-/gm;\n-const body = <danger>.github.pr.body;\n+const body = danger.github.pr.body;\n \n const hasReleaseNotes = RELEASE_NOTES_PATTERN.test(body);\n \n\n```\n\nUser edited \"testing\":\n```diff\n@@ -0,0 +1 @@\n+{\"foo\": \"bar\"}\n\\ No newline at end of file\n\n```\n\nUser edited \"testing\":\n```diff\n@@ -1 +1 @@\n-{\"foo\": \"bar\"}\n\\ No newline at end of file\n+{\"foo\": \"bar\", \"baz\": 1}\n\\ No newline at end of file\n\n```\n\nUser edited \"testing\":\n```diff\n@@ -1 +1 @@\n-{\"foo\": \"bar\", \"baz\": 1}\n\\ No newline at end of file\n+{\"foo\": \"bar\", \"baz\": 1}\n\n```\n\n\n\n\n\n\n\nUser edited \"untitled\":\n```diff\n@@ -1,7 +1,7 @@\n ## 2025 Triage Party\n \n Pre-issue party count: **3189** ðŸ˜­ (bug: 1438, enhancement: 1536)\n-Post-issue party count: **???** ðŸŽ‰\n+Post-issue party count: **???** ðŸŽ‰ 3043\n \n 1000-ft goal: To foster a loyal community of Zed advocates by:\n  * engaging with people\n\n```\n\n### Input:\n```cli/generate/src/build_tables/minimize_parse_table.rs\n<|editable_region_start|>\n<|user_cursor_is_here|>use std::{\n    collections::{HashMap, HashSet},\n    mem,\n};\n\nuse log::info;\n\nuse super::token_conflicts::TokenConflictMap;\nuse crate::{\n    dedup::split_state_id_groups,\n    grammars::{LexicalGrammar, SyntaxGrammar, VariableType},\n    rules::{AliasMap, Symbol, TokenSet},\n    tables::{GotoAction, ParseAction, ParseState, ParseStateId, ParseTable, ParseTableEntry},\n};\n\npub fn minimize_parse_table(\n    parse_table: &mut ParseTable,\n    syntax_grammar: &SyntaxGrammar,\n    lexical_grammar: &LexicalGrammar,\n    simple_aliases: &AliasMap,\n    token_conflict_map: &TokenConflictMap,\n    keywords: &TokenSet,\n) {\n    let mut minimizer = Minimizer {\n        parse_table,\n        syntax_grammar,\n        lexical_grammar,\n        token_conflict_map,\n        keywords,\n        simple_aliases,\n    };\n    minimizer.merge_compatible_states();\n    minimizer.remove_unit_reductions();\n    minimizer.remove_unused_states();\n    minimizer.reorder_states_by_descending_size();\n}\n\nstruct Minimizer<'a> {\n    parse_table: &'a mut ParseTable,\n    syntax_grammar: &'a SyntaxGrammar,\n    lexical_grammar: &'a LexicalGrammar,\n    token_conflict_map: &'a TokenConflictMap<'a>,\n    keywords: &'a TokenSet,\n    simple_aliases: &'a AliasMap,\n}\n\nimpl Minimizer<'_> {\n    fn remove_unit_reductions(&mut self) {\n        let mut aliased_symbols = HashSet::new();\n        for variable in &self.syntax_grammar.variables {\n            for production in &variable.productions {\n                for step in &production.steps {\n                    if step.alias.is_some() {\n                        aliased_symbols.insert(step.symbol);\n                    }\n                }\n            }\n        }\n\n        let mut unit_reduction_symbols_by_state = HashMap::new();\n        for (i, state) in self.parse_table.states.iter().enumerate() {\n            let mut only_unit_reductions = true;\n            let mut unit_reduction_symbol = None;\n            for (_, entry) in &state.terminal_entries {\n                for action in &entry.actions {\n                    match action {\n                        ParseAction::ShiftExtra => continue,\n                        ParseAction::Reduce {\n                            child_count: 1,\n                            production_id: 0,\n                            symbol,\n                            ..\n                        } if !self.simple_aliases.contains_key(symbol)\n                            && !self.syntax_grammar.supertype_symbols.contains(symbol)\n                            && !self.syntax_grammar.extra_symbols.contains(symbol)\n                            && !aliased_symbols.contains(symbol)\n                            && self.syntax_grammar.variables[symbol.index].kind\n                                != VariableType::Named\n                            && (unit_reduction_symbol.is_none()\n                                || unit_reduction_symbol == Some(symbol)) =>\n                        {\n                            unit_reduction_symbol = Some(symbol);\n                            continue;\n                        }\n                        _ => {}\n                    }\n                    only_unit_reductions = false;\n                    break;\n                }\n\n                if !only_unit_reductions {\n                    break;\n                }\n            }\n\n            if let Some(symbol) = unit_reduction_symbol {\n                if only_unit_reductions {\n                    unit_reduction_symbols_by_state.insert(i, *symbol);\n                }\n            }\n        }\n\n        for state in &mut self.parse_table.states {\n            let mut done = false;\n            while !done {\n                done = true;\n                state.update_referenced_states(|other_state_id, state| {\n                    unit_reduction_symbols_by_state.get(&other_state_id).map_or(\n                        other_state_id,\n                        |symbol| {\n                            done = false;\n                            match state.nonterminal_entries.get(symbol) {\n<|editable_region_end|>\n                            done = false;\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```cli/generate/src/build_tables/minimize_parse_table.rs\n<|editable_region_start|>\n<|user_cursor_is_here|>use std::{\n    collections::{HashMap, HashSet},\n    mem,\n};\n\nuse log::info;\n\nuse super::token_conflicts::TokenConflictMap;\nuse crate::{\n    dedup::split_state_id_groups,\n    grammars::{LexicalGrammar, SyntaxGrammar, VariableType},\n    rules::{AliasMap, Symbol, TokenSet},\n    tables::{GotoAction, ParseAction, ParseState, ParseStateId, ParseTable, ParseTableEntry},\n};\n\npub fn minimize_parse_table(\n    parse_table: &mut ParseTable,\n    syntax_grammar: &SyntaxGrammar,\n    lexical_grammar: &LexicalGrammar,\n    simple_aliases: &AliasMap,\n    token_conflict_map: &TokenConflictMap,\n    keywords: &TokenSet,\n) {\n    let mut minimizer = Minimizer {\n        parse_table,\n        syntax_grammar,\n        lexical_grammar,\n        token_conflict_map,\n        keywords,\n        simple_aliases,\n    };\n    minimizer.merge_compatible_states();\n    minimizer.remove_unit_reductions();\n    minimizer.remove_unused_states();\n    minimizer.reorder_states_by_descending_size();\n}\n\nstruct Minimizer<'a> {\n    parse_table: &'a mut ParseTable,\n    syntax_grammar: &'a SyntaxGrammar,\n    lexical_grammar: &'a LexicalGrammar,\n    token_conflict_map: &'a TokenConflictMap<'a>,\n    keywords: &'a TokenSet,\n    simple_aliases: &'a AliasMap,\n}\n\nimpl Minimizer<'_> {\n    fn remove_unit_reductions(&mut self) {\n        let mut aliased_symbols = HashSet::new();\n        for variable in &self.syntax_grammar.variables {\n            for production in &variable.productions {\n                for step in &production.steps {\n                    if step.alias.is_some() {\n                        aliased_symbols.insert(step.symbol);\n                    }\n                }\n            }\n        }\n\n        let mut unit_reduction_symbols_by_state = HashMap::new();\n        for (i, state) in self.parse_table.states.iter().enumerate() {\n            let mut only_unit_reductions = true;\n            let mut unit_reduction_symbol = None;\n            for (_, entry) in &state.terminal_entries {\n                for action in &entry.actions {\n                    match action {\n                        ParseAction::ShiftExtra => continue,\n                        ParseAction::Reduce {\n                            child_count: 1,\n                            production_id: 0,\n                            symbol,\n                            ..\n                        } if !self.simple_aliases.contains_key(symbol)\n                            && !self.syntax_grammar.supertype_symbols.contains(symbol)\n                            && !self.syntax_grammar.extra_symbols.contains(symbol)\n                            && !aliased_symbols.contains(symbol)\n                            && self.syntax_grammar.variables[symbol.index].kind\n                                != VariableType::Named\n                            && (unit_reduction_symbol.is_none()\n                                || unit_reduction_symbol == Some(symbol)) =>\n                        {\n                            unit_reduction_symbol = Some(symbol);\n                            continue;\n                        }\n                        _ => {}\n                    }\n                    only_unit_reductions = false;\n                    break;\n                }\n\n                if !only_unit_reductions {\n                    break;\n                }\n            }\n\n            if let Some(symbol) = unit_reduction_symbol {\n                if only_unit_reductions {\n                    unit_reduction_symbols_by_state.insert(i, *symbol);\n                }\n            }\n        }\n\n        for state in &mut self.parse_table.states {\n            let mut done = false;\n            while !done {\n                done = true;\n                state.update_referenced_states(|other_state_id, state| {\n                    unit_reduction_symbols_by_state.get(&other_state_id).map_or(\n                        other_state_id,\n                        |symbol| {\n                            done = false;\n                            match state.nonterminal_entries.get(symbol) {\n<|editable_region_end|>\n                            done = false;\n```"
  },
  "max_tokens": 1024
}