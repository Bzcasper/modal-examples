{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -2523,7 +2523,7 @@\n                 staged_text = change_set.staged_text.as_ref().map(|buffer| buffer.text());\n             }\n \n-            dbg!(proto::OpenUncommittedChangesResponse {\n+            proto::OpenUncommittedChangesResponse {\n                 committed_text,\n                 staged_text,\n                 mode: mode.into(),\n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -1572,13 +1572,7 @@\n                 }) = this.opened_buffers.get_mut(&buffer.read(cx).remote_id())\n                 {\n                     let change_set = change_set_state.update(cx, |change_set_state, cx| {\n-                        change_set_state.add_change_set(\n-                            buffer,\n-                            kind,\n-                            base_text,\n-                            staged_text,\n-                            cx,\n-                        )\n+                        change_set_state.add_change_set(buffer, kind, base_text, staged_text, cx)\n                     });\n                     Ok(change_set)\n                 } else {\n@@ -2527,7 +2521,7 @@\n                 committed_text,\n                 staged_text,\n                 mode: mode.into(),\n-            })\n+            }\n         })\n     }\n \n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -360,6 +360,8 @@\n                     }\n                 })?;\n             }\n+            \n+            // EMIT EVENT\n \n             Ok(())\n         }));\n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -361,7 +361,7 @@\n                 })?;\n             }\n             \n-            // EMIT EVENT\n+            // EMIT EVENT HERE\n \n             Ok(())\n         }));\n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -360,8 +360,6 @@\n                     }\n                 })?;\n             }\n-            \n-            // EMIT EVENT HERE\n \n             Ok(())\n         }));\n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -358,6 +358,8 @@\n                     for tx in this.diff_updated_futures.drain(..) {\n                         tx.send(()).ok();\n                     }\n+                    \n+                                // EMIT EVENT HERE\n                 })?;\n             }\n \n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -358,7 +358,9 @@\n                     for tx in this.diff_updated_futures.drain(..) {\n                         tx.send(()).ok();\n                     }\n-                    \n+                    if let Some(changed_range) = changed_range {\n+                        cx.emit(BufferChangeSetEvent::)\n+                    }\n                                 // EMIT EVENT HERE\n                 })?;\n             }\n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -359,7 +359,7 @@\n                         tx.send(()).ok();\n                     }\n                     if let Some(changed_range) = changed_range {\n-                        cx.emit(BufferChangeSetEvent::)\n+                        cx.emit(BufferChangeSetEvent)\n                     }\n                                 // EMIT EVENT HERE\n                 })?;\n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -359,7 +359,7 @@\n                         tx.send(()).ok();\n                     }\n                     if let Some(changed_range) = changed_range {\n-                        cx.emit(BufferChangeSetEvent)\n+                        cx.emit(BufferChangeSetEvent::)\n                     }\n                                 // EMIT EVENT HERE\n                 })?;\n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -359,7 +359,7 @@\n                         tx.send(()).ok();\n                     }\n                     if let Some(changed_range) = changed_range {\n-                        cx.emit(BufferChangeSetEvent::)\n+                        cx.emit(BufferChangeSetEvent::DiffChanged { changed_range: () })\n                     }\n                                 // EMIT EVENT HERE\n                 })?;\n\n```\n\nUser edited \"crates/project/src/buffer_store.rs\":\n```diff\n@@ -359,7 +359,7 @@\n                         tx.send(()).ok();\n                     }\n                     if let Some(changed_range) = changed_range {\n-                        cx.emit(BufferChangeSetEvent::DiffChanged { changed_range: () })\n+                        cx.emit(BufferChangeSetEvent::DiffChanged { changed_range });\n                     }\n                                 // EMIT EVENT HERE\n                 })?;\n\n```\n\n### Input:\n```crates/project/src/buffer_store.rs\n                        .read_with(&cx, |change_set, _| change_set.staged_text.clone())?;\n<|editable_region_start|>\n\n                    let diff = if index_matches_head {\n                        staged_text.as_ref().map(|buffer| BufferDiff::new(buffer))\n                    } else if let Some(staged_text) = staged_text {\n                        Some(\n                            cx.background_executor()\n                                .spawn(async move {\n                                    BufferDiff::build(\n                                        head.as_ref().map(|head| head.as_str()),\n                                        &staged_text,\n                                    )\n                                })\n                                .await,\n                        )\n                    } else {\n                        None\n                    };\n\n                    uncommitted_changes.update(&mut cx, |change_set, _| {\n                        change_set.staged_diff = diff;\n                    })?;\n                }\n            }\n\n            if let Some(this) = this.upgrade() {\n                this.update(&mut cx, |this, _| {\n                    this.index_changed = false;\n                    this.head_changed = false;\n                    for tx in this.diff_updated_futures.drain(..) {\n                        tx.send(()).ok();\n                    }\n                    if let Some(changed_range) = changed_range {\n                        cx.emit(BufferChangeSetEvent::DiffChanged { changed_range });<|user_cursor_is_here|>\n                    }\n                                // EMIT EVENT HERE\n                })?;\n            }\n\n            Ok(())\n        }));\n\n        rx\n    }\n}\n\npub struct BufferChangeSet {\n    pub buffer_id: BufferId,\n    pub base_text: Option<language::BufferSnapshot>,\n    pub diff_to_buffer: BufferDiff,\n    pub staged_text: Option<language::BufferSnapshot>,\n    // For an uncommitted changeset, this is the diff between HEAD and the index.\n    pub staged_diff: Option<BufferDiff>,\n}\n\npub enum BufferChangeSetEvent {\n    DiffChanged { changed_range: Range<text::Anchor> },\n}\n\nenum BufferStoreState {\n    Local(LocalBufferStore),\n    Remote(RemoteBufferStore),\n}\n\nstruct RemoteBufferStore {\n    shared_with_me: HashSet<Entity<Buffer>>,\n<|editable_region_end|>\n    upstream_client: AnyProtoClient,\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/project/src/buffer_store.rs\n                        .read_with(&cx, |change_set, _| change_set.staged_text.clone())?;\n<|editable_region_start|>\n\n                    let diff = if index_matches_head {\n                        staged_text.as_ref().map(|buffer| BufferDiff::new(buffer))\n                    } else if let Some(staged_text) = staged_text {\n                        Some(\n                            cx.background_executor()\n                                .spawn(async move {\n                                    BufferDiff::build(\n                                        head.as_ref().map(|head| head.as_str()),\n                                        &staged_text,\n                                    )\n                                })\n                                .await,\n                        )\n                    } else {\n                        None\n                    };\n\n                    uncommitted_changes.update(&mut cx, |change_set, _| {\n                        change_set.staged_diff = diff;\n                    })?;\n                }\n            }\n\n            if let Some(this) = this.upgrade() {\n                this.update(&mut cx, |this, _| {\n                    this.index_changed = false;\n                    this.head_changed = false;\n                    for tx in this.diff_updated_futures.drain(..) {\n                        tx.send(()).ok();\n                    }\n                    if let Some(changed_range) = changed_range {\n                        cx.emit(BufferChangeSetEvent::DiffChanged { changed_range });<|user_cursor_is_here|>\n                    }\n                                // EMIT EVENT HERE\n                })?;\n            }\n\n            Ok(())\n        }));\n\n        rx\n    }\n}\n\npub struct BufferChangeSet {\n    pub buffer_id: BufferId,\n    pub base_text: Option<language::BufferSnapshot>,\n    pub diff_to_buffer: BufferDiff,\n    pub staged_text: Option<language::BufferSnapshot>,\n    // For an uncommitted changeset, this is the diff between HEAD and the index.\n    pub staged_diff: Option<BufferDiff>,\n}\n\npub enum BufferChangeSetEvent {\n    DiffChanged { changed_range: Range<text::Anchor> },\n}\n\nenum BufferStoreState {\n    Local(LocalBufferStore),\n    Remote(RemoteBufferStore),\n}\n\nstruct RemoteBufferStore {\n    shared_with_me: HashSet<Entity<Buffer>>,\n<|editable_region_end|>\n    upstream_client: AnyProtoClient,\n```"
  },
  "max_tokens": 1024
}