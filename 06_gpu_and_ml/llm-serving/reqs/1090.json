{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/project/src/git.rs\":\n```diff\n@@ -15,7 +15,7 @@\n use rpc::{proto, AnyProtoClient};\n use settings::WorktreeId;\n use std::sync::Arc;\n-use text::Rope;\n+use text::Rope;sdasdsa\n use util::maybe;\n use worktree::{ProjectEntryId, RepositoryEntry, StatusEntry};\n \n\n```\n\nUser edited \"crates/project/src/git.rs\":\n```diff\n@@ -15,7 +15,7 @@\n use rpc::{proto, AnyProtoClient};\n use settings::WorktreeId;\n use std::sync::Arc;\n-use text::Rope;sdasdsa\n+use text::Rope;\n use util::maybe;\n use worktree::{ProjectEntryId, RepositoryEntry, StatusEntry};\n \n\n```\n\nUser edited \"untitled\":\n```diff\n@@ -103,7 +103,7 @@\n     - Etc.\n   \n ## Stretch\n-\n+- [ ] https://github.com/zed-industries/zed/issues/7566\n - [ ] Add \"debug: copy git state\" command\n     - Use to debug user issues as they start testing git_ui\n   - [ ] Smoother handling of open buffers whose backing file changes when switching branches\n\n```\n\n\n\nUser edited \"untitled\":\n```diff\n@@ -103,7 +103,7 @@\n     - Etc.\n   \n ## Stretch\n-- [ ] https://github.com/zed-industries/zed/issues/7566\n+- [ ] Show submodule branch on the GUI https://github.com/zed-industries/zed/issues/7566\n - [ ] Add \"debug: copy git state\" command\n     - Use to debug user issues as they start testing git_ui\n   - [ ] Smoother handling of open buffers whose backing file changes when switching branches\n\n```\n\n### Input:\n```crates/project/src/lsp_command.rs\n<|start_of_file|>\n<|editable_region_start|>\nmod signature_help;\n\nuse crate::{\n    lsp_store::{LocalLspStore, LspStore},\n    CodeAction, CoreCompletion, DocumentHighlight, Hover, HoverBlock, HoverBlockKind, InlayHint,\n    InlayHintLabel, InlayHintLabelPart, InlayHintLabelPartTooltip, InlayHintTooltip, Location,\n    LocationLink, MarkupContent, Prepar<|user_cursor_is_here|>eRenameResponse, ProjectTransaction, ResolveState,\n};\nuse anyhow::{anyhow, Context as _, Result};\nuse async_trait::async_trait;\nuse client::proto::{self, PeerId};\nuse clock::Global;\nuse collections::HashSet;\nuse futures::future;\nuse gpui::{App, AsyncApp, Entity};\nuse language::{\n    language_settings::{language_settings, InlayHintKind, LanguageSettings},\n    point_from_lsp, point_to_lsp,\n    proto::{deserialize_anchor, deserialize_version, serialize_anchor, serialize_version},\n    range_from_lsp, range_to_lsp, Anchor, Bias, Buffer, BufferSnapshot, CachedLspAdapter, CharKind,\n    OffsetRangeExt, PointUtf16, ToOffset, ToPointUtf16, Transaction, Unclipped,\n};\nuse lsp::{\n    AdapterServerCapabilities, CodeActionKind, CodeActionOptions, CompletionContext,\n    CompletionListItemDefaultsEditRange, CompletionTriggerKind, DocumentHighlightKind,\n    LanguageServer, LanguageServerId, LinkedEditingRangeServerCapabilities, OneOf, RenameOptions,\n    ServerCapabilities,\n};\nuse signature_help::{lsp_to_proto_signature, proto_to_lsp_signature};\nuse std::{cmp::Reverse, ops::Range, path::Path, sync::Arc};\nuse text::{BufferId, LineEnding};\n\npub use signature_help::{\n    SignatureHelp, SIGNATURE_HELP_HIGHLIGHT_CURRENT, SIGNATURE_HELP_HIGHLIGHT_OVERLOAD,\n};\n\npub fn lsp_formatting_options(settings: &LanguageSettings) -> lsp::FormattingOptions {\n    lsp::FormattingOptions {\n        tab_size: settings.tab_size.into(),\n        insert_spaces: !settings.hard_tabs,\n        trim_trailing_whitespace: Some(settings.remove_trailing_whitespace_on_save),\n        trim_final_newlines: Some(settings.ensure_final_newline_on_save),\n        insert_final_newline: Some(settings.ensure_final_newline_on_save),\n        ..lsp::FormattingOptions::default()\n    }\n}\n\npub(crate) fn file_path_to_lsp_url(path: &Path) -> Result<lsp::Url> {\n    match lsp::Url::from_file_path(path) {\n        Ok(url) => Ok(url),\n        Err(()) => Err(anyhow!(\n            \"Invalid file path provided to LSP request: {path:?}\"\n        )),\n    }\n}\n\npub(crate) fn make_text_document_identifier(path: &Path) -> Result<lsp::TextDocumentIdentifier> {\n    Ok(lsp::TextDocumentIdentifier {\n        uri: file_path_to_lsp_url(path)?,\n    })\n}\n\npub(crate) fn make_lsp_text_document_position(\n    path: &Path,\n    position: PointUtf16,\n) -> Result<lsp::TextDocumentPositionParams> {\n    Ok(lsp::TextDocumentPositionParams {\n        text_document: make_text_document_identifier(path)?,\n        position: point_to_lsp(position),\n    })\n}\n\n#[async_trait(?Send)]\npub trait LspCommand: 'static + Sized + Send + std::fmt::Debug {\n    type Response: 'static + Default + Send + std::fmt::Debug;\n    type LspRequest: 'static + Send + lsp::request::Request;\n    type ProtoRequest: 'static + Send + proto::RequestMessage;\n\n    fn display_name(&self) -> &str;\n\n    fn status(&self) -> Option<String> {\n        None\n    }\n\n    fn to_lsp_params_or_response(\n        &self,\n        path: &Path,\n        buffer: &Buffer,\n        language_server: &Arc<LanguageServer>,\n        cx: &App,\n    ) -> Result<\n        LspParamsOrResponse<<Self::LspRequest as lsp::request::Request>::Params, Self::Response>,\n    > {\n        if self.check_capabilities(language_server.adapter_server_capabilities()) {\n            Ok(LspParamsOrResponse::Params(self.to_lsp(\n                path,\n                buffer,\n                language_server,\n                cx,\n            )?))\n        } else {\n            Ok(LspParamsOrResponse::Response(Default::default()))\n        }\n    }\n\n    /// When false, `to_lsp_params_or_response` default implementation will return the default response.\n    fn check_capabilities(&self, _: AdapterServerCapabilities) -> bool {\n<|editable_region_end|>\n    /// When false, `to_lsp_params_or_response` default implementation will return the default response.\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/project/src/lsp_command.rs\n<|start_of_file|>\n<|editable_region_start|>\nmod signature_help;\n\nuse crate::{\n    lsp_store::{LocalLspStore, LspStore},\n    CodeAction, CoreCompletion, DocumentHighlight, Hover, HoverBlock, HoverBlockKind, InlayHint,\n    InlayHintLabel, InlayHintLabelPart, InlayHintLabelPartTooltip, InlayHintTooltip, Location,\n    LocationLink, MarkupContent, Prepar<|user_cursor_is_here|>eRenameResponse, ProjectTransaction, ResolveState,\n};\nuse anyhow::{anyhow, Context as _, Result};\nuse async_trait::async_trait;\nuse client::proto::{self, PeerId};\nuse clock::Global;\nuse collections::HashSet;\nuse futures::future;\nuse gpui::{App, AsyncApp, Entity};\nuse language::{\n    language_settings::{language_settings, InlayHintKind, LanguageSettings},\n    point_from_lsp, point_to_lsp,\n    proto::{deserialize_anchor, deserialize_version, serialize_anchor, serialize_version},\n    range_from_lsp, range_to_lsp, Anchor, Bias, Buffer, BufferSnapshot, CachedLspAdapter, CharKind,\n    OffsetRangeExt, PointUtf16, ToOffset, ToPointUtf16, Transaction, Unclipped,\n};\nuse lsp::{\n    AdapterServerCapabilities, CodeActionKind, CodeActionOptions, CompletionContext,\n    CompletionListItemDefaultsEditRange, CompletionTriggerKind, DocumentHighlightKind,\n    LanguageServer, LanguageServerId, LinkedEditingRangeServerCapabilities, OneOf, RenameOptions,\n    ServerCapabilities,\n};\nuse signature_help::{lsp_to_proto_signature, proto_to_lsp_signature};\nuse std::{cmp::Reverse, ops::Range, path::Path, sync::Arc};\nuse text::{BufferId, LineEnding};\n\npub use signature_help::{\n    SignatureHelp, SIGNATURE_HELP_HIGHLIGHT_CURRENT, SIGNATURE_HELP_HIGHLIGHT_OVERLOAD,\n};\n\npub fn lsp_formatting_options(settings: &LanguageSettings) -> lsp::FormattingOptions {\n    lsp::FormattingOptions {\n        tab_size: settings.tab_size.into(),\n        insert_spaces: !settings.hard_tabs,\n        trim_trailing_whitespace: Some(settings.remove_trailing_whitespace_on_save),\n        trim_final_newlines: Some(settings.ensure_final_newline_on_save),\n        insert_final_newline: Some(settings.ensure_final_newline_on_save),\n        ..lsp::FormattingOptions::default()\n    }\n}\n\npub(crate) fn file_path_to_lsp_url(path: &Path) -> Result<lsp::Url> {\n    match lsp::Url::from_file_path(path) {\n        Ok(url) => Ok(url),\n        Err(()) => Err(anyhow!(\n            \"Invalid file path provided to LSP request: {path:?}\"\n        )),\n    }\n}\n\npub(crate) fn make_text_document_identifier(path: &Path) -> Result<lsp::TextDocumentIdentifier> {\n    Ok(lsp::TextDocumentIdentifier {\n        uri: file_path_to_lsp_url(path)?,\n    })\n}\n\npub(crate) fn make_lsp_text_document_position(\n    path: &Path,\n    position: PointUtf16,\n) -> Result<lsp::TextDocumentPositionParams> {\n    Ok(lsp::TextDocumentPositionParams {\n        text_document: make_text_document_identifier(path)?,\n        position: point_to_lsp(position),\n    })\n}\n\n#[async_trait(?Send)]\npub trait LspCommand: 'static + Sized + Send + std::fmt::Debug {\n    type Response: 'static + Default + Send + std::fmt::Debug;\n    type LspRequest: 'static + Send + lsp::request::Request;\n    type ProtoRequest: 'static + Send + proto::RequestMessage;\n\n    fn display_name(&self) -> &str;\n\n    fn status(&self) -> Option<String> {\n        None\n    }\n\n    fn to_lsp_params_or_response(\n        &self,\n        path: &Path,\n        buffer: &Buffer,\n        language_server: &Arc<LanguageServer>,\n        cx: &App,\n    ) -> Result<\n        LspParamsOrResponse<<Self::LspRequest as lsp::request::Request>::Params, Self::Response>,\n    > {\n        if self.check_capabilities(language_server.adapter_server_capabilities()) {\n            Ok(LspParamsOrResponse::Params(self.to_lsp(\n                path,\n                buffer,\n                language_server,\n                cx,\n            )?))\n        } else {\n            Ok(LspParamsOrResponse::Response(Default::default()))\n        }\n    }\n\n    /// When false, `to_lsp_params_or_response` default implementation will return the default response.\n    fn check_capabilities(&self, _: AdapterServerCapabilities) -> bool {\n<|editable_region_end|>\n    /// When false, `to_lsp_params_or_response` default implementation will return the default response.\n```"
  },
  "max_tokens": 1024
}