{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/gpui/src/platform/mac/display_link.rs\":\n```diff\n@@ -7,6 +7,7 @@\n     },\n };\n use anyhow::Result;\n+\n use core_graphics::display::CGDirectDisplayID;\n use std::ffi::c_void;\n use util::ResultExt;\n\n```\n\nUser edited \"crates/gpui/src/platform/mac/display_link.rs\":\n```diff\n@@ -8,7 +8,7 @@\n };\n use anyhow::Result;\n \n-use core_graphics::display::CGDirectDisplayID;\n+לחדuse core_graphics::display::CGDirectDisplayID;\n use std::ffi::c_void;\n use util::ResultExt;\n \n\n```\n\n### Input:\n```crates/gpui/src/platform/mac/display_link.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse crate::{\n    dispatch_get_main_queue,\n    dispatch_sys::{\n        _dispatch_source_type_data_add, dispatch_resume, dispatch_set_context,\n        dispatch_source_cancel, dispatch_source_create, dispatch_source_merge_data,\n        dispatch_source_set_event_handler_f, dispatch_source_t, dispatch_suspend,\n    },\n};\nuse anyhow::Result;\n\nלחד<|user_cursor_is_here|>use core_graphics::display::CGDirectDisplayID;\nuse std::ffi::c_void;\nuse util::ResultExt;\n\npub struct DisplayLink {\n    display_link: sys::DisplayLink,\n    frame_requests: dispatch_source_t,\n}\n\nimpl DisplayLink {\n    pub fn new(\n        display_id: CGDirectDisplayID,\n        data: *mut c_void,\n        callback: unsafe extern \"C\" fn(*mut c_void),\n    ) -> Result<DisplayLink> {\n        unsafe extern \"C\" fn display_link_callback(\n            _display_link_out: *mut sys::CVDisplayLink,\n            _current_time: *const sys::CVTimeStamp,\n            _output_time: *const sys::CVTimeStamp,\n            _flags_in: i64,\n            _flags_out: *mut i64,\n            frame_requests: *mut c_void,\n        ) -> i32 {\n            let frame_requests = frame_requests as dispatch_source_t;\n            dispatch_source_merge_data(frame_requests, 1);\n            0\n        }\n\n        unsafe {\n            let frame_requests = dispatch_source_create(\n                &_dispatch_source_type_data_add,\n                0,\n                0,\n                dispatch_get_main_queue(),\n            );\n            dispatch_set_context(\n                crate::dispatch_sys::dispatch_object_t {\n                    _ds: frame_requests,\n                },\n                data,\n            );\n            dispatch_source_set_event_handler_f(frame_requests, Some(callback));\n\n            let display_link = sys::DisplayLink::new(\n                display_id,\n                display_link_callback,\n                frame_requests as *mut c_void,\n            )?;\n\n            Ok(Self {\n                display_link,\n                frame_requests,\n            })\n        }\n    }\n\n    pub fn start(&mut self) -> Result<()> {\n        unsafe {\n            dispatch_resume(crate::dispatch_sys::dispatch_object_t {\n                _ds: self.frame_requests,\n            });\n            self.display_link.start()?;\n        }\n        Ok(())\n    }\n\n    pub fn stop(&mut self) -> Result<()> {\n        unsafe {\n            dispatch_suspend(crate::dispatch_sys::dispatch_object_t {\n                _ds: self.frame_requests,\n            });\n            self.display_link.stop()?;\n        }\n        Ok(())\n    }\n}\n\nimpl Drop for DisplayLink {\n    fn drop(&mut self) {\n        self.stop().log_err();\n        unsafe {\n            dispatch_source_cancel(self.frame_requests);\n        }\n    }\n}\n\nmod sys {\n    //! Derived from display-link crate under the following license:\n    //! <https://github.com/BrainiumLLC/display-link/blob/master/LICENSE-MIT>\n    //! Apple docs: [CVDisplayLink](https://developer.apple.com/documentation/corevideo/cvdisplaylinkoutputcallback?language=objc)\n    #![allow(dead_code, non_upper_case_globals)]\n\n    use anyhow::Result;\n    use core_graphics::display::CGDirectDisplayID;\n    use foreign_types::{foreign_type, ForeignType};\n    use std::{\n        ffi::c_void,\n        fmt::{self, Debug, Formatter},\n    };\n\n    #[derive(Debug)]\n    pub enum CVDisplayLink {}\n\n    foreign_type! {\n        pub unsafe type DisplayLink {\n            type CType = CVDisplayLink;\n            fn drop = CVDisplayLinkRelease;\n            fn clone = CVDisplayLinkRetain;\n        }\n    }\n\n    impl Debug for DisplayLink {\n        fn fmt(&self, formatter: &mut Formatter) -> fmt::Result {\n            formatter\n                .debug_tuple(\"DisplayLink\")\n                .field(&self.as_ptr())\n                .finish()\n        }\n    }\n\n    #[repr(C)]\n    #[derive(Clone, Copy)]\n    pub(crate) struct CVTimeStamp {\n        pub version: u32,\n        pub video_time_scale: i32,\n        pub video_time: i64,\n        pub host_time: u64,\n        pub rate_scalar: f64,\n<|editable_region_end|>\n        pub host_time: u64,\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/gpui/src/platform/mac/display_link.rs\n<|start_of_file|>\n<|editable_region_start|>\nuse crate::{\n    dispatch_get_main_queue,\n    dispatch_sys::{\n        _dispatch_source_type_data_add, dispatch_resume, dispatch_set_context,\n        dispatch_source_cancel, dispatch_source_create, dispatch_source_merge_data,\n        dispatch_source_set_event_handler_f, dispatch_source_t, dispatch_suspend,\n    },\n};\nuse anyhow::Result;\n\nלחד<|user_cursor_is_here|>use core_graphics::display::CGDirectDisplayID;\nuse std::ffi::c_void;\nuse util::ResultExt;\n\npub struct DisplayLink {\n    display_link: sys::DisplayLink,\n    frame_requests: dispatch_source_t,\n}\n\nimpl DisplayLink {\n    pub fn new(\n        display_id: CGDirectDisplayID,\n        data: *mut c_void,\n        callback: unsafe extern \"C\" fn(*mut c_void),\n    ) -> Result<DisplayLink> {\n        unsafe extern \"C\" fn display_link_callback(\n            _display_link_out: *mut sys::CVDisplayLink,\n            _current_time: *const sys::CVTimeStamp,\n            _output_time: *const sys::CVTimeStamp,\n            _flags_in: i64,\n            _flags_out: *mut i64,\n            frame_requests: *mut c_void,\n        ) -> i32 {\n            let frame_requests = frame_requests as dispatch_source_t;\n            dispatch_source_merge_data(frame_requests, 1);\n            0\n        }\n\n        unsafe {\n            let frame_requests = dispatch_source_create(\n                &_dispatch_source_type_data_add,\n                0,\n                0,\n                dispatch_get_main_queue(),\n            );\n            dispatch_set_context(\n                crate::dispatch_sys::dispatch_object_t {\n                    _ds: frame_requests,\n                },\n                data,\n            );\n            dispatch_source_set_event_handler_f(frame_requests, Some(callback));\n\n            let display_link = sys::DisplayLink::new(\n                display_id,\n                display_link_callback,\n                frame_requests as *mut c_void,\n            )?;\n\n            Ok(Self {\n                display_link,\n                frame_requests,\n            })\n        }\n    }\n\n    pub fn start(&mut self) -> Result<()> {\n        unsafe {\n            dispatch_resume(crate::dispatch_sys::dispatch_object_t {\n                _ds: self.frame_requests,\n            });\n            self.display_link.start()?;\n        }\n        Ok(())\n    }\n\n    pub fn stop(&mut self) -> Result<()> {\n        unsafe {\n            dispatch_suspend(crate::dispatch_sys::dispatch_object_t {\n                _ds: self.frame_requests,\n            });\n            self.display_link.stop()?;\n        }\n        Ok(())\n    }\n}\n\nimpl Drop for DisplayLink {\n    fn drop(&mut self) {\n        self.stop().log_err();\n        unsafe {\n            dispatch_source_cancel(self.frame_requests);\n        }\n    }\n}\n\nmod sys {\n    //! Derived from display-link crate under the following license:\n    //! <https://github.com/BrainiumLLC/display-link/blob/master/LICENSE-MIT>\n    //! Apple docs: [CVDisplayLink](https://developer.apple.com/documentation/corevideo/cvdisplaylinkoutputcallback?language=objc)\n    #![allow(dead_code, non_upper_case_globals)]\n\n    use anyhow::Result;\n    use core_graphics::display::CGDirectDisplayID;\n    use foreign_types::{foreign_type, ForeignType};\n    use std::{\n        ffi::c_void,\n        fmt::{self, Debug, Formatter},\n    };\n\n    #[derive(Debug)]\n    pub enum CVDisplayLink {}\n\n    foreign_type! {\n        pub unsafe type DisplayLink {\n            type CType = CVDisplayLink;\n            fn drop = CVDisplayLinkRelease;\n            fn clone = CVDisplayLinkRetain;\n        }\n    }\n\n    impl Debug for DisplayLink {\n        fn fmt(&self, formatter: &mut Formatter) -> fmt::Result {\n            formatter\n                .debug_tuple(\"DisplayLink\")\n                .field(&self.as_ptr())\n                .finish()\n        }\n    }\n\n    #[repr(C)]\n    #[derive(Clone, Copy)]\n    pub(crate) struct CVTimeStamp {\n        pub version: u32,\n        pub video_time_scale: i32,\n        pub video_time: i64,\n        pub host_time: u64,\n        pub rate_scalar: f64,\n<|editable_region_end|>\n        pub host_time: u64,\n```"
  },
  "max_tokens": 1024
}