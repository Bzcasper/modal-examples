{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -457,7 +457,7 @@\n                 };\n \n                 menu = menu.toggleable_entry(\n-                    label,\n+                    \"Data Collection\",\n                     provider.is_data_collection_enabled(cx),\n                     IconPosition::Start,\n                     None,\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -447,7 +447,7 @@\n         if let Some(provider) = &self.inline_completion_provider {\n             let state = provider.data_collection_state(cx);\n             if state.is_supported() {\n-                menu = menu.separator().header(\"Data Collection:\");\n+                menu = menu.separator();\n \n                 let provider = provider.clone();\n                 let label = if provider.is_enabled() {\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -447,7 +447,7 @@\n         if let Some(provider) = &self.inline_completion_provider {\n             let state = provider.data_collection_state(cx);\n             if state.is_supported() {\n-                menu = menu.separator();\n+                menu = menu;\n \n                 let provider = provider.clone();\n                 let label = if provider.is_enabled() {\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -447,8 +447,8 @@\n         if let Some(provider) = &self.inline_completion_provider {\n             let state = provider.data_collection_state(cx);\n             if state.is_supported() {\n-                menu = menu;\n \n+\n                 let provider = provider.clone();\n                 let label = if provider.is_enabled() {\n                     \"Turned On\"\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -447,16 +447,13 @@\n         if let Some(provider) = &self.inline_completion_provider {\n             let state = provider.data_collection_state(cx);\n             if state.is_supported() {\n-\n-\n-                let provider = provider.clone();\n                 let label = if provider.is_enabled() {\n                     \"Turned On\"\n                 } else {\n                     \"Turned Off\"\n                 };\n \n-                menu = menu.toggleable_entry(\n+                menu = menu.separator().toggleable_entry(\n                     \"Data Collection\",\n                     provider.is_data_collection_enabled(cx),\n                     IconPosition::Start,\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -447,13 +447,8 @@\n         if let Some(provider) = &self.inline_completion_provider {\n             let state = provider.data_collection_state(cx);\n             if state.is_supported() {\n-                let label = if provider.is_enabled() {\n-                    \"Turned On\"\n-                } else {\n-                    \"Turned Off\"\n-                };\n \n-                menu = menu.separator().toggleable_entry(\n+                let provider = provider.clone();                menu = menu.separator().toggleable_entry(\n                     \"Data Collection\",\n                     provider.is_data_collection_enabled(cx),\n                     IconPosition::Start,\n\n```\n\nUser edited \"crates/inline_completion_button/src/inline_completion_button.rs\":\n```diff\n@@ -447,8 +447,8 @@\n         if let Some(provider) = &self.inline_completion_provider {\n             let state = provider.data_collection_state(cx);\n             if state.is_supported() {\n-\n-                let provider = provider.clone();                menu = menu.separator().toggleable_entry(\n+                let provider = provider.clone();\n+                menu = menu.separator().toggleable_entry(\n                     \"Data Collection\",\n                     provider.is_data_collection_enabled(cx),\n                     IconPosition::Start,\n\n```\n\n### Input:\n```crates/inline_completion_button/src/inline_completion_button.rs\n                    .show_inline_completions;\n<|editable_region_start|>\n\n            menu = menu.toggleable_entry(\n                language.name(),\n                language_enabled,\n                IconPosition::Start,\n                None,\n                move |_, cx| {\n                    toggle_inline_completions_for_language(language.clone(), fs.clone(), cx)\n                },\n            );\n        }\n\n        let settings = AllLanguageSettings::get_global(cx);\n        if let Some(file) = &self.file {\n            let path = file.path().clone();\n            let path_enabled = settings.inline_completions_enabled_for_path(&path);\n\n            menu = menu.toggleable_entry(\n                \"This File\",\n                path_enabled,\n                IconPosition::Start,\n                None,\n                move |window, cx| {\n                    if let Some(workspace) = window.root().flatten() {\n                        let workspace = workspace.downgrade();\n                        window\n                            .spawn(cx, |cx| {\n                                configure_disabled_globs(\n                                    workspace,\n                                    path_enabled.then_some(path.clone()),\n                                    cx,\n                                )\n                            })\n                            .detach_and_log_err(cx);\n                    }\n                },\n            );\n        }\n\n        let globally_enabled = settings.inline_completions_enabled(None, None, cx);\n        menu = menu.toggleable_entry(\n            \"All Files\",\n            globally_enabled,\n            IconPosition::Start,\n            None,\n            move |_, cx| toggle_inline_completions_globally(fs.clone(), cx),\n        );\n\n        if let Some(provider) = &self.inline_completion_provider {\n            let data_collection = provider.data_collection_state(cx);\n            if data_collection.is_supported() {\n                let provider = provider.clone();\n                menu = menu.separator().toggleable_entry(\n                    \"Data Collection\",\n                    data_colle<|user_cursor_is_here|>.is_data_collection_enabled(cx),\n                    IconPosition::Start,\n                    None,\n                    move |_, cx| {\n                        provider.toggle_data_collection(cx);\n                    },\n                );\n            }\n        }\n\n        if let Some(editor_focus_handle) = self.editor_focus_handle.clone() {\n            menu = menu\n                .separator()\n                .entry(\n                    \"Predict Edit at Cursor\",\n                    Some(Box::new(ShowInlineCompletion)),\n                    {\n                        let editor_focus_handle = editor_focus_handle.clone();\n\n                        move |window, cx| {\n                            editor_focus_handle.dispatch_action(&ShowInlineCompletion, window, cx);\n                        }\n                    },\n                )\n                .context(editor_focus_handle);\n        }\n\n        menu\n    }\n\n    fn build_copilot_context_menu(\n        &self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Entity<ContextMenu> {\n        ContextMenu::build(window, cx, |menu, _, cx| {\n            self.build_language_settings_menu(menu, cx)\n                .separator()\n                .link(\n                    \"Go to Copilot Settings\",\n                    OpenBrowser {\n                        url: COPILOT_SETTINGS_URL.to_string(),\n                    }\n                    .boxed_clone(),\n                )\n                .action(\"Sign Out\", copilot::SignOut.boxed_clone())\n        })\n    }\n\n    fn build_supermaven_context_menu(\n        &self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Entity<ContextMenu> {\n        ContextMenu::build(window, cx, |menu, _, cx| {\n            self.build_language_settings_menu(menu, cx)\n                .separator()\n                .action(\"Sign Out\", supermaven::SignOut.boxed_clone())\n<|editable_region_end|>\n                .separator()\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```crates/inline_completion_button/src/inline_completion_button.rs\n                    .show_inline_completions;\n<|editable_region_start|>\n\n            menu = menu.toggleable_entry(\n                language.name(),\n                language_enabled,\n                IconPosition::Start,\n                None,\n                move |_, cx| {\n                    toggle_inline_completions_for_language(language.clone(), fs.clone(), cx)\n                },\n            );\n        }\n\n        let settings = AllLanguageSettings::get_global(cx);\n        if let Some(file) = &self.file {\n            let path = file.path().clone();\n            let path_enabled = settings.inline_completions_enabled_for_path(&path);\n\n            menu = menu.toggleable_entry(\n                \"This File\",\n                path_enabled,\n                IconPosition::Start,\n                None,\n                move |window, cx| {\n                    if let Some(workspace) = window.root().flatten() {\n                        let workspace = workspace.downgrade();\n                        window\n                            .spawn(cx, |cx| {\n                                configure_disabled_globs(\n                                    workspace,\n                                    path_enabled.then_some(path.clone()),\n                                    cx,\n                                )\n                            })\n                            .detach_and_log_err(cx);\n                    }\n                },\n            );\n        }\n\n        let globally_enabled = settings.inline_completions_enabled(None, None, cx);\n        menu = menu.toggleable_entry(\n            \"All Files\",\n            globally_enabled,\n            IconPosition::Start,\n            None,\n            move |_, cx| toggle_inline_completions_globally(fs.clone(), cx),\n        );\n\n        if let Some(provider) = &self.inline_completion_provider {\n            let data_collection = provider.data_collection_state(cx);\n            if data_collection.is_supported() {\n                let provider = provider.clone();\n                menu = menu.separator().toggleable_entry(\n                    \"Data Collection\",\n                    data_colle<|user_cursor_is_here|>.is_data_collection_enabled(cx),\n                    IconPosition::Start,\n                    None,\n                    move |_, cx| {\n                        provider.toggle_data_collection(cx);\n                    },\n                );\n            }\n        }\n\n        if let Some(editor_focus_handle) = self.editor_focus_handle.clone() {\n            menu = menu\n                .separator()\n                .entry(\n                    \"Predict Edit at Cursor\",\n                    Some(Box::new(ShowInlineCompletion)),\n                    {\n                        let editor_focus_handle = editor_focus_handle.clone();\n\n                        move |window, cx| {\n                            editor_focus_handle.dispatch_action(&ShowInlineCompletion, window, cx);\n                        }\n                    },\n                )\n                .context(editor_focus_handle);\n        }\n\n        menu\n    }\n\n    fn build_copilot_context_menu(\n        &self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Entity<ContextMenu> {\n        ContextMenu::build(window, cx, |menu, _, cx| {\n            self.build_language_settings_menu(menu, cx)\n                .separator()\n                .link(\n                    \"Go to Copilot Settings\",\n                    OpenBrowser {\n                        url: COPILOT_SETTINGS_URL.to_string(),\n                    }\n                    .boxed_clone(),\n                )\n                .action(\"Sign Out\", copilot::SignOut.boxed_clone())\n        })\n    }\n\n    fn build_supermaven_context_menu(\n        &self,\n        window: &mut Window,\n        cx: &mut Context<Self>,\n    ) -> Entity<ContextMenu> {\n        ContextMenu::build(window, cx, |menu, _, cx| {\n            self.build_language_settings_menu(menu, cx)\n                .separator()\n                .action(\"Sign Out\", supermaven::SignOut.boxed_clone())\n<|editable_region_end|>\n                .separator()\n```"
  },
  "max_tokens": 1024
}