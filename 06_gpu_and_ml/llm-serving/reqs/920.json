{
  "temperature": 0,
  "prompt": "## Task\nBelow is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are a code completion assistant and your task is to analyze user edits and then rewrite an excerpt that the user provides, suggesting the appropriate edits within the excerpt, taking into account the cursor location.\n\n### Events:\nUser edited \"crates/zeta/src/zeta.rs\":\n```diff\n@@ -1491,7 +1491,6 @@\n             data_collection.set_choice(choice, &self.zeta, cx);\n         }\n     }\n-\n }\n \n impl inline_completion::InlineCompletionProvider for ZetaInlineCompletionProvider {\n@@ -1706,7 +1705,7 @@\n                                 move |_window, cx| {\n                                     this.update(cx, |this, cx| {\n                                         this.set_data_collection_choice(\n-                                            DataCollectionChoice::Enabled,\n+                                                   DataCollectionChoice::Enabled,\n                                             cx,\n                                         )\n                                     });\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -13,6 +13,7 @@\n use ui::Window;\n use workspace::Workspace;\n use zed_predict_onboarding::ZedPredictModal;\n+use zeta::ProviderDataCollection;\n \n pub fn init(client: Arc<Client>, user_store: Entity<UserStore>, fs: Arc<dyn Fs>, cx: &mut App) {\n     let editors: Rc<RefCell<HashMap<WeakEntity<Editor>, AnyWindowHandle>>> = Rc::default();\n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -267,7 +267,7 @@\n                 let data_collection = ProviderDataCollection::new(\n                     zeta.clone(),\n                     window.root::<Workspace>().flatten(),\n-                    buffer,\n+                    &singleton_buffer,\n                     cx,\n                 );\n \n\n```\n\nUser edited \"crates/zed/src/zed/inline_completion_registry.rs\":\n```diff\n@@ -267,7 +267,7 @@\n                 let data_collection = ProviderDataCollection::new(\n                     zeta.clone(),\n                     window.root::<Workspace>().flatten(),\n-                    &singleton_buffer,\n+                    singleton_buffer,\n                     cx,\n                 );\n \n\n```\n\n\n\nUser edited \"crates/zeta/src/persistence.rs\":\n```diff\n@@ -36,9 +36,9 @@\n     }\n \n     query! {\n-        pub async fn save_accepted_data_collection(project_path: PathBuf, accepted_data_collection: bool) -> Result<()> {\n+        pub async fn save_accepted_data_collection(worktree_path: PathBuf, accepted_data_collection: bool) -> Result<()> {\n             INSERT INTO zeta_preferences\n-                (project_path, accepted_data_collection)\n+                (worktree_path, accepted_data_collection)\n             VALUES\n                 (?1, ?2)\n             ON CONFLICT (project_path) DO UPDATE SET\n\n```\n\nUser edited \"crates/zeta/src/persistence.rs\":\n```diff\n@@ -10,7 +10,7 @@\n     pub static ref DB: ZetaDb<WorkspaceDb> = &[\n         sql! (\n             CREATE TABLE zeta_preferences(\n-                project_path BLOB NOT NULL PRIMARY KEY,\n+                workree_path BLOB NOT NULL PRIMARY KEY,\n                 accepted_data_collection INTEGER\n             ) STRICT;\n         ),\n\n```\n\nUser edited \"crates/zeta/src/persistence.rs\":\n```diff\n@@ -24,14 +24,14 @@\n \n     query! {\n         fn get_all_zeta_preferences_query() -> Result<Vec<(PathBuf, bool)>> {\n-            SELECT project_path, accepted_data_collection FROM zeta_preferences\n+            SELECT worktree_path, accepted_data_collection FROM zeta_preferences\n         }\n     }\n \n     query! {\n-        pub fn get_accepted_data_collection(project_path: &Path) -> Result<Option<bool>> {\n+        pub fn get_accepted_data_collection(worktree_path: &Path) -> Result<Option<bool>> {\n             SELECT accepted_data_collection FROM zeta_preferences\n-            WHERE project_path = ?\n+            WHERE worktree_path = ?\n         }\n     }\n \n@@ -41,7 +41,7 @@\n                 (worktree_path, accepted_data_collection)\n             VALUES\n                 (?1, ?2)\n-            ON CONFLICT (project_path) DO UPDATE SET\n+            ON CONFLICT (worktree_path) DO UPDATE SET\n                 accepted_data_collection = ?2\n         }\n     }\n\n```\n\nUser edited \"crates/zeta/src/persistence.rs\":\n```diff\n@@ -10,7 +10,7 @@\n     pub static ref DB: ZetaDb<WorkspaceDb> = &[\n         sql! (\n             CREATE TABLE zeta_preferences(\n-                workree_path BLOB NOT NULL PRIMARY KEY,\n+                workrree_path BLOB NOT NULL PRIMARY KEY,\n                 accepted_data_collection INTEGER\n             ) STRICT;\n         ),\n\n```\n\nUser edited \"crates/zeta/src/persistence.rs\":\n```diff\n@@ -10,7 +10,7 @@\n     pub static ref DB: ZetaDb<WorkspaceDb> = &[\n         sql! (\n             CREATE TABLE zeta_preferences(\n-                workrree_path BLOB NOT NULL PRIMARY KEY,\n+                worktree_path BLOB NOT NULL PRIMARY KEY,\n                 accepted_data_collection INTEGER\n             ) STRICT;\n         ),\n\n```\n\nUser edited \".git/COMMIT_EDITMSG\":\n```diff\n@@ -1,4 +1,4 @@\n-\n+Toggle zeta data collection from \n # Please enter the commit message for your changes. Lines starting\n # with '#' will be ignored, and an empty message aborts the commit.\n #\n\n```\n\nUser edited \".git/COMMIT_EDITMSG\":\n```diff\n@@ -1,4 +1,5 @@\n-Toggle zeta data collection from \n+Toggle zeta data collection from status bar button\n+\n # Please enter the commit message for your changes. Lines starting\n # with '#' will be ignored, and an empty message aborts the commit.\n #\n\n```\n\n### Input:\n```.git/COMMIT_EDITMSG\n<|start_of_file|>\n<|editable_region_start|>\nToggle zeta data collection from status bar button\n<|user_cursor_is_here|>\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# On branch zeta-onboarding\n# Your branch is up to date with 'origin/zeta-onboarding'.\n#\n# Changes to be committed:\n#\tmodified:   crates/zed/src/zed/inline_completion_registry.rs\n#\tmodified:   crates/zeta/src/persistence.rs\n#\tmodified:   crates/zeta/src/zeta.rs\n#\n\n<|editable_region_end|>\n```\n\n### Response\n\n",
  "rewrite_speculation": true,
  "prediction": {
    "content": "```.git/COMMIT_EDITMSG\n<|start_of_file|>\n<|editable_region_start|>\nToggle zeta data collection from status bar button\n<|user_cursor_is_here|>\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# On branch zeta-onboarding\n# Your branch is up to date with 'origin/zeta-onboarding'.\n#\n# Changes to be committed:\n#\tmodified:   crates/zed/src/zed/inline_completion_registry.rs\n#\tmodified:   crates/zeta/src/persistence.rs\n#\tmodified:   crates/zeta/src/zeta.rs\n#\n\n<|editable_region_end|>\n```"
  },
  "max_tokens": 1024
}